{"version":3,"file":"index.esm.mjs","sources":["../src/utils.ts","../src/CookiesManager.ts","../src/Banner.ts","../src/Modal.ts"],"sourcesContent":["\nexport class Utils {\n    public static encode(str) {\n        return window.btoa(str);\n    }\n    public static decode(a) {\n        return window.atob(a);\n    }\n    private static isHTML(str: string) {\n        var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n\n        // test isHTML regex\n        return str.match(isHTML);\n\n    }\n    public static wrapString(str: string, tag: string) {\n        if (this.isHTML(str)) {\n            return str;\n        }\n        return `<${tag}>${str}</${tag}>`;\n    }\n\n    public static deepEqual(x, y) {\n        const ok = Object.keys, tx = typeof x, ty = typeof y;\n        return x && y && tx === 'object' && tx === ty ? (\n            ok(x).length === ok(y).length &&\n            ok(x).every(key => this.deepEqual(x[key], y[key]))\n        ) : (x === y);\n    }\n\n    public static compareObjects(a, b) {\n        let s = (o) => Object.entries(o).sort().map(i => {\n            if (i[1] instanceof Object) i[1] = s(i[1]);\n            return i\n        })\n        return JSON.stringify(s(a)) === JSON.stringify(s(b))\n    }\n\n    public static objectEquals(obj1, obj2) {\n        const JSONstringifyOrder = obj => {\n            const keys = {};\n            JSON.stringify(obj, (key, value) => {\n                keys[key] = null;\n                return value;\n            });\n            return JSON.stringify(obj, Object.keys(keys).sort());\n        };\n        return JSONstringifyOrder(obj1) === JSONstringifyOrder(obj2);\n    }\n\n    public static prepareObjectsForComparison(obj1, obj2) {\n        var A = JSON.parse(JSON.stringify(obj1));\n        var B = JSON.parse(JSON.stringify(obj2));\n\n\n        A.forEach(element => {\n            element.checked = true;\n        });\n        B.forEach(element => {\n            element.checked = true;\n        });\n        return { A, B }\n    }\n\n    public static mergeRecursively(obj1, obj2) {\n        for (var p in obj2) {\n            try {\n                // Property in destination object set; update its value.\n                if (obj2[p].constructor == Object) {\n                    obj1[p] = this.mergeRecursively(obj1[p], obj2[p]);\n                } else {\n                    obj1[p] = obj2[p];\n                }\n            } catch (e) {\n                // Property in destination object not set; create it and set its value.\n                obj1[p] = obj2[p];\n            }\n        }\n        return obj1;\n    }\n}","\nimport { Banner, BannerOptions } from \"./Banner\";\nimport { ModalOptions, Modal } from './Modal';\nimport \"./scss/styles.scss\";\nimport { Utils } from './utils';\n\ninterface cookieCatergoryCallbackInterface {\n    (CookieCategory: CookieCategory): void;\n}\nexport class CookiesManager {\n\n    // var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n    private modalOptions: Options;\n    private banner: Banner;\n    private modal: Modal;\n    private acceptAll: boolean = false;\n    private configChanged: boolean = false;\n    private onCookieCategoryChange: cookieCatergoryCallbackInterface;\n\n\n    public getBanner(): Banner {\n        return this.banner;\n    }\n\n    public setBanner(banner: Banner): void {\n        this.banner = banner;\n    }\n\n    public getModal(): Modal {\n        return this.modal;\n    }\n\n    public setModal(modal: Modal): void {\n        this.modal = modal;\n    }\n\n    public getOptions(): Options {\n        return this.modalOptions;\n    }\n\n    public on(listener, callback: cookieCatergoryCallbackInterface) {\n        if (listener == \"onCookieCategoryChange\") {\n            this.onCookieCategoryChange = callback;\n        }\n    }\n\n    constructor(options: Options) {\n        if (options == null) {\n            throw new Error(\"Options for CookiesManager cannot be null.\");\n        } else {\n            if (options.cookieCategories == null) {\n                throw new Error(\"You should provide at least one cookie category\");\n            }\n            // Set all cookie categories as checked by default\n            options.cookieCategories.forEach(category => {\n                category.checked = true;\n            });\n\n            // Merge the default options with user options\n            options = Utils.mergeRecursively(this.getDefaultOptions(), options);\n            this.modalOptions = options;\n            this.constructorInitializationFunction(options);\n        }\n    }\n\n    private constructorInitializationFunction(options) {\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) { // If there's already configuration saved\n            // Prepare the options to compare them.\n            var optionsComparison = Utils.prepareObjectsForComparison(this.modalOptions.cookieCategories, this.getCookiesOptions());\n\n            // Check if the options in localStorage and the options from the constructor are the same\n            if (Utils.objectEquals(optionsComparison.A, optionsComparison.B)) {\n                // If the options are the same, just inject the scripts\n                this.modalOptions.cookieCategories = this.getCookiesOptions();\n\n            } else {\n                // If the options are different, set the configChanged to true\n                // We are in the constructor. By setting this to true, it might show the banner and modal if the user has set askOnChange to true\n                this.configChanged = true;\n            }\n        }\n\n        // Generate modal\n        if (options.modalOptions != null) {\n\n            this.createModal(options.modalOptions);\n\n        }\n\n        if (options.bannerOptions != null) {\n            this.createBanner(options.bannerOptions);\n\n        }\n    }\n\n    public setEventListeners() {\n        this.modal.setEventListeners();\n        this.banner.setEventListeners();\n\n    }\n\n    public createBanner(options: BannerOptions) {\n        this.banner = new Banner(this, options);\n        return this.banner;\n    }\n    public createModal(options: ModalOptions) {\n        this.modal = new Modal(this, options);\n        return this.modal;\n    }\n\n    public acceptAllButton() {\n        this.acceptAll = true;\n        this.modal.hide();\n        this.banner.hide();\n        this.injectScripts();\n        this.saveCookieOptions();\n    }\n\n    public showModal() {\n        this.modal.show();\n    }\n\n    public showBanner() {\n        this.banner.show();\n    }\n\n    public hideBanner() {\n        this.banner.hide();\n    }\n\n    public hideModal() {\n        this.modal.hide();\n    }\n\n    private injectScript(src: string, async = false) {\n        var s = document.createElement('script');\n        s.setAttribute('src', src);\n        s.async = async;\n        document.body.appendChild(s);\n    }\n\n    private injectGTM(gtmCode: string) {\n        try {\n            (function (w, d, s, l, i) {\n                w[l] = w[l] || [];\n                w[l].push({\n                    'gtm.start': new Date().getTime(),\n                    event: 'gtm.js',\n                });\n                const f = d.getElementsByTagName(s)[0];\n                const j = d.createElement(s) as HTMLInputElement;\n                const\n                    dl = l != 'dataLayer' ? `&l=${l}` : '';\n                //j.async = true;\n                j.src = `https://www.googletagmanager.com/gtm.js?id=${i}${dl}`;\n                f.parentNode!.insertBefore(j, f);\n            }(window, document, 'script', 'dataLayer', gtmCode));\n            (window as any).dataLayer = (window as any).dataLayer || [];\n        } catch (error) {\n            console.error(\"Couldn't inject GTM.\")\n        }\n    }\n\n    public async  init(banner: boolean, modal: boolean) {\n        if (this.modalOptions.askOnce) {\n            if (localStorage.getItem(\"cookiesManagerOptions\") == null || this.configChanged) {\n                await this.initShow(banner, modal)\n            } // There's no else, as if cookiesManagerOptions was not null, the constructor would do the job.\n        } else {\n           await this.initShow(banner, modal)\n        }\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            this.injectScripts();\n        }\n    }\n\n    public async initShow(banner: boolean, modal: boolean) {\n        if (this.modalOptions.delay > 0) {\n            await new Promise(r => setTimeout(r, this.modalOptions.delay)); // This is to make the show animation work\n        }\n        if (banner) {\n            this.showBanner();\n        }\n        if (modal) {\n            console.log(\"isthereamodel\")\n            console.log(this.modal)\n            this.showModal();\n        }\n    }\n\n    public injectScripts() {\n        try {\n\n            this.modalOptions.cookieCategories.forEach(category => {\n                if (this.onCookieCategoryChange != null) {\n                    this.onCookieCategoryChange(category);\n                }\n                if (category.checked || this.acceptAll) {\n                    category.scripts.forEach(script => {\n                        if (script.type == ScriptType.STANDARD || script.type == null) {\n                            if (script.scriptSrc != null) {\n                                this.injectScript(script.scriptSrc, script.async)\n                            }\n                        } else {\n                            if (script.gtmCode != null) {\n                                this.injectGTM(script.gtmCode);\n                            } else {\n                                throw new Error(\"You should provide a gtmCode for the script\");\n                            }\n                        }\n                    });\n                }\n            });\n        } catch (error) {\n            console.error(`Couldn't inject scripts: ${error}`)\n        }\n    }\n\n    saveButton() {\n        this.saveCookieOptions();\n    }\n\n    saveCookieOptions() {\n        const base64Options = Utils.encode(JSON.stringify(this.modalOptions.cookieCategories));\n        localStorage.setItem(\"cookiesManagerOptions\", base64Options);\n    }\n\n    getCookiesOptions(): any {\n        return JSON.parse(Utils.decode(localStorage.getItem(\"cookiesManagerOptions\")));\n    }\n\n    private getDefaultOptions(): Options {\n        return {\n            askOnce: true,\n            delay: 0,\n            askOnChange: true,\n            initOnDomContentLoaded: true,\n            modalOptions: {\n                title: \"Cookie settings\",\n                description: \"Change the settings for the cookies here.\",\n                inject: true,\n                showModalClass: \"show-modal\",\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                saveButton: {\n                    text: 'Save',\n                    show: true,\n                },\n                closeButton: {\n                    text: 'Close',\n                    show: true,\n                },\n            },\n            bannerOptions: {\n                inject: true,\n                wall: true,\n                wallScroll: false,\n                wallBlur: true,\n                bannerText: 'This website uses cookies to ensure you get the best experience on our website.',\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                settingsButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n                acceptRequiredOnlyButton: {\n                    text: 'Configuración',\n                    show: false,\n                },\n                rejectAllButton: {\n                    text: 'Configuración',\n                    show: false,\n                }\n            },\n            cookieCategories: [],\n        }\n    }\n\n\n\n}\n\nexport interface Options {\n    cookieCategories: Array<CookieCategory>,\n    initOnDomContentLoaded: boolean,\n    bannerOptions: BannerOptions,\n    modalOptions: ModalOptions,\n    askOnce: boolean,\n    askOnChange: boolean,\n    delay: number,\n}\n\nexport interface CookieCategory {\n    title: string,\n    description: string,\n    required: boolean,\n    checked: boolean,\n    scripts: [\n        {\n            type: ScriptType,\n            gtmCode: string,\n            scriptSrc: string,\n            async: boolean,\n        }\n    ]\n}\n\nexport enum ScriptType {\n    GTM,\n    STANDARD\n}","import { Modal } from \"./Modal\";\nimport { Utils } from './utils';\nimport { CookiesManager } from './CookiesManager';\n\nexport class Banner {\n    private options: BannerOptions;\n    private banner: string;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: BannerOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().bannerOptions.inject) {\n            this.injectBanner();\n        }\n        this.setEventListeners();\n    }\n\n    public setEventListeners() {\n        try {\n            let self = this;\n            // Accept all button\n            document.querySelector(\".cm-banner-accept-all-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Config button\n            document.querySelector(\".cm-banner-config-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.showModal();\n            });\n        } catch (error) {\n            console.error(\"Can't set the event listener for the cookies banner. Can't find the HTML elements.\")\n        }\n\n    }\n\n\n\n\n    private generateBanner() {\n        return `\n                <div class=\"c-cookies-config-banner\">\n                    <div class=\"banner-container\">\n                        ${this.getBannerText()}\n                        <div class=\"banner-container__buttons\">\n                            ${this.getAcceptAllButton()}\n                            ${this.getSettingsButton()}\n                        </div>\n                    </div>\n                </div> \n                `;\n    }\n\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"banner-container__button banner-container__accept-all-btn cm-banner-accept-all-btn\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSettingsButton() {\n        return this.options.settingsButton.show ? `<button class=\"banner-container__button-link banner-container__config-btn cm-banner-config-btn\">${this.options.settingsButton.text}</button>` : \"\";\n    }\n\n    private getBannerText() {\n        return Utils.wrapString(this.options.bannerText, \"p\");\n    }\n\n    public injectBanner() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateWall());\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateBanner());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the banner.\");\n        }\n    }\n\n    private generateWall() {\n        const blur = this.options.wallBlur ? \"c-cookies-config-wall--blurred\" : \"\";\n        return `<div class=\"c-cookies-config-wall ${blur}\"></div>`;\n    }\n\n    public showWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.add(\"wall-show\");\n        } catch (error) {\n            console.error(\"Couldn't apply the background wall.\")\n        }\n    }\n\n    public hideWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.remove(\"wall-show\");\n        } catch (error) {\n            console.error(\"Unable to hide the background wall.\")\n        }\n    }\n\n    public hideScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"hidden\";\n        } catch (error) {\n            console.error(\"Unable to hide the scroll.\")\n        }\n    }\n\n    public showScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"auto\";\n        } catch (error) {\n            console.error(\"Unable to show the scroll.\")\n        }\n    }\n\n    public show() {\n        if (this.options.wall) {\n            this.showWall();\n        }\n        if (!this.options.wallScroll) {\n            this.hideScroll();\n        }\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner .banner-container\")!.classList.add(\"show-banner\");\n        } catch (error) {\n            console.error(\"Unable to show the banner.\")\n        }\n    }\n    public hide() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style.display = \"none\";\n        } catch (error) {\n            console.error(\"Unable to hide the banner.\")\n        }\n        this.hideWall();\n        this.showScroll();\n    }\n\n}\n\n\n\n\nexport interface BannerOptions {\n    bannerText: string;\n    wall: boolean,\n    wallScroll: boolean,\n    wallBlur: boolean,\n    inject: boolean,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    settingsButton: {\n        text: string,\n        show: boolean,\n    },\n    acceptRequiredOnlyButton: {\n        text: string,\n        show: boolean,\n    },\n    rejectAllButton: {\n        text: string,\n        show: boolean,\n    },\n}\n","import { CookiesManager } from './CookiesManager';\nexport class Modal {\n\n    private options: ModalOptions;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: ModalOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().modalOptions.inject) {\n            this.injectModal();\n        }\n        this.setEventListeners();\n    }\n\n\n    async show() {\n        try {\n            const modal = document.querySelector(\".c-cookies-config-modal\");\n            modal!.classList.add(this.options.showModalClass);\n            await new Promise(r => setTimeout(r, 10)); // This is to make the show animation work\n            const modalContainer = document.getElementById(\"modal-container\");\n            modalContainer!.classList.add(this.options.showModalClass);\n            // Hide body scroll\n            document.querySelector(\"body\")!.style.overflow = \"hidden\";\n        } catch (error) {\n            console.error(\"Could not show cookie modal.\")\n            console.error(error)\n        }\n    }\n    hide(self?: Modal) { // Destucted object, so we can access this context\n        const modalContainer = document.getElementById('modal-container')\n        modalContainer!.classList.remove(this.options.showModalClass)\n\n    }\n\n    setEventListeners() {\n\n        try {\n            var self = this;\n            // Modal close button\n            const closeBtn = document.querySelectorAll('.close-modal')\n            closeBtn.forEach(c => c.addEventListener('click', ()=>{\n                this.hide(self);\n            }))\n\n            // Accept all button\n            const acceptAllBtn = document.querySelector('.cm-modal-accept-all')!;\n            acceptAllBtn.addEventListener('click', function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Save button\n            const saveButton = document.querySelector('.cm-modal-save')!;\n            saveButton.addEventListener('click', function () {\n                self.cookiesManager.injectScripts();\n                self.cookiesManager.hideBanner();\n                self.cookiesManager.saveButton();\n            });\n\n            // Switches\n            this.cookiesManager.getOptions().cookieCategories.forEach((category, index) => {\n                var checkbox = document.querySelector(`.cm-switch-${index}`)!;\n                checkbox.addEventListener('change', function () {\n                    if (this.checked) {\n                        category.checked = true;\n                    } else {\n                        category.checked = false;\n                    }\n                });\n            });\n        } catch (error) {\n            console.error(\"Could not set event listeners for cookie modal.\")\n        }\n    }\n\n    public injectModal() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateModal());\n            }\n        } catch (error) {\n            console.error(\"Could not inject cookie modal.\")\n        }\n    }\n\n    private generateCategoriesBlocks() {\n        let categoriesBlocks = \"\";\n        this.cookiesManager.getOptions().cookieCategories.forEach((element, index) => {\n            const disabled = element.required ? \"disabled\" : \"\";\n            const checked = element.required ? \"checked\" : \"\";\n            const block = `\n            <div class=\"cookie-category\">\n                <div class=\"cookie-category__header cc-header\">\n                    <h2 class=\"header__title\">\n                        ${element.title}\n                    </h2>\n                    <div class=\"header__switch\">\n                    <label class=\"switch ${disabled}\">\n                        <input ${disabled} checked class=\"cm-switch-${index}\" type=\"checkbox\">\n                        <span class=\"slider round ${disabled}\"></span>\n                    </label>\n                    </div>\n                </div>\n            <div class=\"cookie-category__body body\">\n                <p>${element.description}</p>\n            </div>\n            </div>\n            `;\n            categoriesBlocks += block;\n        });\n        return categoriesBlocks;\n\n    }\n\n    getCloseButton() {\n        return this.options.closeButton.show ? `<div class=\"modal__close close-modal\" title=\"Close\"><div class=\"close-modal-img\"></div></div>` : \"\";\n    }\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"modal__button modal__button-width cm-modal-accept-all modal__button-accept-all\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSaveButton() {\n        return this.options.saveButton.show ? ` <button class=\"modal__button-link close-modal cm-modal-save modal__button-save-btn\"> ${this.options.saveButton.text} </button>` : \"\";\n    }\n\n    generateModal() {\n        return `\n        <div class=\"c-cookies-config-modal\">\n        <div class=\"modal__container\" id=\"modal-container\">\n          <div class=\"modal__content\">\n            ${this.getCloseButton()}\n            <h1 class=\"modal__title\">${this.options.title}</h1>\n            <p class=\"modal__description\">${this.options.description}</p>\n            <div class=\"modal__cookie-categories\">\n                ${this.generateCategoriesBlocks()}\n            </div>\n    \n            <div class=\"modal__footer\">\n             ${this.getAcceptAllButton()}\n             ${this.getSaveButton()}\n            </div>\n          </div>\n        </div>\n      </div>\n        `;\n    }\n\n}\n\nexport interface ModalOptions {\n    inject: boolean,\n    title: string,\n    description: string,\n    showModalClass: string,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    saveButton: {\n        text: string,\n        show: boolean,\n    },\n    closeButton: {\n        text: string,\n        show: boolean,\n    },\n}"],"names":["Utils","ScriptType","encode","str","window","btoa","decode","a","atob","isHTML","RegExp","prototype","test","bind","match","wrapString","tag","this","deepEqual","x","y","_this","ok","Object","keys","tx","length","every","key","compareObjects","b","s","o","entries","sort","map","i","JSON","stringify","objectEquals","obj1","obj2","JSONstringifyOrder","obj","value","prepareObjectsForComparison","A","parse","B","forEach","element","checked","mergeRecursively","p","constructor","e","Banner","cookiesManager","options","banner","getOptions","bannerOptions","inject","injectBanner","setEventListeners","_proto","self","document","querySelector","addEventListener","acceptAllButton","showModal","error","console","generateBanner","getBannerText","getAcceptAllButton","getSettingsButton","show","text","settingsButton","bannerText","insertAdjacentHTML","generateWall","wallBlur","showWall","classList","add","hideWall","remove","hideScroll","style","overflow","showScroll","wall","wallScroll","hide","display","Modal","modalOptions","injectModal","_this2","_temp2","showModalClass","Promise","r","setTimeout","then","getElementById","_catch","resolve","querySelectorAll","c","_this3","injectScripts","hideBanner","saveButton","cookieCategories","category","index","generateModal","generateCategoriesBlocks","categoriesBlocks","disabled","required","title","description","getCloseButton","closeButton","getSaveButton","CookiesManager","modal","acceptAll","configChanged","onCookieCategoryChange","Error","getDefaultOptions","constructorInitializationFunction","getBanner","setBanner","getModal","setModal","on","listener","callback","localStorage","getItem","optionsComparison","getCookiesOptions","createModal","createBanner","saveCookieOptions","showBanner","hideModal","injectScript","src","async","createElement","setAttribute","body","appendChild","injectGTM","gtmCode","w","d","l","push","getTime","event","f","getElementsByTagName","j","parentNode","insertBefore","dataLayer","init","_temp5","askOnce","initShow","_temp4","_temp9","_this4","log","_temp10","delay","reject","_this5","scripts","script","type","STANDARD","scriptSrc","base64Options","setItem","askOnChange","initOnDomContentLoaded","acceptRequiredOnlyButton","rejectAllButton"],"mappings":"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"}