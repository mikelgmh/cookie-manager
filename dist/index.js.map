{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/CookiesManager.ts","../src/Banner.ts","../src/Modal.ts"],"sourcesContent":["\nexport class Utils {\n    public static encode(str) {\n        return window.btoa(str);\n    }\n    public static decode(a) {\n        return window.atob(a);\n    }\n    private static isHTML(str: string) {\n        var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n\n        // test isHTML regex\n        return str.match(isHTML);\n\n    }\n    public static wrapString(str: string, tag: string) {\n        if (this.isHTML(str)) {\n            return str;\n        }\n        return `<${tag}>${str}</${tag}>`;\n    }\n\n    public static deepEqual(x, y) {\n        const ok = Object.keys, tx = typeof x, ty = typeof y;\n        return x && y && tx === 'object' && tx === ty ? (\n            ok(x).length === ok(y).length &&\n            ok(x).every(key => this.deepEqual(x[key], y[key]))\n        ) : (x === y);\n    }\n\n    public static compareObjects(a, b) {\n        let s = (o) => Object.entries(o).sort().map(i => {\n            if (i[1] instanceof Object) i[1] = s(i[1]);\n            return i\n        })\n        return JSON.stringify(s(a)) === JSON.stringify(s(b))\n    }\n\n    public static objectEquals(obj1, obj2) {\n        const JSONstringifyOrder = obj => {\n            const keys = {};\n            JSON.stringify(obj, (key, value) => {\n                keys[key] = null;\n                return value;\n            });\n            return JSON.stringify(obj, Object.keys(keys).sort());\n        };\n        return JSONstringifyOrder(obj1) === JSONstringifyOrder(obj2);\n    }\n\n    public static prepareObjectsForComparison(obj1, obj2) {\n        var A = JSON.parse(JSON.stringify(obj1));\n        var B = JSON.parse(JSON.stringify(obj2));\n\n\n        A.forEach(element => {\n            element.checked = true;\n        });\n        B.forEach(element => {\n            element.checked = true;\n        });\n        return { A, B }\n    }\n\n    public static mergeRecursively(obj1, obj2) {\n        for (var p in obj2) {\n            try {\n                // Property in destination object set; update its value.\n                if (obj2[p].constructor == Object) {\n                    obj1[p] = this.mergeRecursively(obj1[p], obj2[p]);\n                } else {\n                    obj1[p] = obj2[p];\n                }\n            } catch (e) {\n                // Property in destination object not set; create it and set its value.\n                obj1[p] = obj2[p];\n            }\n        }\n        return obj1;\n    }\n}","\nimport { Banner, BannerOptions } from \"./Banner\";\nimport { ModalOptions, Modal } from './Modal';\nimport \"./scss/styles.scss\";\nimport { Utils } from './utils';\n\ninterface cookieCatergoryCallbackInterface {\n    (CookieCategory: CookieCategory): void;\n}\nexport class CookiesManager {\n\n    // var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n    private modalOptions: Options;\n    private banner: Banner;\n    private modal: Modal;\n    private acceptAll: boolean = false;\n    private configChanged: boolean = false;\n    private onCookieCategoryChange: cookieCatergoryCallbackInterface;\n\n\n    public getBanner(): Banner {\n        return this.banner;\n    }\n\n    public setBanner(banner: Banner): void {\n        this.banner = banner;\n    }\n\n    public getModal(): Modal {\n        return this.modal;\n    }\n\n    public setModal(modal: Modal): void {\n        this.modal = modal;\n    }\n\n    public getOptions(): Options {\n        return this.modalOptions;\n    }\n\n    public on(listener, callback: cookieCatergoryCallbackInterface) {\n        if (listener == \"onCookieCategoryChange\") {\n            this.onCookieCategoryChange = callback;\n        }\n    }\n\n    constructor(options: Options) {\n        if (options == null) {\n            throw new Error(\"Options for CookiesManager cannot be null.\");\n        } else {\n            if (options.cookieCategories == null) {\n                throw new Error(\"You should provide at least one cookie category\");\n            }\n            // Set all cookie categories as checked by default\n            options.cookieCategories.forEach(category => {\n                category.checked = true;\n            });\n\n            // Merge the default options with user options\n            options = Utils.mergeRecursively(this.getDefaultOptions(), options);\n            this.modalOptions = options;\n            this.constructorInitializationFunction(options);\n        }\n    }\n\n    private constructorInitializationFunction(options) {\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) { // If there's already configuration saved\n            // Prepare the options to compare them.\n            var optionsComparison = Utils.prepareObjectsForComparison(this.modalOptions.cookieCategories, this.getCookiesOptions());\n\n            // Check if the options in localStorage and the options from the constructor are the same\n            if (Utils.objectEquals(optionsComparison.A, optionsComparison.B)) {\n                // If the options are the same, just inject the scripts\n                this.modalOptions.cookieCategories = this.getCookiesOptions();\n\n            } else {\n                localStorage.removeItem(\"cookiesManagerOptions\");\n                // If the options are different, set the configChanged to true\n                // We are in the constructor. By setting this to true, it might show the banner and modal if the user has set askOnChange to true\n                this.configChanged = true;\n            }\n        }\n\n        // Generate modal\n        if (options.modalOptions != null) {\n\n            this.createModal(options.modalOptions);\n\n        }\n\n        if (options.bannerOptions != null) {\n            this.createBanner(options.bannerOptions);\n\n        }\n    }\n\n    public setEventListeners() {\n        this.modal.setEventListeners();\n        this.banner.setEventListeners();\n\n    }\n\n    public createBanner(options: BannerOptions) {\n        this.banner = new Banner(this, options);\n        return this.banner;\n    }\n    public createModal(options: ModalOptions) {\n        this.modal = new Modal(this, options);\n        return this.modal;\n    }\n\n    public acceptAllButton() {\n        this.getOptions().cookieCategories.forEach((cookieCategory: CookieCategory) => {\n            cookieCategory.checked = true;\n        })\n        this.acceptAll = true;\n        this.modal.hide();\n        this.banner.hide();\n        this.injectScripts();\n        this.saveCookieOptions();\n    }\n\n    public showModal() {\n        this.modal.show();\n    }\n\n    public showBanner() {\n        this.banner.show();\n    }\n\n    public hideBanner() {\n        this.banner.hide();\n    }\n\n    public hideModal() {\n        this.modal.hide();\n    }\n\n    private injectScript(src: string, async = false) {\n        var s = document.createElement('script');\n        s.setAttribute('src', src);\n        s.async = async;\n        document.body.appendChild(s);\n    }\n\n    private injectGTM(gtmCode: string) {\n        try {\n            (function (w, d, s, l, i) {\n                w[l] = w[l] || [];\n                w[l].push({\n                    'gtm.start': new Date().getTime(),\n                    event: 'gtm.js',\n                });\n                const f = d.getElementsByTagName(s)[0];\n                const j = d.createElement(s) as HTMLInputElement;\n                const\n                    dl = l != 'dataLayer' ? `&l=${l}` : '';\n                //j.async = true;\n                j.src = `https://www.googletagmanager.com/gtm.js?id=${i}${dl}`;\n                f.parentNode!.insertBefore(j, f);\n            }(window, document, 'script', 'dataLayer', gtmCode));\n            (window as any).dataLayer = (window as any).dataLayer || [];\n        } catch (error) {\n            console.error(\"Couldn't inject GTM.\")\n        }\n    }\n\n    public async init(banner: boolean, modal: boolean) {\n        if (this.modalOptions.askOnce) {\n            if (localStorage.getItem(\"cookiesManagerOptions\") == null || this.configChanged) {\n                await this.initShow(banner, modal)\n            } // There's no else, as if cookiesManagerOptions was not null, the constructor would do the job.\n        } else {\n            await this.initShow(banner, modal)\n        }\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            this.injectScripts();\n        }\n    }\n\n    public async initShow(banner: boolean, modal: boolean) {\n        if (this.modalOptions.delay > 0) {\n            await new Promise(r => setTimeout(r, this.modalOptions.delay)); // This is to make the show animation work\n        }\n        if (banner) {\n            this.showBanner();\n        }\n        if (modal) {\n            this.showModal();\n        }\n    }\n\n    public injectScripts() {\n        try {\n\n            this.modalOptions.cookieCategories.forEach(category => {\n                if (this.onCookieCategoryChange != null) {\n                    this.onCookieCategoryChange(category);\n                }\n                if (category.checked || this.acceptAll) {\n                    category.scripts.forEach(script => {\n                        if (script.type == ScriptType.STANDARD || script.type == null) {\n                            if (script.scriptSrc != null) {\n                                this.injectScript(script.scriptSrc, script.async)\n                            }\n                        } else {\n                            if (script.gtmCode != null) {\n                                this.injectGTM(script.gtmCode);\n                            } else {\n                                throw new Error(\"You should provide a gtmCode for the script\");\n                            }\n                        }\n                    });\n                }\n            });\n        } catch (error) {\n            console.error(`Couldn't inject scripts: ${error}`)\n        }\n    }\n\n    saveButton() {\n        this.saveCookieOptions();\n    }\n\n    saveCookieOptions() {\n        const base64Options = Utils.encode(JSON.stringify(this.modalOptions.cookieCategories));\n        localStorage.setItem(\"cookiesManagerOptions\", base64Options);\n    }\n\n    getCookiesOptions(): any {\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            return JSON.parse(Utils.decode(localStorage.getItem(\"cookiesManagerOptions\")));\n        }\n        return {};\n    }\n\n    private getDefaultOptions(): Options {\n        return {\n            askOnce: true,\n            delay: 0,\n            askOnChange: true,\n            initOnDomContentLoaded: true,\n            modalOptions: {\n                title: \"Cookie settings\",\n                description: \"Change the settings for the cookies here.\",\n                inject: true,\n                showModalClass: \"show-modal\",\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                saveButton: {\n                    text: 'Save',\n                    show: true,\n                },\n                closeButton: {\n                    text: 'Close',\n                    show: true,\n                },\n            },\n            bannerOptions: {\n                inject: true,\n                injectWall: true,\n                wall: true,\n                wallScroll: false,\n                wallBlur: true,\n                bannerText: 'This website uses cookies to ensure you get the best experience on our website.',\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                settingsButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n                acceptRequiredOnlyButton: {\n                    text: 'Configuración',\n                    show: false,\n                },\n                rejectAllButton: {\n                    text: 'Configuración',\n                    show: false,\n                }\n            },\n            cookieCategories: [],\n        }\n    }\n\n\n\n}\n\nexport interface Options {\n    cookieCategories: Array<CookieCategory>,\n    initOnDomContentLoaded: boolean,\n    bannerOptions: BannerOptions,\n    modalOptions: ModalOptions,\n    askOnce: boolean,\n    askOnChange: boolean,\n    delay: number,\n}\n\nexport interface CookieCategory {\n    title: string,\n    description: string,\n    required: boolean,\n    checked: boolean,\n    scripts: [\n        {\n            type: ScriptType,\n            gtmCode: string,\n            scriptSrc: string,\n            async: boolean,\n        }\n    ]\n}\n\nexport enum ScriptType {\n    GTM,\n    STANDARD\n}","import { Modal } from \"./Modal\";\nimport { Utils } from './utils';\nimport { CookiesManager } from './CookiesManager';\n\nexport class Banner {\n    private options: BannerOptions;\n    private banner: string;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: BannerOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().bannerOptions.inject) {\n            this.injectBanner();\n        }\n        if (cookiesManager.getOptions().bannerOptions.injectWall){\n            this.injectWall();\n        }\n        this.setEventListeners();\n    }\n\n    public setEventListeners() {\n        try {\n            let self = this;\n            // Accept all button\n            document.querySelector(\".cm-banner-accept-all-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Config button\n            document.querySelector(\".cm-banner-config-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.showModal();\n            });\n        } catch (error) {\n            console.error(\"Can't set the event listener for the cookies banner. Can't find the HTML elements.\")\n        }\n\n    }\n\n\n\n\n    private generateBanner() {\n        return `\n                <div class=\"c-cookies-config-banner\">\n                    <div class=\"banner-container\">\n                        ${this.getBannerText()}\n                        <div class=\"banner-container__buttons\">\n                            ${this.getAcceptAllButton()}\n                            ${this.getSettingsButton()}\n                        </div>\n                    </div>\n                </div> \n                `;\n    }\n\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"banner-container__button banner-container__accept-all-btn cm-banner-accept-all-btn\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSettingsButton() {\n        return this.options.settingsButton.show ? `<button class=\"banner-container__button-link banner-container__config-btn cm-banner-config-btn\">${this.options.settingsButton.text}</button>` : \"\";\n    }\n\n    private getBannerText() {\n        return Utils.wrapString(this.options.bannerText, \"p\");\n    }\n\n    private injectWall(){\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateWall());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the wall.\");\n        }\n    }\n\n    public injectBanner() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateBanner());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the banner.\");\n        }\n    }\n\n    private generateWall() {\n        const blur = this.options.wallBlur ? \"c-cookies-config-wall--blurred\" : \"\";\n        return `<div class=\"c-cookies-config-wall ${blur}\"></div>`;\n    }\n\n    public showWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.add(\"wall-show\");\n        } catch (error) {\n            console.error(\"Couldn't apply the background wall.\")\n        }\n    }\n\n    public hideWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.remove(\"wall-show\");\n        } catch (error) {\n            console.error(\"Unable to hide the background wall.\")\n        }\n    }\n\n    public hideScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"hidden\";\n        } catch (error) {\n            console.error(\"Unable to hide the scroll.\")\n        }\n    }\n\n    public showScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"auto\";\n        } catch (error) {\n            console.error(\"Unable to show the scroll.\")\n        }\n    }\n\n    public show() {\n        if (this.options.wall) {\n            this.showWall();\n        }\n        if (!this.options.wallScroll) {\n            this.hideScroll();\n        }\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner .banner-container\")!.classList.add(\"show-banner\");\n        } catch (error) {\n            console.error(\"Unable to show the banner.\")\n        }\n    }\n    public hide() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style.display = \"none\";\n        } catch (error) {\n            console.error(\"Unable to hide the banner.\")\n        }\n        this.hideWall();\n        this.showScroll();\n    }\n\n}\n\n\n\n\nexport interface BannerOptions {\n    bannerText: string;\n    wall: boolean,\n    injectWall: boolean,\n    wallScroll: boolean,\n    wallBlur: boolean,\n    inject: boolean,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    settingsButton: {\n        text: string,\n        show: boolean,\n    },\n    acceptRequiredOnlyButton: {\n        text: string,\n        show: boolean,\n    },\n    rejectAllButton: {\n        text: string,\n        show: boolean,\n    },\n}\n","import { CookieCategory, CookiesManager } from './CookiesManager';\nexport class Modal {\n\n    private options: ModalOptions;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: ModalOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().modalOptions.inject) {\n            this.injectModal();\n        }\n        this.setEventListeners();\n    }\n\n\n    async show() {\n        try {\n            // Check if there's already any option saved\n            // if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            //     //const options: CookieCategory = this.cookiesManager.getCookiesOptions();\n            //     alert(\"W\")\n            // }\n\n            const modal = document.querySelector(\".c-cookies-config-modal\");\n            modal!.classList.add(this.options.showModalClass);\n            await new Promise(r => setTimeout(r, 10)); // This is to make the show animation work\n            const modalContainer = document.getElementById(\"modal-container\");\n            modalContainer!.classList.add(this.options.showModalClass);\n            // Hide body scroll\n            document.querySelector(\"body\")!.style.overflow = \"hidden\";\n        } catch (error) {\n            console.error(\"Could not show cookie modal.\")\n            console.error(error)\n        }\n    }\n    hide(self?: Modal) { // Destucted object, so we can access this context\n        const modalContainer = document.getElementById('modal-container')\n        modalContainer!.classList.remove(this.options.showModalClass)\n\n    }\n\n    setEventListeners() {\n\n        try {\n            var self = this;\n            // Modal close button\n            const closeBtn = document.querySelectorAll('.close-modal')\n            closeBtn.forEach(c => c.addEventListener('click', () => {\n                this.hide(self);\n            }))\n\n            // Accept all button\n            const acceptAllBtn = document.querySelector('.cm-modal-accept-all')!;\n            acceptAllBtn.addEventListener('click', function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Save button\n            const saveButton = document.querySelector('.cm-modal-save')!;\n            saveButton.addEventListener('click', function () {\n                self.cookiesManager.injectScripts();\n                self.cookiesManager.hideBanner();\n                self.cookiesManager.saveButton();\n            });\n\n            // Switches\n            this.cookiesManager.getOptions().cookieCategories.forEach((category, index) => {\n                var checkbox = document.querySelector(`.cm-switch-${index}`)!;\n                checkbox.addEventListener('change', function () {\n                    if (this.checked) {\n                        category.checked = true;\n                    } else {\n                        category.checked = false;\n                    }\n                });\n            });\n        } catch (error) {\n            console.error(\"Could not set event listeners for cookie modal.\")\n        }\n    }\n\n    public injectModal() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateModal());\n            }\n        } catch (error) {\n            console.error(\"Could not inject cookie modal.\")\n        }\n    }\n\n    private generateCategoriesBlocks() {\n        let categoriesBlocks = \"\";\n        let cookieCategories = this.cookiesManager.getOptions().cookieCategories;\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            cookieCategories = this.cookiesManager.getCookiesOptions();\n        }\n        cookieCategories.forEach((element, index) => {\n            const disabled = element.required ? \"disabled\" : \"\";\n            const checked = element.checked ? \"checked\" : \"\";\n            const block = `\n            <div class=\"cookie-category\">\n                <div class=\"cookie-category__header cc-header\">\n                    <h2 class=\"header__title\">\n                        ${element.title}\n                    </h2>\n                    <div class=\"header__switch\">\n                    <label class=\"switch ${disabled}\">\n                        <input ${disabled} ${checked} class=\"cm-switch-${index}\" type=\"checkbox\">\n                        <span class=\"slider round ${disabled}\"></span>\n                    </label>\n                    </div>\n                </div>\n            <div class=\"cookie-category__body body\">\n                <p>${element.description}</p>\n            </div>\n            </div>\n            `;\n            categoriesBlocks += block;\n        });\n        return categoriesBlocks;\n\n    }\n\n    getCloseButton() {\n        return this.options.closeButton.show ? `<div class=\"modal__close close-modal\" title=\"Close\"><div class=\"close-modal-img\"></div></div>` : \"\";\n    }\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"modal__button modal__button-width cm-modal-accept-all modal__button-accept-all\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSaveButton() {\n        return this.options.saveButton.show ? ` <button class=\"modal__button-link close-modal cm-modal-save modal__button-save-btn\"> ${this.options.saveButton.text} </button>` : \"\";\n    }\n\n    generateModal() {\n        return `\n        <div class=\"c-cookies-config-modal\">\n        <div class=\"modal__container\" id=\"modal-container\">\n          <div class=\"modal__content\">\n            ${this.getCloseButton()}\n            <h1 class=\"modal__title\">${this.options.title}</h1>\n            <p class=\"modal__description\">${this.options.description}</p>\n            <div class=\"modal__cookie-categories\">\n                ${this.generateCategoriesBlocks()}\n            </div>\n    \n            <div class=\"modal__footer\">\n             ${this.getAcceptAllButton()}\n             ${this.getSaveButton()}\n            </div>\n          </div>\n        </div>\n      </div>\n        `;\n    }\n\n}\n\nexport interface ModalOptions {\n    inject: boolean,\n    title: string,\n    description: string,\n    showModalClass: string,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    saveButton: {\n        text: string,\n        show: boolean,\n    },\n    closeButton: {\n        text: string,\n        show: boolean,\n    },\n}"],"names":["Utils","ScriptType","encode","str","window","btoa","decode","a","atob","isHTML","RegExp","prototype","test","bind","match","wrapString","tag","this","deepEqual","x","y","_this","ok","Object","keys","tx","length","every","key","compareObjects","b","s","o","entries","sort","map","i","JSON","stringify","objectEquals","obj1","obj2","JSONstringifyOrder","obj","value","prepareObjectsForComparison","A","parse","B","forEach","element","checked","mergeRecursively","p","constructor","e","Banner","cookiesManager","options","banner","getOptions","bannerOptions","inject","injectBanner","injectWall","setEventListeners","document","querySelector","addEventListener","self","acceptAllButton","showModal","error","console","_proto","generateBanner","getBannerText","getAcceptAllButton","getSettingsButton","show","text","settingsButton","bannerText","insertAdjacentHTML","generateWall","wallBlur","showWall","classList","add","hideWall","remove","hideScroll","style","overflow","showScroll","wall","wallScroll","hide","display","Modal","modalOptions","injectModal","_this2","_temp2","showModalClass","Promise","resolve","r","setTimeout","getElementById","_catch","then","_this3","querySelectorAll","c","injectScripts","hideBanner","saveButton","cookieCategories","category","index","generateModal","generateCategoriesBlocks","categoriesBlocks","localStorage","getItem","getCookiesOptions","disabled","required","title","description","getCloseButton","closeButton","getSaveButton","CookiesManager","modal","acceptAll","configChanged","onCookieCategoryChange","Error","getDefaultOptions","constructorInitializationFunction","getBanner","setBanner","getModal","setModal","on","listener","callback","optionsComparison","removeItem","createModal","createBanner","cookieCategory","saveCookieOptions","showBanner","hideModal","injectScript","src","async","createElement","setAttribute","body","appendChild","injectGTM","gtmCode","w","d","l","push","Date","getTime","event","f","getElementsByTagName","j","parentNode","insertBefore","dataLayer","init","_temp4","_temp5","askOnce","initShow","_temp6","_temp9","_this4","_temp10","delay","reject","_this5","scripts","script","type","STANDARD","scriptSrc","base64Options","setItem","askOnChange","initOnDomContentLoaded","acceptRequiredOnlyButton","rejectAllButton"],"mappings":"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"}