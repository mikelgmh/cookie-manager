{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/CookiesManager.ts","../src/Banner.ts","../src/Modal.ts"],"sourcesContent":["\nexport class Utils {\n    public static encode(str) {\n        return window.btoa(str);\n    }\n    public static decode(a) {\n        return window.atob(a);\n    }\n    private static isHTML(str: string) {\n        var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n\n        // test isHTML regex\n        return str.match(isHTML);\n\n    }\n    public static wrapString(str: string, tag: string) {\n        if (this.isHTML(str)) {\n            return str;\n        }\n        return `<${tag}>${str}</${tag}>`;\n    }\n\n    public static deepEqual(x, y) {\n        const ok = Object.keys, tx = typeof x, ty = typeof y;\n        return x && y && tx === 'object' && tx === ty ? (\n            ok(x).length === ok(y).length &&\n            ok(x).every(key => this.deepEqual(x[key], y[key]))\n        ) : (x === y);\n    }\n\n    public static compareObjects(a, b) {\n        let s = (o) => Object.entries(o).sort().map(i => {\n            if (i[1] instanceof Object) i[1] = s(i[1]);\n            return i\n        })\n        return JSON.stringify(s(a)) === JSON.stringify(s(b))\n    }\n\n    public static objectEquals(obj1, obj2) {\n        const JSONstringifyOrder = obj => {\n            const keys = {};\n            JSON.stringify(obj, (key, value) => {\n                keys[key] = null;\n                return value;\n            });\n            return JSON.stringify(obj, Object.keys(keys).sort());\n        };\n        return JSONstringifyOrder(obj1) === JSONstringifyOrder(obj2);\n    }\n\n    public static prepareObjectsForComparison(obj1, obj2) {\n        var A = JSON.parse(JSON.stringify(obj1));\n        var B = JSON.parse(JSON.stringify(obj2));\n\n\n        A.forEach(element => {\n            element.checked = true;\n        });\n        B.forEach(element => {\n            element.checked = true;\n        });\n        return { A, B }\n    }\n\n    public static mergeRecursively(obj1, obj2) {\n        for (var p in obj2) {\n            try {\n                // Property in destination object set; update its value.\n                if (obj2[p].constructor == Object) {\n                    obj1[p] = this.mergeRecursively(obj1[p], obj2[p]);\n                } else {\n                    obj1[p] = obj2[p];\n                }\n            } catch (e) {\n                // Property in destination object not set; create it and set its value.\n                obj1[p] = obj2[p];\n            }\n        }\n        return obj1;\n    }\n}","\nimport { Banner, BannerOptions } from \"./Banner\";\nimport { ModalOptions, Modal } from './Modal';\nimport \"./scss/styles.scss\";\nimport { Utils } from './utils';\nexport class CookiesManager {\n\n    // var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n    private modalOptions: Options;\n    private banner: Banner;\n    private modal: Modal;\n    private acceptAll: boolean = false;\n    private configChanged: boolean = false;\n\n\n    public getBanner(): Banner {\n        return this.banner;\n    }\n\n    public setBanner(banner: Banner): void {\n        this.banner = banner;\n    }\n\n    public getModal(): Modal {\n        return this.modal;\n    }\n\n    public setModal(modal: Modal): void {\n        this.modal = modal;\n    }\n\n    public getOptions(): Options {\n        return this.modalOptions;\n    }\n\n    constructor(options: Options) {\n        if (options == null) {\n            throw new Error(\"Options cannot be null\");\n        } else {\n            options.cookieCategories.forEach(category => {\n                category.checked = true;\n            });\n            // Merge the default options with user options\n            options = Utils.mergeRecursively(this.getDefaults(), options);\n            this.modalOptions = options;\n            // Check options to create banner and modal\n\n            if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n                // Prepare the options to compare them.\n                var optionsComparison = Utils.prepareObjectsForComparison(this.modalOptions.cookieCategories, this.getCookiesOptions());\n\n                // Check if the options in localStorage and the options from the constructor are the same\n                if (Utils.objectEquals(optionsComparison.A, optionsComparison.B)) {\n                    // If the options are the same, just inject the scripts\n                    this.modalOptions.cookieCategories = this.getCookiesOptions();\n                    this.injectScripts();\n                } else {\n                    // If the options are different, set the configChanged to true\n                    // We are in the constructor. By setting this to true, it might show the banner and modal if the user has set askOnChange to true\n                    this.configChanged = true;\n                }\n            }\n\n            // Generate modal\n            if (options.modalOptions != null) {\n                this.createModal(options.modalOptions);\n            }\n\n\n            if (options.bannerOptions != null) {\n                this.createBanner(options.bannerOptions);\n            }\n\n        }\n\n    }\n\n\n    public createBanner(options: BannerOptions) {\n        this.banner = new Banner(this, options);\n        return this.banner;\n    }\n    public createModal(options: ModalOptions) {\n        this.modal = new Modal(this, options);\n        return this.modal;\n    }\n\n    public acceptAllButton() {\n        this.acceptAll = true;\n        this.modal.hide();\n        this.banner.hide();\n        this.injectScripts();\n        //this.setCookie();\n        this.saveCookieOptions();\n    }\n\n    public showModal() {\n        this.modal.show();\n    }\n\n    public showBanner() {\n        this.banner.show();\n    }\n\n    public hideBanner() {\n        this.banner.hide();\n    }\n\n    public hideModal() {\n        this.modal.hide();\n    }\n\n    private injectScript(src: string, async) {\n        var s = document.createElement('script');\n        s.setAttribute('src', src);\n        s.async = async;\n        document.body.appendChild(s);\n    }\n\n    private injectGTM(gtmCode: string) {\n        try {\n            (function (w, d, s, l, i) {\n                w[l] = w[l] || [];\n                w[l].push({\n                    'gtm.start': new Date().getTime(),\n                    event: 'gtm.js',\n                });\n                const f = d.getElementsByTagName(s)[0];\n                const j = d.createElement(s) as HTMLInputElement;\n                const\n                    dl = l != 'dataLayer' ? `&l=${l}` : '';\n                //j.async = true;\n                j.src = `https://www.googletagmanager.com/gtm.js?id=${i}${dl}`;\n                f.parentNode!.insertBefore(j, f);\n            }(window, document, 'script', 'dataLayer', gtmCode));\n            (window as any).dataLayer = (window as any).dataLayer || [];\n        } catch (error) {\n            console.log(\"There was an error loading GTM.\")\n        }\n    }\n\n    public init(banner: boolean, modal: boolean) {\n        if (this.modalOptions.askOnce) {\n            // TODO ver casuística si askOnChange es false, configChanged es true, se inyectan los scripts? No se intectan si no se muestran los banners Debería haber un else?\n            if (localStorage.getItem(\"cookiesManagerOptions\") == null || (this.modalOptions.askOnChange && this.configChanged)) {\n                var bannerShown = false;\n                var modalShown = false;\n                if (banner) {\n                    this.showBanner();\n                    bannerShown = true;\n                }\n                if (modal) {\n                    this.showModal();\n                    modalShown = true;\n                }\n                // if(!bannerShown && !modalShown && this.configChanged == true && !this.modalOptions.askOnChange){\n                //     this.injectScripts();\n                // }\n            }\n        } else {\n            if (banner) {\n                this.showBanner();\n            }\n            if (modal) {\n                this.showModal();\n            }\n        }\n    }\n\n    public injectScripts() {\n        this.modalOptions.cookieCategories.forEach(category => {\n            if (category.checked || this.acceptAll) {\n                category.scripts.forEach(script => {\n                    if (script.type == ScriptType.STANDARD || script.type == null) {\n                        this.injectScript(script.scriptSrc, script.async)\n                    } else {\n                        this.injectGTM(script.gtmCode);\n                    }\n                });\n            }\n        });\n    }\n\n    saveButton() {\n        //this.setCookie();\n        this.saveCookieOptions();\n    }\n\n    saveCookieOptions() {\n        const base64Options = Utils.encode(JSON.stringify(this.modalOptions.cookieCategories));\n        localStorage.setItem(\"cookiesManagerOptions\", base64Options);\n    }\n\n    getCookiesOptions(): any {\n        return JSON.parse(Utils.decode(localStorage.getItem(\"cookiesManagerOptions\")));\n    }\n\n    private getDefaults(): Options {\n        return {\n            askOnce: true,\n            askOnChange: true,\n            modalOptions: {\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                saveButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n                closeButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n            },\n            bannerOptions: {\n                wall: true,\n                wallScroll: false,\n                wallBlur: true,\n                bannerText: 'This website uses cookies to ensure you get the best experience on our website.',\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                settingsButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n                acceptRequiredOnlyButton: {\n                    text: 'Configuración',\n                    show: false,\n                },\n                rejectAllButton: {\n                    text: 'Configuración',\n                    show: false,\n                }\n            },\n            cookieCategories: [],\n        }\n    }\n\n\n\n}\n\nexport interface Options {\n    cookieCategories: Array<CookieCategory>,\n    bannerOptions: BannerOptions,\n    modalOptions: ModalOptions,\n    askOnce: boolean,\n    askOnChange: boolean,\n}\n\nexport interface CookieCategory {\n    title: string,\n    description: string,\n    required: boolean,\n    checked: boolean,\n    scripts: [\n        {\n            type: ScriptType,\n            gtmCode: string,\n            scriptSrc: string,\n            async: boolean,\n        }\n    ]\n}\n\nexport enum ScriptType {\n    GTM,\n    STANDARD\n}","import { Modal } from \"./Modal\";\nimport { Utils } from './utils';\nimport { CookiesManager } from './CookiesManager';\n\nexport class Banner {\n    private options: BannerOptions;\n    private banner: string;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: BannerOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        this.injectBanner();\n        this.setEventListeners();\n    }\n\n    private setEventListeners() {\n        let self = this;\n        // Accept all button\n        document.querySelector(\".banner-container__accept-all-btn\")!.addEventListener(\"click\", function () {\n            self.cookiesManager.acceptAllButton();\n        });\n\n        // Config button\n        document.querySelector(\".banner-container__config-btn\")!.addEventListener(\"click\", function () {\n            //self.options.settingsButton.modal.show();\n            self.cookiesManager.showModal();\n        });\n\n    }\n\n\n\n\n    private generateBanner() {\n        return `\n                <div class=\"c-cookies-config-banner\">\n                    <div class=\"banner-container\">\n                        ${this.getBannerText()}\n                        <div class=\"banner-container__buttons\">\n                            ${this.getAcceptAllButton()}\n                            ${this.getSettingsButton()}\n                        </div>\n                    </div>\n                </div> \n                `;\n    }\n\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"banner-container__button banner-container__accept-all-btn\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSettingsButton() {\n        return this.options.settingsButton.show ? `<button class=\"banner-container__button-link banner-container__config-btn\">${this.options.settingsButton.text}</button>` : \"\";\n    }\n\n    private getBannerText() {\n        return Utils.wrapString(this.options.bannerText, \"p\");\n    }\n\n    public injectBanner() {\n        if (document.querySelector(\"body\") != null) {\n            document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateBanner());\n        }\n    }\n\n    public showWall() {\n        const blur = this.options.wallBlur ? \"c-cookies-config-wall--blurred\" : \"\";\n        const wall = `<div class=\"c-cookies-config-wall ${blur}\"></div>`;\n        document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", wall);\n    }\n\n    public hideWall() {\n        const test = document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!;\n        test.style.display = \"none\";\n    }\n\n    public hideScroll() {\n        document.querySelector(\"body\")!.style.overflow = \"hidden\";\n    }\n\n    public showScroll() {\n        document.querySelector(\"body\")!.style.overflow = \"auto\";\n    }\n\n    public show() {\n        //document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style(\"display\", \"blockxº\");\n        if (this.options.wall) {\n            this.showWall();\n        }\n        if (!this.options.wallScroll) {\n            this.hideScroll();\n        }\n        document.querySelector<HTMLElement>(\".c-cookies-config-banner .banner-container\")!.classList.add(\"show-banner\");\n    }\n    public hide() {\n        const test = document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style.display = \"none\";\n        this.hideWall();\n        this.showScroll();\n        // document.querySelector(\".c-cookies-config-banner\")!.style(\"display\", \"none\");\n        // Array.from(document.querySelector(\".c-cookies-config-banner\") as unknown as HTMLCollectionOf<HTMLElement>);\n    }\n\n}\n\n\n\n\nexport interface BannerOptions {\n    bannerText: string;\n    wall: boolean,\n    wallScroll: boolean,\n    wallBlur: boolean,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    settingsButton: {\n        text: string,\n        show: boolean,\n    },\n    acceptRequiredOnlyButton: {\n        text: string,\n        show: boolean,\n    },\n    rejectAllButton: {\n        text: string,\n        show: boolean,\n    },\n}\n","import { CookiesManager } from './CookiesManager';\nexport class Modal {\n\n    private options: ModalOptions;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: ModalOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        this.injectModal();\n        this.setEventListeners();\n    }\n\n\n    show() {\n        const modalContainer = document.getElementById(\"modal-container\");\n        modalContainer!.classList.add('show-modal');\n        // Hide body scroll\n        document.querySelector(\"body\")!.style.overflow = \"hidden\";\n    }\n    hide() {\n        const modalContainer = document.getElementById('modal-container')\n        modalContainer!.classList.remove('show-modal')\n\n    }\n\n    setEventListeners() {\n\n        var self = this;\n        // Close modal\n        const closeBtn = document.querySelectorAll('.close-modal')\n        closeBtn.forEach(c => c.addEventListener('click', this.hide))\n\n        // Accept all btn\n        // Estos listeners deberían settearse en CookiesManager probablemente, porque va a haber que llamar métodos de ahí. O eso o Modal debería tener la instancia de CookiesManager.\n        const acceptAllBtn = document.querySelectorAll('.modal__button-accept-all')\n\n        acceptAllBtn.forEach(function (item) {\n            item.addEventListener('click', function () {\n                self.cookiesManager.acceptAllButton();\n            });\n        });\n\n        // Save button\n        const saveButton = document.querySelectorAll('.modal__button-save-btn')\n\n        saveButton.forEach(function (item) {\n            item.addEventListener('click', function () {\n               self.cookiesManager.injectScripts();\n                self.cookiesManager.hideBanner();\n                self.cookiesManager.saveButton();\n            });\n        });\n\n        // Switches\n        this.cookiesManager.getOptions().cookieCategories.forEach((category, index) => {\n\n            var checkbox = document.querySelector(`.cm-switch-${index}`)!;\n            checkbox.addEventListener('change', function () {\n                if (this.checked) {\n                    category.checked = true;\n                } else {\n                    category.checked = false;\n                }\n            });\n\n        });\n\n\n    }\n\n    public injectModal() {\n        if (document.querySelector(\"body\") != null) {\n            document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateModal());\n        }\n    }\n\n    private generateCategoriesBlocks() {\n        let categoriesBlocks = \"\";\n        this.cookiesManager.getOptions().cookieCategories.forEach((element, index) => {\n            const disabled = element.required ? \"disabled\" : \"\";\n            const checked = element.required ? \"checked\" : \"\";\n            const block = `\n            <div class=\"cookie-category\">\n                <div class=\"cookie-category__header header\">\n                    <h2 class=\"header__title\">\n                    ${element.title}\n                    </h2>\n                    <div class=\"header__switch\">\n                    <label class=\"switch ${disabled}\">\n                        <input ${disabled} checked class=\"cm-switch-${index}\" type=\"checkbox\">\n                        <span class=\"slider round\"></span>\n                    </label>\n                    </div>\n                </div>\n            <div class=\"cookie-category__body body\">\n                <p>${element.description}</p>\n            </div>\n            </div>\n            `\n            categoriesBlocks += block;\n        });\n        return categoriesBlocks;\n\n    }\n\n    generateModal() {\n        return `\n        <div class=\"c-cookies-config-modal\">\n        <div class=\"modal__container\" id=\"modal-container\">\n          <div class=\"modal__content\">\n            <div class=\"modal__close close-modal\" title=\"Close\">\n                <div class=\"close-modal-img\"></div>\n            </div>\n        \n            <h1 class=\"modal__title\">Configuración de cookies</h1>\n            <p class=\"modal__description\">Configura aquí tus cookies.</p>\n            <div class=\"modal__cookie-categories\">\n                ${this.generateCategoriesBlocks()}\n            </div>\n    \n            <div class=\"modal__footer\">\n              <button class=\"modal__button modal__button-width modal__button-accept-all\">\n                Aceptar todas\n              </button>\n    \n              <button class=\"modal__button-link close-modal modal__button-save-btn\">\n                Guardar\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n        `;\n    }\n\n}\n\nexport interface ModalOptions {\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    saveButton: {\n        text: string,\n        show: boolean,\n    },\n    closeButton: {\n        text: string,\n        show: boolean,\n    },\n}"],"names":["Utils","ScriptType","encode","str","window","btoa","decode","a","atob","isHTML","RegExp","prototype","test","bind","match","wrapString","tag","this","deepEqual","x","y","_this","ok","Object","keys","tx","length","every","key","compareObjects","b","s","o","entries","sort","map","i","JSON","stringify","objectEquals","obj1","obj2","JSONstringifyOrder","obj","value","prepareObjectsForComparison","A","parse","B","forEach","element","checked","mergeRecursively","p","constructor","e","Banner","cookiesManager","options","banner","injectBanner","setEventListeners","document","querySelector","addEventListener","self","acceptAllButton","showModal","_proto","generateBanner","getBannerText","getAcceptAllButton","getSettingsButton","show","text","settingsButton","bannerText","insertAdjacentHTML","showWall","blur","wallBlur","wall","hideWall","style","display","hideScroll","overflow","showScroll","wallScroll","classList","add","hide","Modal","injectModal","getElementById","remove","querySelectorAll","c","item","injectScripts","hideBanner","saveButton","getOptions","cookieCategories","category","index","generateModal","generateCategoriesBlocks","categoriesBlocks","required","title","disabled","description","CookiesManager","modalOptions","modal","acceptAll","configChanged","Error","getDefaults","localStorage","getItem","optionsComparison","getCookiesOptions","createModal","bannerOptions","createBanner","getBanner","setBanner","getModal","setModal","saveCookieOptions","showBanner","hideModal","injectScript","src","async","createElement","setAttribute","body","appendChild","injectGTM","gtmCode","w","d","l","push","Date","getTime","event","f","getElementsByTagName","j","parentNode","insertBefore","dataLayer","error","console","log","init","askOnce","askOnChange","scripts","script","type","STANDARD","scriptSrc","base64Options","setItem","closeButton","acceptRequiredOnlyButton","rejectAllButton"],"mappings":"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"}