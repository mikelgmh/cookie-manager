{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/Banner.ts","../src/Modal.ts","../src/CookiesManager.ts"],"sourcesContent":["\nexport class Utils {\n    public static encode(str) {\n        return window.btoa(str);\n    }\n    public static decode(a) {\n        return window.atob(a);\n    }\n    private static isHTML(str: string) {\n        var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n\n        // test isHTML regex\n        return str.match(isHTML);\n\n    }\n    public static wrapString(str: string, tag: string) {\n        if (this.isHTML(str)) {\n            return str;\n        }\n        return `<${tag}>${str}</${tag}>`;\n    }\n\n    public static deepEqual(x, y) {\n        const ok = Object.keys, tx = typeof x, ty = typeof y;\n        return x && y && tx === 'object' && tx === ty ? (\n            ok(x).length === ok(y).length &&\n            ok(x).every(key => this.deepEqual(x[key], y[key]))\n        ) : (x === y);\n    }\n\n    public static compareObjects(a, b) {\n        let s = (o) => Object.entries(o).sort().map(i => {\n            if (i[1] instanceof Object) i[1] = s(i[1]);\n            return i\n        })\n        return JSON.stringify(s(a)) === JSON.stringify(s(b))\n    }\n\n    public static objectEquals(obj1, obj2) {\n        const JSONstringifyOrder = obj => {\n            const keys = {};\n            JSON.stringify(obj, (key, value) => {\n                keys[key] = null;\n                return value;\n            });\n            return JSON.stringify(obj, Object.keys(keys).sort());\n        };\n        return JSONstringifyOrder(obj1) === JSONstringifyOrder(obj2);\n    }\n\n    public static prepareObjectsForComparison(obj1, obj2) {\n        var A = JSON.parse(JSON.stringify(obj1));\n        var B = JSON.parse(JSON.stringify(obj2));\n\n\n        A.forEach(element => {\n            element.checked = true;\n        });\n        B.forEach(element => {\n            element.checked = true;\n        });\n        return { A, B }\n    }\n\n    public static mergeRecursively(obj1, obj2) {\n        for (var p in obj2) {\n            try {\n                // Property in destination object set; update its value.\n                if (obj2[p].constructor == Object) {\n                    obj1[p] = this.mergeRecursively(obj1[p], obj2[p]);\n                } else {\n                    obj1[p] = obj2[p];\n                }\n            } catch (e) {\n                // Property in destination object not set; create it and set its value.\n                obj1[p] = obj2[p];\n            }\n        }\n        return obj1;\n    }\n}","import { Modal } from \"./Modal\";\nimport { Utils } from './utils';\nimport { CookiesManager } from './CookiesManager';\n\nexport class Banner {\n    private options: BannerOptions;\n    private banner: string;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: BannerOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().bannerOptions.inject) {\n            this.injectBanner();\n        }\n        if (cookiesManager.getOptions().bannerOptions.injectWall){\n            this.injectWall();\n        }\n        this.setEventListeners();\n    }\n\n    public setEventListeners() {\n        try {\n            let self = this;\n            // Accept all button\n            document.querySelector(\".cm-banner-accept-all-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Config button\n            document.querySelector(\".cm-banner-config-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.showModal();\n            });\n        } catch (error) {\n            console.error(\"Can't set the event listener for the cookies banner. Can't find the HTML elements.\")\n        }\n\n    }\n\n\n\n\n    private generateBanner() {\n        return `\n                <div class=\"c-cookies-config-banner\">\n                    <div class=\"banner-container\">\n                        ${this.getBannerText()}\n                        <div class=\"banner-container__buttons\">\n                            ${this.getAcceptAllButton()}\n                            ${this.getSettingsButton()}\n                        </div>\n                    </div>\n                </div> \n                `;\n    }\n\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"banner-container__button banner-container__accept-all-btn cm-banner-accept-all-btn\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSettingsButton() {\n        return this.options.settingsButton.show ? `<button class=\"banner-container__button-link banner-container__config-btn cm-banner-config-btn\">${this.options.settingsButton.text}</button>` : \"\";\n    }\n\n    private getBannerText() {\n        return Utils.wrapString(this.options.bannerText, \"p\");\n    }\n\n    private injectWall(){\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateWall());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the wall.\");\n        }\n    }\n\n    public injectBanner() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateBanner());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the banner.\");\n        }\n    }\n\n    private generateWall() {\n        const blur = this.options.wallBlur ? \"c-cookies-config-wall--blurred\" : \"\";\n        return `<div class=\"c-cookies-config-wall ${blur}\"></div>`;\n    }\n\n    public showWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.add(\"wall-show\");\n        } catch (error) {\n            console.error(\"Couldn't apply the background wall.\")\n        }\n    }\n\n    public hideWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.remove(\"wall-show\");\n        } catch (error) {\n            console.error(\"Unable to hide the background wall.\")\n        }\n    }\n\n    public hideScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"hidden\";\n            document.querySelector(\"html\")!.style.overflow = \"hidden\";\n        } catch (error) {\n            console.error(\"Unable to hide the scroll.\")\n        }\n    }\n\n    public showScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"auto\";\n            document.querySelector(\"html\")!.style.overflow = \"auto\";\n        } catch (error) {\n            console.error(\"Unable to show the scroll.\")\n        }\n    }\n\n    public show() {\n        if (this.options.wall) {\n            this.showWall();\n        }\n        if (!this.options.wallScroll) {\n            this.hideScroll();\n        }\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner .banner-container\")!.classList.add(\"show-banner\");\n        } catch (error) {\n            console.error(\"Unable to show the banner.\")\n        }\n    }\n    public hide() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style.display = \"none\";\n        } catch (error) {\n            console.error(\"Unable to hide the banner.\")\n        }\n        this.hideWall();\n        this.showScroll();\n    }\n\n}\n\n\n\n\nexport interface BannerOptions {\n    bannerText: string;\n    wall: boolean,\n    injectWall: boolean,\n    wallScroll: boolean,\n    wallBlur: boolean,\n    inject: boolean,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    settingsButton: {\n        text: string,\n        show: boolean,\n    },\n    acceptRequiredOnlyButton: {\n        text: string,\n        show: boolean,\n    },\n    rejectAllButton: {\n        text: string,\n        show: boolean,\n    },\n}\n","import { CookieCategory, CookiesManager } from './CookiesManager';\nexport class Modal {\n\n    private options: ModalOptions;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: ModalOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().modalOptions.inject) {\n            this.injectModal();\n        }\n        this.setEventListeners();\n        this.updateSwitchesStatus();\n    }\n\n\n    async show() {\n        try {\n            // Check if there's already any option saved\n            // if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            //     //const options: CookieCategory = this.cookiesManager.getCookiesOptions();\n            //     alert(\"W\")\n            // }\n            const modal = document.querySelector(\".c-cookies-config-modal\");\n            modal!.classList.add(this.options.showModalClass);\n            await new Promise(r => setTimeout(r, 10)); // This is to make the show animation work\n            // Toggle accordions after showing modal\n            var acc = document.getElementsByClassName(\"cm-accordion\");\n            var i;\n            var self = this;\n            for (i = 0; i < acc.length; i++) {\n                if (acc[i].classList.contains(\"cm-active-on-load\")) {\n                    acc[i].classList.remove(\"cm-active-on-load\");\n                    await new Promise(r => setTimeout(r, 100)); // This is to make the show animation work\n                    self.toggleAccordion(acc[i]);\n                }\n\n            }\n\n            const modalContainer = document.getElementById(\"modal-container\");\n            modalContainer!.classList.add(this.options.showModalClass);\n            // Hide body scroll\n            this.cookiesManager.getBanner().hideScroll();\n        } catch (error) {\n            console.error(\"Could not show cookie modal.\")\n            console.error(error)\n        }\n    }\n    hide(self?: Modal) { // Destucted object, so we can access this context\n        const modalContainer = document.getElementById('modal-container');\n        modalContainer!.classList.remove(this.options.showModalClass);\n\n        // If banner is not shown, show scroll\n        const bannerContainer = document.querySelector(\".c-cookies-config-banner .banner-container\");\n        if (bannerContainer?.classList.contains(\"show-banner\") == false) {\n            this.cookiesManager.getBanner().showScroll();\n        } else {\n            // If the banner is shown, check if the scroll was active. If it was, show the scroll on modal close.\n            const wallScroll = this.cookiesManager.getOptions().bannerOptions.wallScroll;\n            if (wallScroll) {\n                this.cookiesManager.getBanner().showScroll();\n            }\n        }\n\n    }\n\n    setEventListeners() {\n\n        try {\n            var self = this;\n            // Modal close button\n            const closeBtn = document.querySelectorAll('.close-modal')\n            closeBtn.forEach(c => c.addEventListener('click', () => {\n                this.hide(self);\n            }))\n\n            // Accept all button\n            const acceptAllBtn = document.querySelector('.cm-modal-accept-all')!;\n            acceptAllBtn.addEventListener('click', function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Save button\n            const saveButton = document.querySelector('.cm-modal-save')!;\n            saveButton.addEventListener('click', function () {\n                self.cookiesManager.injectScripts();\n                self.cookiesManager.hideBanner();\n                self.cookiesManager.saveButton();\n            });\n\n            // Switches\n            this.cookiesManager.getOptions().cookieCategories.forEach((category: CookieCategory, index) => {\n                var checkbox = document.querySelector(`.cm-switch-${index}`)!;\n                const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n                checkbox.addEventListener('change', function () {\n                    if (this.checked) {\n                        category.checked = true;\n                        self.toggleSwitch(index, true);\n                    } else {\n                        category.checked = false;\n                        self.toggleSwitch(index, false);\n                    }\n                });\n            });\n\n            // Set accordion toggle on click\n            var acc = document.getElementsByClassName(\"cm-accordion\");\n            var i;\n            var self = this;\n            for (i = 0; i < acc.length; i++) {\n                acc[i].addEventListener(\"click\", function () {\n                    self.toggleAccordion(this);\n                });\n            }\n\n\n        } catch (error) {\n            console.error(\"Could not set event listeners for cookie modal.\")\n        }\n    }\n\n    private toggleSwitch(toggleIndex: number, checked: boolean) {\n        const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n        const checkboxInput = cookieCategoryElements[toggleIndex].querySelector<HTMLInputElement>(`.cm-switch-${toggleIndex}`)!;\n        if (!checked) {\n            checkboxInput.removeAttribute(\"checked\");\n        } else {\n            checkboxInput.setAttribute(\"checked\", \"\")\n        }\n        checkboxInput.checked = checked;\n    }\n\n    private async toggleAccordion(element) {\n        element.classList.toggle(\"cm-active\");\n        var panel = element.nextElementSibling;\n        if (panel.style.maxHeight) {\n            panel.style.maxHeight = null;\n        } else {\n            panel.style.maxHeight = panel.scrollHeight + \"px\";\n        }\n    }\n\n    public injectModal() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateModal());\n            }\n        } catch (error) {\n            console.error(\"Could not inject cookie modal.\")\n        }\n    }\n\n    // If we're not injecting the HTML, we need to update the HTML manually after the page is loaded.\n    public updateSwitchesStatus() {\n        //const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n        let cookieCategories = this.cookiesManager.getOptions().cookieCategories;\n        cookieCategories.forEach((cookieCategory, index) => {\n            try {\n                this.toggleSwitch(index, cookieCategory.checked)\n            } catch (error) {\n                console.error(\"You have more cookieCategories defined in javascript than in your HTML. Please, use the same number of cookieCategories.\")\n            }\n        });\n    }\n\n    private generateCategoriesBlocks() {\n        let categoriesBlocks = \"\";\n        let cookieCategories = this.cookiesManager.getOptions().cookieCategories;\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            cookieCategories = this.cookiesManager.getCookiesOptions();\n        }\n        cookieCategories.forEach((element, index) => {\n            const disabled = element.required ? \"disabled\" : \"\";\n            const checked = element.checked ? \"checked\" : \"\";\n            const accordionClass = element.accordion.enable ? \"cm-accordion\" : \"\";\n            const accordionPanel = element.accordion.enable ? \"cm-panel\" : \"\";\n            const activeAccordion = element.accordion.active ? \"cm-active-on-load\" : \"\";\n            const accordionChevron = element.accordion.enable ? \"<div class='cc-header__left'></div>\" : \"\";\n            const boxedHeader = element.boxedHeader ? \"cm-boxed\" : \"\";\n            const boxedBody = element.boxedBody ? \"cookie-category__body--boxed\" : \"\";\n            // const boxedHeaderMArgin = element.accordion.active ? \"\" : \"no-chevron\";\n            const block = `\n            <div class=\"cookie-category\">\n                <div class=\"cookie-category__header cc-header ${accordionClass} ${boxedHeader} ${activeAccordion}\">\n                    ${accordionChevron}\n                    <div class=\"cc-header__right\">\n                        <div class=\"header__title\">\n                            ${element.title}\n                        </div>\n                        <div class=\"header__switch\">\n                            <label class=\"switch ${disabled}\">\n                                <input ${disabled} ${checked} class=\"cm-switch-${index}\" type=\"checkbox\">\n                                <span class=\"slider round ${disabled}\"></span>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"cookie-category__body body ${boxedBody} ${accordionPanel}\">\n                    <p>${element.description}</p>\n                </div>\n            </div>\n            `;\n            categoriesBlocks += block;\n        });\n        return categoriesBlocks;\n\n    }\n\n    getCloseButton() {\n        return this.options.closeButton.show ? `<div class=\"modal__close close-modal\" title=\"Close\"><div class=\"close-modal-img\"></div></div>` : \"\";\n    }\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"modal__button modal__button-width cm-modal-accept-all modal__button-accept-all\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSaveButton() {\n        return this.options.saveButton.show ? ` <button class=\"modal__button-link close-modal cm-modal-save modal__button-save-btn\"> ${this.options.saveButton.text} </button>` : \"\";\n    }\n\n    generateModal() {\n        return `\n        <div class=\"c-cookies-config-modal\">\n        <div class=\"modal__container\" id=\"modal-container\">\n          <div class=\"modal__content\">\n            ${this.getCloseButton()}\n            <div class=\"modal__title\">${this.options.title}</div>\n            <p class=\"modal__description\">${this.options.description}</p>\n            <div class=\"modal__cookie-categories\">\n                ${this.generateCategoriesBlocks()}\n            </div>\n    \n            <div class=\"modal__footer\">\n             ${this.getAcceptAllButton()}\n             ${this.getSaveButton()}\n            </div>\n          </div>\n        </div>\n      </div>\n        `;\n    }\n\n}\n\nexport interface ModalOptions {\n    inject: boolean,\n    title: string,\n    description: string,\n    showModalClass: string,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    saveButton: {\n        text: string,\n        show: boolean,\n    },\n    closeButton: {\n        text: string,\n        show: boolean,\n    },\n}","\nimport { Banner, BannerOptions } from \"./Banner\";\nimport { ModalOptions, Modal } from './Modal';\nimport \"./scss/styles.scss\";\nimport { Utils } from './utils';\n\ninterface cookieCatergoryCallbackInterface {\n    (CookieCategory: CookieCategory): void;\n}\nexport class CookiesManager {\n\n    // var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n    private modalOptions: Options;\n    private banner: Banner;\n    private modal: Modal;\n    private acceptAll: boolean = false;\n    private configChanged: boolean = false;\n    private onCookieCategoryChange: cookieCatergoryCallbackInterface;\n\n\n    public getBanner(): Banner {\n        return this.banner;\n    }\n\n    public setBanner(banner: Banner): void {\n        this.banner = banner;\n    }\n\n    public getModal(): Modal {\n        return this.modal;\n    }\n\n    public setModal(modal: Modal): void {\n        this.modal = modal;\n    }\n\n    public getOptions(): Options {\n        return this.modalOptions;\n    }\n\n    public on(listener, callback: cookieCatergoryCallbackInterface) {\n        if (listener == \"onCookieCategoryChange\") {\n            this.onCookieCategoryChange = callback;\n        }\n    }\n\n    constructor(options: Options) {\n        if (options == null) {\n            throw new Error(\"Options for CookiesManager cannot be null.\");\n        } else {\n            if (options.cookieCategories == null) {\n                throw new Error(\"You should provide at least one cookie category\");\n            }\n            // Set all cookie categories as checked by default. Set default value for cookie category\n            const mergedCategories = new Array<CookieCategory>;\n            options.cookieCategories.forEach(category => {\n                category.checked = true;\n                mergedCategories.push(Utils.mergeRecursively(this.getDefaultCookieCategoryOptions(), category));\n            });\n            options.cookieCategories = mergedCategories;\n            // Merge the default options with user options\n            options = Utils.mergeRecursively(this.getDefaultOptions(), options);\n            this.modalOptions = options;\n            this.constructorInitializationFunction(options);\n        }\n    }\n\n    private constructorInitializationFunction(options) {\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) { // If there's already configuration saved\n            // Prepare the options to compare them.\n            var optionsComparison = Utils.prepareObjectsForComparison(this.modalOptions.cookieCategories, this.getCookiesOptions());\n\n            // Check if the options in localStorage and the options from the constructor are the same\n            if (Utils.objectEquals(optionsComparison.A, optionsComparison.B)) {\n                // If the options are the same, just inject the scripts\n                this.modalOptions.cookieCategories = this.getCookiesOptions();\n\n            } else {\n                localStorage.removeItem(\"cookiesManagerOptions\");\n                // If the options are different, set the configChanged to true\n                // We are in the constructor. By setting this to true, it might show the banner and modal if the user has set askOnChange to true\n                this.configChanged = true;\n            }\n        }\n\n        // Generate modal\n        if (options.modalOptions != null) {\n\n            this.createModal(options.modalOptions);\n\n        }\n\n        if (options.bannerOptions != null) {\n            this.createBanner(options.bannerOptions);\n        }\n    }\n\n    public setEventListeners() {\n        this.modal.setEventListeners();\n        this.banner.setEventListeners();\n\n    }\n\n    public createBanner(options: BannerOptions) {\n        this.banner = new Banner(this, options);\n        return this.banner;\n    }\n    public createModal(options: ModalOptions) {\n        this.modal = new Modal(this, options);\n        return this.modal;\n    }\n\n    public acceptAllButton() {\n        this.getOptions().cookieCategories.forEach((cookieCategory: CookieCategory) => {\n            cookieCategory.checked = true;\n        })\n        this.acceptAll = true;\n        this.modal.hide();\n        this.banner.hide();\n        this.injectScripts();\n        this.saveCookieOptions();\n    }\n\n    public showModal() {\n        this.modal.show();\n    }\n\n    public showBanner() {\n        this.banner.show();\n    }\n\n    public hideBanner() {\n        this.banner.hide();\n    }\n\n    public hideModal() {\n        this.modal.hide();\n    }\n\n    private injectScript(src: string, async = false) {\n        var s = document.createElement('script');\n        s.setAttribute('src', src);\n        s.async = async;\n        document.body.appendChild(s);\n    }\n\n    private injectGTM(gtmCode: string) {\n        try {\n            (function (w, d, s, l, i) {\n                w[l] = w[l] || [];\n                w[l].push({\n                    'gtm.start': new Date().getTime(),\n                    event: 'gtm.js',\n                });\n                const f = d.getElementsByTagName(s)[0];\n                const j = d.createElement(s) as HTMLInputElement;\n                const\n                    dl = l != 'dataLayer' ? `&l=${l}` : '';\n                //j.async = true;\n                j.src = `https://www.googletagmanager.com/gtm.js?id=${i}${dl}`;\n                f.parentNode!.insertBefore(j, f);\n            }(window, document, 'script', 'dataLayer', gtmCode));\n            (window as any).dataLayer = (window as any).dataLayer || [];\n        } catch (error) {\n            console.error(\"Couldn't inject GTM.\")\n        }\n    }\n\n    public async init(banner: boolean, modal: boolean) {\n        if (this.modalOptions.askOnce) {\n            if (localStorage.getItem(\"cookiesManagerOptions\") == null || this.configChanged) {\n                await this.initShow(banner, modal)\n            } // There's no else, as if cookiesManagerOptions was not null, the constructor would do the job.\n        } else {\n            await this.initShow(banner, modal)\n        }\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            this.injectScripts();\n        }\n    }\n\n    public async initShow(banner: boolean, modal: boolean) {\n        if (this.modalOptions.delay > 0) {\n            await new Promise(r => setTimeout(r, this.modalOptions.delay)); // This is to make the show animation work\n        }\n        if (banner) {\n            this.showBanner();\n        }\n        if (modal) {\n            this.showModal();\n        }\n    }\n\n    public injectScripts() {\n        try {\n\n            this.modalOptions.cookieCategories.forEach(category => {\n                if (this.onCookieCategoryChange != null) {\n                    this.onCookieCategoryChange(category);\n                }\n                if (category.checked || this.acceptAll) {\n                    category.scripts.forEach(script => {\n                        if (script[\"type\"] == ScriptType.STANDARD || script[\"type\"] == null) {\n                            if (script[\"scriptSrc\"] != null) {\n                                this.injectScript(script[\"scriptSrc\"], script[\"async\"])\n                            }\n                        } else {\n                            if (script[\"gtmCode\"] != null) {\n                                this.injectGTM(script[\"gtmCode\"]);\n                            } else {\n                                throw new Error(\"You should provide a gtmCode for the script\");\n                            }\n                        }\n                    });\n                }\n            });\n        } catch (error) {\n            console.error(`Couldn't inject scripts: ${error}`)\n        }\n    }\n\n    saveButton() {\n        this.saveCookieOptions();\n    }\n\n    saveCookieOptions() {\n        const base64Options = Utils.encode(JSON.stringify(this.modalOptions.cookieCategories));\n        localStorage.setItem(\"cookiesManagerOptions\", base64Options);\n    }\n\n    getCookiesOptions(): any {\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            return JSON.parse(Utils.decode(localStorage.getItem(\"cookiesManagerOptions\")));\n        }\n        return {};\n    }\n\n    private getDefaultCookieCategoryOptions(): CookieCategory {\n        return {\n            title: \"Cookie Category Example\",\n            description: \"Cookie category description\",\n            required: false,\n            checked: true,\n            accordion: {\n                enable: false,\n                enableOnDescriptionLength: 45,\n                active: false,\n            },\n            boxedHeader: false,\n            boxedBody: false,\n            scripts: []\n        }\n    }\n    private getDefaultOptions(): Options {\n        return {\n            askOnce: true,\n            delay: 0,\n            askOnChange: true,\n            initOnDomContentLoaded: true,\n            modalOptions: {\n                title: \"Cookie settings\",\n                description: \"Change the settings for the cookies here.\",\n                inject: true,\n                showModalClass: \"show-modal\",\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                saveButton: {\n                    text: 'Save',\n                    show: true,\n                },\n                closeButton: {\n                    text: 'Close',\n                    show: true,\n                },\n            },\n            bannerOptions: {\n                inject: true,\n                injectWall: true,\n                wall: true,\n                wallScroll: true,\n                wallBlur: false,\n                bannerText: 'This website uses cookies to ensure you get the best experience on our website.',\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                settingsButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n                acceptRequiredOnlyButton: {\n                    text: 'Configuración',\n                    show: false,\n                },\n                rejectAllButton: {\n                    text: 'Configuración',\n                    show: false,\n                }\n            },\n            cookieCategories: [],\n        }\n    }\n\n\n\n}\n\nexport interface Options {\n    cookieCategories: Array<CookieCategory>,\n    initOnDomContentLoaded: boolean,\n    bannerOptions: BannerOptions,\n    modalOptions: ModalOptions,\n    askOnce: boolean,\n    askOnChange: boolean,\n    delay: number,\n}\n\nexport interface CookieCategory {\n    title: string,\n    description: string,\n    required: boolean,\n    checked: boolean,\n    accordion: Accordion,\n    boxedHeader: boolean,\n    boxedBody: boolean,\n    scripts: [\n        {\n            type: ScriptType,\n            gtmCode: string,\n            scriptSrc: string,\n            async: boolean,\n        }\n    ] | []\n}\n\nexport interface Accordion {\n    enable: boolean,\n    enableOnDescriptionLength: number,\n    active: boolean,\n}\n\nexport enum ScriptType {\n    GTM,\n    STANDARD\n}"],"names":["Utils","encode","str","window","btoa","decode","a","atob","isHTML","RegExp","prototype","test","bind","match","wrapString","tag","this","deepEqual","x","y","_this","ok","Object","keys","tx","length","every","key","compareObjects","b","s","o","entries","sort","map","i","JSON","stringify","objectEquals","obj1","obj2","JSONstringifyOrder","obj","value","prepareObjectsForComparison","A","parse","B","forEach","element","checked","mergeRecursively","p","constructor","e","Banner","cookiesManager","options","banner","getOptions","bannerOptions","inject","injectBanner","injectWall","setEventListeners","self","document","querySelector","addEventListener","acceptAllButton","showModal","error","console","generateBanner","getBannerText","getAcceptAllButton","getSettingsButton","_proto","show","text","settingsButton","bannerText","insertAdjacentHTML","generateWall","wallBlur","showWall","classList","add","hideWall","remove","hideScroll","style","overflow","showScroll","wall","wallScroll","hide","display","pact","state","_Pact","_settle","v","then","observer","onFulfilled","onRejected","result","callback","_isSettledPact","thenable","ScriptType","Modal","modalOptions","injectModal","updateSwitchesStatus","_this2","Promise","resolve","showModalClass","r","setTimeout","_temp3","getElementById","getBanner","acc","getElementsByClassName","contains","toggleAccordion","_temp","_temp2","_catch","reject","bannerContainer","_this3","querySelectorAll","c","injectScripts","hideBanner","saveButton","cookieCategories","category","index","checkbox","toggleSwitch","toggleIndex","checkboxInput","setAttribute","removeAttribute","toggle","panel","nextElementSibling","maxHeight","scrollHeight","generateModal","_this4","cookieCategory","generateCategoriesBlocks","categoriesBlocks","localStorage","getItem","getCookiesOptions","disabled","required","accordion","enable","boxedHeader","active","title","boxedBody","accordionPanel","description","getCloseButton","closeButton","getSaveButton","CookiesManager","modal","acceptAll","configChanged","onCookieCategoryChange","Error","mergedCategories","Array","push","getDefaultCookieCategoryOptions","getDefaultOptions","constructorInitializationFunction","setBanner","getModal","setModal","on","listener","optionsComparison","removeItem","createModal","createBanner","saveCookieOptions","showBanner","hideModal","injectScript","src","async","createElement","body","appendChild","injectGTM","gtmCode","w","d","l","Date","getTime","event","f","getElementsByTagName","j","parentNode","insertBefore","dataLayer","init","_temp5","askOnce","initShow","_temp6","_temp4","_temp9","_this5","delay","_temp10","_this6","scripts","script","STANDARD","setItem","base64Options","enableOnDescriptionLength","askOnChange","initOnDomContentLoaded","acceptRequiredOnlyButton","rejectAllButton"],"mappings":"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"}