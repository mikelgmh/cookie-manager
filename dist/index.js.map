{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/CookiesManager.ts","../src/Banner.ts","../src/Modal.ts"],"sourcesContent":["\nexport class Utils {\n    public static encode(str) {\n        return window.btoa(str);\n    }\n    public static decode(a) {\n        return window.atob(a);\n    }\n    private static isHTML(str: string) {\n        var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n\n        // test isHTML regex\n        return str.match(isHTML);\n\n    }\n    public static wrapString(str: string, tag: string) {\n        if (this.isHTML(str)) {\n            return str;\n        }\n        return `<${tag}>${str}</${tag}>`;\n    }\n\n    public static deepEqual(x, y) {\n        const ok = Object.keys, tx = typeof x, ty = typeof y;\n        return x && y && tx === 'object' && tx === ty ? (\n            ok(x).length === ok(y).length &&\n            ok(x).every(key => this.deepEqual(x[key], y[key]))\n        ) : (x === y);\n    }\n\n    public static compareObjects(a, b) {\n        let s = (o) => Object.entries(o).sort().map(i => {\n            if (i[1] instanceof Object) i[1] = s(i[1]);\n            return i\n        })\n        return JSON.stringify(s(a)) === JSON.stringify(s(b))\n    }\n\n    public static objectEquals(obj1, obj2) {\n        const JSONstringifyOrder = obj => {\n            const keys = {};\n            JSON.stringify(obj, (key, value) => {\n                keys[key] = null;\n                return value;\n            });\n            return JSON.stringify(obj, Object.keys(keys).sort());\n        };\n        return JSONstringifyOrder(obj1) === JSONstringifyOrder(obj2);\n    }\n\n    public static prepareObjectsForComparison(obj1, obj2) {\n        var A = JSON.parse(JSON.stringify(obj1));\n        var B = JSON.parse(JSON.stringify(obj2));\n\n\n        A.forEach(element => {\n            element.checked = true;\n        });\n        B.forEach(element => {\n            element.checked = true;\n        });\n        return { A, B }\n    }\n\n    public static mergeRecursively(obj1, obj2) {\n        for (var p in obj2) {\n            try {\n                // Property in destination object set; update its value.\n                if (obj2[p].constructor == Object) {\n                    obj1[p] = this.mergeRecursively(obj1[p], obj2[p]);\n                } else {\n                    obj1[p] = obj2[p];\n                }\n            } catch (e) {\n                // Property in destination object not set; create it and set its value.\n                obj1[p] = obj2[p];\n            }\n        }\n        return obj1;\n    }\n}","\nimport { Banner, BannerOptions } from \"./Banner\";\nimport { ModalOptions, Modal } from './Modal';\nimport \"./scss/styles.scss\";\nimport { Utils } from './utils';\nexport class CookiesManager {\n\n    // var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n    private modalOptions: Options;\n    private banner: Banner;\n    private modal: Modal;\n    private acceptAll: boolean = false;\n    private configChanged: boolean = false;\n\n\n    public getBanner(): Banner {\n        return this.banner;\n    }\n\n    public setBanner(banner: Banner): void {\n        this.banner = banner;\n    }\n\n    public getModal(): Modal {\n        return this.modal;\n    }\n\n    public setModal(modal: Modal): void {\n        this.modal = modal;\n    }\n\n    public getOptions(): Options {\n        return this.modalOptions;\n    }\n\n    constructor(options: Options) {\n        if (options == null) {\n            throw new Error(\"Options for CookiesManager cannot be null.\");\n        } else {\n            if (options.cookieCategories == null) {\n                throw new Error(\"You should provide at least one cookie category\");\n            }\n            // Set all cookie categories as checked by default\n            options.cookieCategories.forEach(category => {\n                category.checked = true;\n            });\n\n            // Merge the default options with user options\n            options = Utils.mergeRecursively(this.getDefaultOptions(), options);\n            this.modalOptions = options;\n\n            if (localStorage.getItem(\"cookiesManagerOptions\") != null) { // If there's already configuration saved\n                // Prepare the options to compare them.\n                var optionsComparison = Utils.prepareObjectsForComparison(this.modalOptions.cookieCategories, this.getCookiesOptions());\n\n                // Check if the options in localStorage and the options from the constructor are the same\n                if (Utils.objectEquals(optionsComparison.A, optionsComparison.B)) {\n                    // If the options are the same, just inject the scripts\n                    this.modalOptions.cookieCategories = this.getCookiesOptions();\n                    this.injectScripts();\n                } else {\n                    // If the options are different, set the configChanged to true\n                    // We are in the constructor. By setting this to true, it might show the banner and modal if the user has set askOnChange to true\n                    this.configChanged = true;\n                }\n            }\n\n            // Generate modal\n            if (options.modalOptions != null) {\n\n                this.createModal(options.modalOptions);\n\n            }\n\n            if (options.bannerOptions != null) {\n                this.createBanner(options.bannerOptions);\n\n            }\n        }\n\n    }\n\n    public setEventListeners() {\n        this.modal.setEventListeners();\n        this.banner.setEventListeners();\n\n    }\n\n    public createBanner(options: BannerOptions) {\n        this.banner = new Banner(this, options);\n        return this.banner;\n    }\n    public createModal(options: ModalOptions) {\n        this.modal = new Modal(this, options);\n        return this.modal;\n    }\n\n    public acceptAllButton() {\n        this.acceptAll = true;\n        this.modal.hide();\n        this.banner.hide();\n        this.injectScripts();\n        this.saveCookieOptions();\n    }\n\n    public showModal() {\n        this.modal.show();\n    }\n\n    public showBanner() {\n        this.banner.show();\n    }\n\n    public hideBanner() {\n        this.banner.hide();\n    }\n\n    public hideModal() {\n        this.modal.hide();\n    }\n\n    private injectScript(src: string, async = false) {\n        var s = document.createElement('script');\n        s.setAttribute('src', src);\n        s.async = async;\n        document.body.appendChild(s);\n    }\n\n    private injectGTM(gtmCode: string) {\n        try {\n            (function (w, d, s, l, i) {\n                w[l] = w[l] || [];\n                w[l].push({\n                    'gtm.start': new Date().getTime(),\n                    event: 'gtm.js',\n                });\n                const f = d.getElementsByTagName(s)[0];\n                const j = d.createElement(s) as HTMLInputElement;\n                const\n                    dl = l != 'dataLayer' ? `&l=${l}` : '';\n                //j.async = true;\n                j.src = `https://www.googletagmanager.com/gtm.js?id=${i}${dl}`;\n                f.parentNode!.insertBefore(j, f);\n            }(window, document, 'script', 'dataLayer', gtmCode));\n            (window as any).dataLayer = (window as any).dataLayer || [];\n        } catch (error) {\n            console.error(\"Couldn't inject GTM.\")\n        }\n    }\n\n    public init(banner: boolean, modal: boolean) {\n        if (this.modalOptions.askOnce) {\n            if (localStorage.getItem(\"cookiesManagerOptions\") == null || this.configChanged) {\n                if (banner) {\n                    this.showBanner();\n                }\n                if (modal) {\n                    this.showModal();\n                }\n            } // There's no else, as if cookiesManagerOptions was not null, the constructor would do the job.\n        } else {\n            if (banner) {\n                this.showBanner();\n            }\n            if (modal) {\n                this.showModal();\n            }\n        }\n    }\n\n    public injectScripts() {\n        try {\n            this.modalOptions.cookieCategories.forEach(category => {\n                if (category.checked || this.acceptAll) {\n                    category.scripts.forEach(script => {\n                        if (script.type == ScriptType.STANDARD || script.type == null) {\n                            if (script.scriptSrc != null) {\n                                this.injectScript(script.scriptSrc, script.async)\n                            }\n                        } else {\n                            if (script.gtmCode != null) {\n                                this.injectGTM(script.gtmCode);\n                            } else {\n                                throw new Error(\"You should provide a gtmCode for the script\");\n                            }\n                        }\n                    });\n                }\n            });\n        } catch (error) {\n            console.error(`Couldn't inject scripts: ${error}`)\n        }\n    }\n\n    saveButton() {\n        this.saveCookieOptions();\n    }\n\n    saveCookieOptions() {\n        const base64Options = Utils.encode(JSON.stringify(this.modalOptions.cookieCategories));\n        localStorage.setItem(\"cookiesManagerOptions\", base64Options);\n    }\n\n    getCookiesOptions(): any {\n        return JSON.parse(Utils.decode(localStorage.getItem(\"cookiesManagerOptions\")));\n    }\n\n    private getDefaultOptions(): Options {\n        return {\n            askOnce: true,\n            askOnChange: true,\n            modalOptions: {\n                title: \"Cookie settings\",\n                description: \"Change the settings for the cookies here.\",\n                inject: true,\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                saveButton: {\n                    text: 'Save',\n                    show: true,\n                },\n                closeButton: {\n                    text: 'Close',\n                    show: true,\n                },\n            },\n            bannerOptions: {\n                inject: true,\n                wall: true,\n                wallScroll: false,\n                wallBlur: true,\n                bannerText: 'This website uses cookies to ensure you get the best experience on our website.',\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                settingsButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n                acceptRequiredOnlyButton: {\n                    text: 'Configuración',\n                    show: false,\n                },\n                rejectAllButton: {\n                    text: 'Configuración',\n                    show: false,\n                }\n            },\n            cookieCategories: [],\n        }\n    }\n\n\n\n}\n\nexport interface Options {\n    cookieCategories: Array<CookieCategory>,\n    bannerOptions: BannerOptions,\n    modalOptions: ModalOptions,\n    askOnce: boolean,\n    askOnChange: boolean,\n}\n\nexport interface CookieCategory {\n    title: string,\n    description: string,\n    required: boolean,\n    checked: boolean,\n    scripts: [\n        {\n            type: ScriptType,\n            gtmCode: string,\n            scriptSrc: string,\n            async: boolean,\n        }\n    ]\n}\n\nexport enum ScriptType {\n    GTM,\n    STANDARD\n}","import { Modal } from \"./Modal\";\nimport { Utils } from './utils';\nimport { CookiesManager } from './CookiesManager';\n\nexport class Banner {\n    private options: BannerOptions;\n    private banner: string;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: BannerOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().bannerOptions.inject) {\n            this.injectBanner();\n        }\n        this.setEventListeners();\n    }\n\n    public setEventListeners() {\n        try {\n            let self = this;\n            // Accept all button\n            document.querySelector(\".cm-banner-accept-all-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Config button\n            document.querySelector(\".cm-banner-config-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.showModal();\n            });\n        } catch (error) {\n            console.error(\"Can't set the event listener for the cookies banner. Can't find the HTML elements.\")\n        }\n\n    }\n\n\n\n\n    private generateBanner() {\n        return `\n                <div class=\"c-cookies-config-banner\">\n                    <div class=\"banner-container\">\n                        ${this.getBannerText()}\n                        <div class=\"banner-container__buttons\">\n                            ${this.getAcceptAllButton()}\n                            ${this.getSettingsButton()}\n                        </div>\n                    </div>\n                </div> \n                `;\n    }\n\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"banner-container__button banner-container__accept-all-btn cm-banner-accept-all-btn\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSettingsButton() {\n        return this.options.settingsButton.show ? `<button class=\"banner-container__button-link banner-container__config-btn cm-banner-config-btn\">${this.options.settingsButton.text}</button>` : \"\";\n    }\n\n    private getBannerText() {\n        return Utils.wrapString(this.options.bannerText, \"p\");\n    }\n\n    public injectBanner() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateWall());\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateBanner());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the banner.\");\n        }\n    }\n\n    private generateWall() {\n        const blur = this.options.wallBlur ? \"c-cookies-config-wall--blurred\" : \"\";\n        return `<div class=\"c-cookies-config-wall ${blur}\"></div>`;\n    }\n\n    public showWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.add(\"wall-show\");\n        } catch (error) {\n            console.error(\"Couldn't apply the background wall.\")\n        }\n    }\n\n    public hideWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.remove(\"wall-show\");\n        } catch (error) {\n            console.error(\"Unable to hide the background wall.\")\n        }\n    }\n\n    public hideScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"hidden\";\n        } catch (error) {\n            console.error(\"Unable to hide the scroll.\")\n        }\n    }\n\n    public showScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"auto\";\n        } catch (error) {\n            console.error(\"Unable to show the scroll.\")\n        }\n    }\n\n    public show() {\n        if (this.options.wall) {\n            this.showWall();\n        }\n        if (!this.options.wallScroll) {\n            this.hideScroll();\n        }\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner .banner-container\")!.classList.add(\"show-banner\");\n        } catch (error) {\n            console.error(\"Unable to show the banner.\")\n        }\n    }\n    public hide() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style.display = \"none\";\n        } catch (error) {\n            console.error(\"Unable to hide the banner.\")\n        }\n        this.hideWall();\n        this.showScroll();\n    }\n\n}\n\n\n\n\nexport interface BannerOptions {\n    bannerText: string;\n    wall: boolean,\n    wallScroll: boolean,\n    wallBlur: boolean,\n    inject: boolean,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    settingsButton: {\n        text: string,\n        show: boolean,\n    },\n    acceptRequiredOnlyButton: {\n        text: string,\n        show: boolean,\n    },\n    rejectAllButton: {\n        text: string,\n        show: boolean,\n    },\n}\n","import { CookiesManager } from './CookiesManager';\nexport class Modal {\n\n    private options: ModalOptions;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: ModalOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().modalOptions.inject) {\n            this.injectModal();\n        }\n        this.setEventListeners();\n    }\n\n\n    async show() {\n        try {\n            const modal = document.querySelector(\".c-cookies-config-modal\");\n            modal!.classList.add(\"show-modal\");\n            await new Promise(r => setTimeout(r, 10)); // This is to make the show animation work\n            const modalContainer = document.getElementById(\"modal-container\");\n            modalContainer!.classList.add('show-modal');\n            // Hide body scroll\n            document.querySelector(\"body\")!.style.overflow = \"hidden\";\n        } catch (error) {\n            console.error(\"Could not show cookie modal.\")\n            console.error(error)\n        }\n    }\n    hide() {\n        const modalContainer = document.getElementById('modal-container')\n        modalContainer!.classList.remove('show-modal')\n\n    }\n\n    setEventListeners() {\n\n        try {\n            var self = this;\n            // Modal close button\n            const closeBtn = document.querySelectorAll('.close-modal')\n            closeBtn.forEach(c => c.addEventListener('click', this.hide))\n\n            // Accept all button\n            const acceptAllBtn = document.querySelector('.cm-modal-accept-all')!;\n            acceptAllBtn.addEventListener('click', function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Save button\n            const saveButton = document.querySelector('.cm-modal-save')!;\n            saveButton.addEventListener('click', function () {\n                self.cookiesManager.injectScripts();\n                self.cookiesManager.hideBanner();\n                self.cookiesManager.saveButton();\n            });\n\n            // Switches\n            this.cookiesManager.getOptions().cookieCategories.forEach((category, index) => {\n                var checkbox = document.querySelector(`.cm-switch-${index}`)!;\n                checkbox.addEventListener('change', function () {\n                    if (this.checked) {\n                        category.checked = true;\n                    } else {\n                        category.checked = false;\n                    }\n                });\n            });\n        } catch (error) {\n            console.error(\"Could not set event listeners for cookie modal.\")\n        }\n    }\n\n    public injectModal() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateModal());\n            }\n        } catch (error) {\n            console.error(\"Could not inject cookie modal.\")\n        }\n    }\n\n    private generateCategoriesBlocks() {\n        let categoriesBlocks = \"\";\n        this.cookiesManager.getOptions().cookieCategories.forEach((element, index) => {\n            const disabled = element.required ? \"disabled\" : \"\";\n            const checked = element.required ? \"checked\" : \"\";\n            const block = `\n            <div class=\"cookie-category\">\n                <div class=\"cookie-category__header header\">\n                    <h2 class=\"header__title\">\n                        ${element.title}\n                    </h2>\n                    <div class=\"header__switch\">\n                    <label class=\"switch ${disabled}\">\n                        <input ${disabled} checked class=\"cm-switch-${index}\" type=\"checkbox\">\n                        <span class=\"slider round ${disabled}\"></span>\n                    </label>\n                    </div>\n                </div>\n            <div class=\"cookie-category__body body\">\n                <p>${element.description}</p>\n            </div>\n            </div>\n            `;\n            categoriesBlocks += block;\n        });\n        return categoriesBlocks;\n\n    }\n\n    getCloseButton() {\n        return this.options.closeButton.show ? `<div class=\"modal__close close-modal\" title=\"Close\"><div class=\"close-modal-img\"></div></div>` : \"\";\n    }\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"modal__button modal__button-width cm-modal-accept-all modal__button-accept-all\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSaveButton() {\n        return this.options.saveButton.show ? ` <button class=\"modal__button-link close-modal cm-modal-save modal__button-save-btn\"> ${this.options.saveButton.text} </button>` : \"\";\n    }\n\n    generateModal() {\n        return `\n        <div class=\"c-cookies-config-modal\">\n        <div class=\"modal__container\" id=\"modal-container\">\n          <div class=\"modal__content\">\n            ${this.getCloseButton()}\n            <h1 class=\"modal__title\">${this.options.title}</h1>\n            <p class=\"modal__description\">${this.options.description}</p>\n            <div class=\"modal__cookie-categories\">\n                ${this.generateCategoriesBlocks()}\n            </div>\n    \n            <div class=\"modal__footer\">\n             ${this.getAcceptAllButton()}\n             ${this.getSaveButton()}\n            </div>\n          </div>\n        </div>\n      </div>\n        `;\n    }\n\n}\n\nexport interface ModalOptions {\n    inject: boolean,\n    title: string,\n    description: string,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    saveButton: {\n        text: string,\n        show: boolean,\n    },\n    closeButton: {\n        text: string,\n        show: boolean,\n    },\n}"],"names":["Utils","ScriptType","encode","str","window","btoa","decode","a","atob","isHTML","RegExp","prototype","test","bind","match","wrapString","tag","this","deepEqual","x","y","_this","ok","Object","keys","tx","length","every","key","compareObjects","b","s","o","entries","sort","map","i","JSON","stringify","objectEquals","obj1","obj2","JSONstringifyOrder","obj","value","prepareObjectsForComparison","A","parse","B","forEach","element","checked","mergeRecursively","p","constructor","e","Banner","cookiesManager","options","banner","getOptions","bannerOptions","inject","injectBanner","setEventListeners","_proto","self","document","querySelector","addEventListener","acceptAllButton","showModal","error","console","generateBanner","getBannerText","getAcceptAllButton","getSettingsButton","show","text","settingsButton","bannerText","insertAdjacentHTML","generateWall","wallBlur","showWall","classList","add","hideWall","remove","hideScroll","style","overflow","showScroll","wall","wallScroll","hide","display","Modal","modalOptions","injectModal","_temp2","Promise","resolve","r","setTimeout","then","getElementById","_catch","querySelectorAll","c","injectScripts","hideBanner","saveButton","cookieCategories","category","index","generateModal","generateCategoriesBlocks","categoriesBlocks","disabled","required","title","description","getCloseButton","closeButton","getSaveButton","CookiesManager","modal","acceptAll","configChanged","Error","getDefaultOptions","localStorage","getItem","optionsComparison","getCookiesOptions","createModal","createBanner","getBanner","setBanner","getModal","setModal","saveCookieOptions","showBanner","hideModal","injectScript","src","async","createElement","setAttribute","body","appendChild","injectGTM","gtmCode","w","d","l","push","Date","getTime","event","f","getElementsByTagName","j","parentNode","insertBefore","dataLayer","init","askOnce","scripts","script","type","STANDARD","scriptSrc","base64Options","setItem","askOnChange","acceptRequiredOnlyButton","rejectAllButton"],"mappings":"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"}