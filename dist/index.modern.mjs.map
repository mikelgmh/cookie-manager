{"version":3,"file":"index.modern.mjs","sources":["../src/utils.ts","../src/Banner.ts","../src/Modal.ts","../src/CookiesManager.ts"],"sourcesContent":["\nexport class Utils {\n    public static encode(str) {\n        return window.btoa(str);\n    }\n    public static decode(a) {\n        return window.atob(a);\n    }\n    private static isHTML(str: string) {\n        var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n\n        // test isHTML regex\n        return str.match(isHTML);\n\n    }\n    public static wrapString(str: string, tag: string) {\n        if (this.isHTML(str)) {\n            return str;\n        }\n        return `<${tag}>${str}</${tag}>`;\n    }\n\n    public static deepEqual(x, y) {\n        const ok = Object.keys, tx = typeof x, ty = typeof y;\n        return x && y && tx === 'object' && tx === ty ? (\n            ok(x).length === ok(y).length &&\n            ok(x).every(key => this.deepEqual(x[key], y[key]))\n        ) : (x === y);\n    }\n\n    public static compareObjects(a, b) {\n        let s = (o) => Object.entries(o).sort().map(i => {\n            if (i[1] instanceof Object) i[1] = s(i[1]);\n            return i\n        })\n        return JSON.stringify(s(a)) === JSON.stringify(s(b))\n    }\n\n    public static objectEquals(obj1, obj2) {\n        const JSONstringifyOrder = obj => {\n            const keys = {};\n            JSON.stringify(obj, (key, value) => {\n                keys[key] = null;\n                return value;\n            });\n            return JSON.stringify(obj, Object.keys(keys).sort());\n        };\n        return JSONstringifyOrder(obj1) === JSONstringifyOrder(obj2);\n    }\n\n    public static prepareObjectsForComparison(obj1, obj2) {\n        var A = JSON.parse(JSON.stringify(obj1));\n        var B = JSON.parse(JSON.stringify(obj2));\n\n\n        A.forEach(element => {\n            element.checked = true;\n        });\n        B.forEach(element => {\n            element.checked = true;\n        });\n        return { A, B }\n    }\n\n    public static mergeRecursively(obj1, obj2) {\n        for (var p in obj2) {\n            try {\n                // Property in destination object set; update its value.\n                if (obj2[p].constructor == Object) {\n                    obj1[p] = this.mergeRecursively(obj1[p], obj2[p]);\n                } else {\n                    obj1[p] = obj2[p];\n                }\n            } catch (e) {\n                // Property in destination object not set; create it and set its value.\n                obj1[p] = obj2[p];\n            }\n        }\n        return obj1;\n    }\n}","import { Modal } from \"./Modal\";\nimport { Utils } from './utils';\nimport { CookiesManager } from './CookiesManager';\n\nexport class Banner {\n    private options: BannerOptions;\n    private banner: string;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: BannerOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().bannerOptions.inject) {\n            this.injectBanner();\n        }\n        if (cookiesManager.getOptions().bannerOptions.injectWall){\n            this.injectWall();\n        }\n        this.setEventListeners();\n    }\n\n    public setEventListeners() {\n        try {\n            let self = this;\n            // Accept all button\n            document.querySelector(\".cm-banner-accept-all-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Config button\n            document.querySelector(\".cm-banner-config-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.showModal();\n            });\n        } catch (error) {\n            console.error(\"Can't set the event listener for the cookies banner. Can't find the HTML elements.\")\n        }\n\n    }\n\n\n\n\n    private generateBanner() {\n        return `\n                <div class=\"c-cookies-config-banner\">\n                    <div class=\"banner-container\">\n                        ${this.getBannerText()}\n                        <div class=\"banner-container__buttons\">\n                            ${this.getAcceptAllButton()}\n                            ${this.getSettingsButton()}\n                        </div>\n                    </div>\n                </div> \n                `;\n    }\n\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"banner-container__button banner-container__accept-all-btn cm-banner-accept-all-btn\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSettingsButton() {\n        return this.options.settingsButton.show ? `<button class=\"banner-container__button-link banner-container__config-btn cm-banner-config-btn\">${this.options.settingsButton.text}</button>` : \"\";\n    }\n\n    private getBannerText() {\n        return Utils.wrapString(this.options.bannerText, \"p\");\n    }\n\n    private injectWall(){\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateWall());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the wall.\");\n        }\n    }\n\n    public injectBanner() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateBanner());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the banner.\");\n        }\n    }\n\n    private generateWall() {\n        const blur = this.options.wallBlur ? \"c-cookies-config-wall--blurred\" : \"\";\n        return `<div class=\"c-cookies-config-wall ${blur}\"></div>`;\n    }\n\n    public showWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.add(\"wall-show\");\n        } catch (error) {\n            console.error(\"Couldn't apply the background wall.\")\n        }\n    }\n\n    public hideWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.remove(\"wall-show\");\n        } catch (error) {\n            console.error(\"Unable to hide the background wall.\")\n        }\n    }\n\n    public hideScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"hidden\";\n            document.querySelector(\"html\")!.style.overflow = \"hidden\";\n        } catch (error) {\n            console.error(\"Unable to hide the scroll.\")\n        }\n    }\n\n    public showScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"auto\";\n            document.querySelector(\"html\")!.style.overflow = \"auto\";\n        } catch (error) {\n            console.error(\"Unable to show the scroll.\")\n        }\n    }\n\n    public show() {\n        if (this.options.wall) {\n            this.showWall();\n        }\n        if (!this.options.wallScroll) {\n            this.hideScroll();\n        }\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner .banner-container\")!.classList.add(\"show-banner\");\n        } catch (error) {\n            console.error(\"Unable to show the banner.\")\n        }\n    }\n    public hide() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style.display = \"none\";\n        } catch (error) {\n            console.error(\"Unable to hide the banner.\")\n        }\n        this.hideWall();\n        this.showScroll();\n    }\n\n}\n\n\n\n\nexport interface BannerOptions {\n    bannerText: string;\n    wall: boolean,\n    injectWall: boolean,\n    wallScroll: boolean,\n    wallBlur: boolean,\n    inject: boolean,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    settingsButton: {\n        text: string,\n        show: boolean,\n    },\n    acceptRequiredOnlyButton: {\n        text: string,\n        show: boolean,\n    },\n    rejectAllButton: {\n        text: string,\n        show: boolean,\n    },\n}\n","import { CookieCategory, CookiesManager } from './CookiesManager';\nexport class Modal {\n\n    private options: ModalOptions;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: ModalOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().modalOptions.inject) {\n            this.injectModal();\n        }\n        this.setEventListeners();\n    }\n\n\n    async show() {\n        try {\n            // Check if there's already any option saved\n            // if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            //     //const options: CookieCategory = this.cookiesManager.getCookiesOptions();\n            //     alert(\"W\")\n            // }\n            const modal = document.querySelector(\".c-cookies-config-modal\");\n            modal!.classList.add(this.options.showModalClass);\n            await new Promise(r => setTimeout(r, 10)); // This is to make the show animation work\n            // Toggle accordions after showing modal\n            var acc = document.getElementsByClassName(\"cm-accordion\");\n            var i;\n            var self = this;\n            for (i = 0; i < acc.length; i++) {\n                if (acc[i].classList.contains(\"cm-active-on-load\")) {\n                    acc[i].classList.remove(\"cm-active-on-load\");\n                    await new Promise(r => setTimeout(r, 100)); // This is to make the show animation work\n                    self.toggleAccordion(acc[i]);\n                }\n                  \n            }\n       \n            const modalContainer = document.getElementById(\"modal-container\");\n            modalContainer!.classList.add(this.options.showModalClass);\n            // Hide body scroll\n            document.querySelector(\"body\")!.style.overflow = \"hidden\";\n            document.querySelector(\"html\")!.style.overflow = \"hidden\";\n        } catch (error) {\n            console.error(\"Could not show cookie modal.\")\n            console.error(error)\n        }\n    }\n    hide(self?: Modal) { // Destucted object, so we can access this context\n        const modalContainer = document.getElementById('modal-container');\n        modalContainer!.classList.remove(this.options.showModalClass);\n        // If banner is not shown, show scroll\n        const bannerContainer = document.querySelector(\".c-cookies-config-banner .banner-container\");\n        if (bannerContainer?.classList.contains(\"show-banner\") == false) {\n            this.cookiesManager.getBanner().showScroll();\n        }\n\n    }\n\n    setEventListeners() {\n\n        try {\n            var self = this;\n            // Modal close button\n            const closeBtn = document.querySelectorAll('.close-modal')\n            closeBtn.forEach(c => c.addEventListener('click', () => {\n                this.hide(self);\n            }))\n\n            // Accept all button\n            const acceptAllBtn = document.querySelector('.cm-modal-accept-all')!;\n            acceptAllBtn.addEventListener('click', function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Save button\n            const saveButton = document.querySelector('.cm-modal-save')!;\n            saveButton.addEventListener('click', function () {\n                self.cookiesManager.injectScripts();\n                self.cookiesManager.hideBanner();\n                self.cookiesManager.saveButton();\n            });\n\n            // Switches\n            this.cookiesManager.getOptions().cookieCategories.forEach((category: CookieCategory, index) => {\n                var checkbox = document.querySelector(`.cm-switch-${index}`)!;\n                checkbox.addEventListener('change', function () {\n                    if (this.checked) {\n                        category.checked = true;\n                    } else {\n                        category.checked = false;\n                    }\n                });\n            });\n\n            // Set accordion toggle on click\n            var acc = document.getElementsByClassName(\"cm-accordion\");\n            var i;\n            var self = this;\n            for (i = 0; i < acc.length; i++) {\n                acc[i].addEventListener(\"click\", function () {\n                    self.toggleAccordion(this);\n                });\n            }\n\n\n        } catch (error) {\n            console.error(\"Could not set event listeners for cookie modal.\")\n        }\n    }\n\n    private async toggleAccordion(element) {\n        element.classList.toggle(\"cm-active\");\n        var panel = element.nextElementSibling;\n        if (panel.style.maxHeight) {\n            panel.style.maxHeight = null;\n        } else {\n            panel.style.maxHeight = panel.scrollHeight + \"px\";\n        }\n    }\n\n    public injectModal() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateModal());\n            }\n        } catch (error) {\n            console.error(\"Could not inject cookie modal.\")\n        }\n    }\n\n    private generateCategoriesBlocks() {\n        let categoriesBlocks = \"\";\n        let cookieCategories = this.cookiesManager.getOptions().cookieCategories;\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            cookieCategories = this.cookiesManager.getCookiesOptions();\n        }\n        cookieCategories.forEach((element, index) => {\n            const disabled = element.required ? \"disabled\" : \"\";\n            const checked = element.checked ? \"checked\" : \"\";\n            const accordionClass = element.accordion.enable ? \"cm-accordion\" : \"\";\n            const accordionPanel = element.accordion.enable ? \"cm-panel\" : \"\";\n            const activeAccordion = element.accordion.active ? \"cm-active-on-load\" : \"\";\n            const accordionChevron = element.accordion.enable ? \"<div class='cc-header__left'></div>\" : \"\";\n            const boxedHeader = element.boxedHeader ? \"cm-boxed\" : \"\";\n            const boxedBody = element.boxedBody ? \"cookie-category__body--boxed\" : \"\";\n            // const boxedHeaderMArgin = element.accordion.active ? \"\" : \"no-chevron\";\n            const block = `\n            <div class=\"cookie-category\">\n                <div class=\"cookie-category__header cc-header ${accordionClass} ${boxedHeader} ${activeAccordion}\">\n                    ${accordionChevron}\n                    <div class=\"cc-header__right\">\n                        <h2 class=\"header__title\">\n                            ${element.title}\n                        </h2>\n                        <div class=\"header__switch\">\n                            <label class=\"switch ${disabled}\">\n                                <input ${disabled} ${checked} class=\"cm-switch-${index}\" type=\"checkbox\">\n                                <span class=\"slider round ${disabled}\"></span>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"cookie-category__body body ${boxedBody} ${accordionPanel}\">\n                    <p>${element.description}</p>\n                </div>\n            </div>\n            `;\n            categoriesBlocks += block;\n        });\n        return categoriesBlocks;\n\n    }\n\n    getCloseButton() {\n        return this.options.closeButton.show ? `<div class=\"modal__close close-modal\" title=\"Close\"><div class=\"close-modal-img\"></div></div>` : \"\";\n    }\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"modal__button modal__button-width cm-modal-accept-all modal__button-accept-all\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSaveButton() {\n        return this.options.saveButton.show ? ` <button class=\"modal__button-link close-modal cm-modal-save modal__button-save-btn\"> ${this.options.saveButton.text} </button>` : \"\";\n    }\n\n    generateModal() {\n        return `\n        <div class=\"c-cookies-config-modal\">\n        <div class=\"modal__container\" id=\"modal-container\">\n          <div class=\"modal__content\">\n            ${this.getCloseButton()}\n            <h1 class=\"modal__title\">${this.options.title}</h1>\n            <p class=\"modal__description\">${this.options.description}</p>\n            <div class=\"modal__cookie-categories\">\n                ${this.generateCategoriesBlocks()}\n            </div>\n    \n            <div class=\"modal__footer\">\n             ${this.getAcceptAllButton()}\n             ${this.getSaveButton()}\n            </div>\n          </div>\n        </div>\n      </div>\n        `;\n    }\n\n}\n\nexport interface ModalOptions {\n    inject: boolean,\n    title: string,\n    description: string,\n    showModalClass: string,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    saveButton: {\n        text: string,\n        show: boolean,\n    },\n    closeButton: {\n        text: string,\n        show: boolean,\n    },\n}","\nimport { Banner, BannerOptions } from \"./Banner\";\nimport { ModalOptions, Modal } from './Modal';\nimport \"./scss/styles.scss\";\nimport { Utils } from './utils';\n\ninterface cookieCatergoryCallbackInterface {\n    (CookieCategory: CookieCategory): void;\n}\nexport class CookiesManager {\n\n    // var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n    private modalOptions: Options;\n    private banner: Banner;\n    private modal: Modal;\n    private acceptAll: boolean = false;\n    private configChanged: boolean = false;\n    private onCookieCategoryChange: cookieCatergoryCallbackInterface;\n\n\n    public getBanner(): Banner {\n        return this.banner;\n    }\n\n    public setBanner(banner: Banner): void {\n        this.banner = banner;\n    }\n\n    public getModal(): Modal {\n        return this.modal;\n    }\n\n    public setModal(modal: Modal): void {\n        this.modal = modal;\n    }\n\n    public getOptions(): Options {\n        return this.modalOptions;\n    }\n\n    public on(listener, callback: cookieCatergoryCallbackInterface) {\n        if (listener == \"onCookieCategoryChange\") {\n            this.onCookieCategoryChange = callback;\n        }\n    }\n\n    constructor(options: Options) {\n        if (options == null) {\n            throw new Error(\"Options for CookiesManager cannot be null.\");\n        } else {\n            if (options.cookieCategories == null) {\n                throw new Error(\"You should provide at least one cookie category\");\n            }\n            // Set all cookie categories as checked by default. Set default value for cookie category\n            const mergedCategories = new Array<CookieCategory>;\n            options.cookieCategories.forEach(category => {\n                category.checked = true;\n                mergedCategories.push(Utils.mergeRecursively(this.getDefaultCookieCategoryOptions(), category));\n            });\n            options.cookieCategories = mergedCategories;\n            // Merge the default options with user options\n            options = Utils.mergeRecursively(this.getDefaultOptions(), options);\n            this.modalOptions = options;\n            this.constructorInitializationFunction(options);\n        }\n    }\n\n    private constructorInitializationFunction(options) {\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) { // If there's already configuration saved\n            // Prepare the options to compare them.\n            var optionsComparison = Utils.prepareObjectsForComparison(this.modalOptions.cookieCategories, this.getCookiesOptions());\n\n            // Check if the options in localStorage and the options from the constructor are the same\n            if (Utils.objectEquals(optionsComparison.A, optionsComparison.B)) {\n                // If the options are the same, just inject the scripts\n                this.modalOptions.cookieCategories = this.getCookiesOptions();\n\n            } else {\n                localStorage.removeItem(\"cookiesManagerOptions\");\n                // If the options are different, set the configChanged to true\n                // We are in the constructor. By setting this to true, it might show the banner and modal if the user has set askOnChange to true\n                this.configChanged = true;\n            }\n        }\n\n        // Generate modal\n        if (options.modalOptions != null) {\n\n            this.createModal(options.modalOptions);\n\n        }\n\n        if (options.bannerOptions != null) {\n            this.createBanner(options.bannerOptions);\n\n        }\n    }\n\n    public setEventListeners() {\n        this.modal.setEventListeners();\n        this.banner.setEventListeners();\n\n    }\n\n    public createBanner(options: BannerOptions) {\n        this.banner = new Banner(this, options);\n        return this.banner;\n    }\n    public createModal(options: ModalOptions) {\n        this.modal = new Modal(this, options);\n        return this.modal;\n    }\n\n    public acceptAllButton() {\n        this.getOptions().cookieCategories.forEach((cookieCategory: CookieCategory) => {\n            cookieCategory.checked = true;\n        })\n        this.acceptAll = true;\n        this.modal.hide();\n        this.banner.hide();\n        this.injectScripts();\n        this.saveCookieOptions();\n    }\n\n    public showModal() {\n        this.modal.show();\n    }\n\n    public showBanner() {\n        this.banner.show();\n    }\n\n    public hideBanner() {\n        this.banner.hide();\n    }\n\n    public hideModal() {\n        this.modal.hide();\n    }\n\n    private injectScript(src: string, async = false) {\n        var s = document.createElement('script');\n        s.setAttribute('src', src);\n        s.async = async;\n        document.body.appendChild(s);\n    }\n\n    private injectGTM(gtmCode: string) {\n        try {\n            (function (w, d, s, l, i) {\n                w[l] = w[l] || [];\n                w[l].push({\n                    'gtm.start': new Date().getTime(),\n                    event: 'gtm.js',\n                });\n                const f = d.getElementsByTagName(s)[0];\n                const j = d.createElement(s) as HTMLInputElement;\n                const\n                    dl = l != 'dataLayer' ? `&l=${l}` : '';\n                //j.async = true;\n                j.src = `https://www.googletagmanager.com/gtm.js?id=${i}${dl}`;\n                f.parentNode!.insertBefore(j, f);\n            }(window, document, 'script', 'dataLayer', gtmCode));\n            (window as any).dataLayer = (window as any).dataLayer || [];\n        } catch (error) {\n            console.error(\"Couldn't inject GTM.\")\n        }\n    }\n\n    public async init(banner: boolean, modal: boolean) {\n        if (this.modalOptions.askOnce) {\n            if (localStorage.getItem(\"cookiesManagerOptions\") == null || this.configChanged) {\n                await this.initShow(banner, modal)\n            } // There's no else, as if cookiesManagerOptions was not null, the constructor would do the job.\n        } else {\n            await this.initShow(banner, modal)\n        }\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            this.injectScripts();\n        }\n    }\n\n    public async initShow(banner: boolean, modal: boolean) {\n        if (this.modalOptions.delay > 0) {\n            await new Promise(r => setTimeout(r, this.modalOptions.delay)); // This is to make the show animation work\n        }\n        if (banner) {\n            this.showBanner();\n        }\n        if (modal) {\n            this.showModal();\n        }\n    }\n\n    public injectScripts() {\n        try {\n\n            this.modalOptions.cookieCategories.forEach(category => {\n                if (this.onCookieCategoryChange != null) {\n                    this.onCookieCategoryChange(category);\n                }\n                if (category.checked || this.acceptAll) {\n                    category.scripts.forEach(script => {\n                        if (script[\"type\"] == ScriptType.STANDARD || script[\"type\"] == null) {\n                            if (script[\"scriptSrc\"] != null) {\n                                this.injectScript(script[\"scriptSrc\"], script[\"async\"])\n                            }\n                        } else {\n                            if (script[\"gtmCode\"] != null) {\n                                this.injectGTM(script[\"gtmCode\"]);\n                            } else {\n                                throw new Error(\"You should provide a gtmCode for the script\");\n                            }\n                        }\n                    });\n                }\n            });\n        } catch (error) {\n            console.error(`Couldn't inject scripts: ${error}`)\n        }\n    }\n\n    saveButton() {\n        this.saveCookieOptions();\n    }\n\n    saveCookieOptions() {\n        const base64Options = Utils.encode(JSON.stringify(this.modalOptions.cookieCategories));\n        localStorage.setItem(\"cookiesManagerOptions\", base64Options);\n    }\n\n    getCookiesOptions(): any {\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            return JSON.parse(Utils.decode(localStorage.getItem(\"cookiesManagerOptions\")));\n        }\n        return {};\n    }\n\n    private getDefaultCookieCategoryOptions(): CookieCategory {\n        return {\n            title: \"Cookie Category Example\",\n            description: \"Cookie category description\",\n            required: false,\n            checked: true,\n            accordion: {\n                enable: false,\n                enableOnDescriptionLength: 45,\n                active: false,\n            },\n            boxedHeader: false,\n            boxedBody: false,\n            scripts: []\n        }\n    }\n    private getDefaultOptions(): Options {\n        return {\n            askOnce: true,\n            delay: 0,\n            askOnChange: true,\n            initOnDomContentLoaded: true,\n            modalOptions: {\n                title: \"Cookie settings\",\n                description: \"Change the settings for the cookies here.\",\n                inject: true,\n                showModalClass: \"show-modal\",\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                saveButton: {\n                    text: 'Save',\n                    show: true,\n                },\n                closeButton: {\n                    text: 'Close',\n                    show: true,\n                },\n            },\n            bannerOptions: {\n                inject: true,\n                injectWall: true,\n                wall: true,\n                wallScroll: false,\n                wallBlur: true,\n                bannerText: 'This website uses cookies to ensure you get the best experience on our website.',\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                settingsButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n                acceptRequiredOnlyButton: {\n                    text: 'Configuración',\n                    show: false,\n                },\n                rejectAllButton: {\n                    text: 'Configuración',\n                    show: false,\n                }\n            },\n            cookieCategories: [],\n        }\n    }\n\n\n\n}\n\nexport interface Options {\n    cookieCategories: Array<CookieCategory>,\n    initOnDomContentLoaded: boolean,\n    bannerOptions: BannerOptions,\n    modalOptions: ModalOptions,\n    askOnce: boolean,\n    askOnChange: boolean,\n    delay: number,\n}\n\nexport interface CookieCategory {\n    title: string,\n    description: string,\n    required: boolean,\n    checked: boolean,\n    accordion: Accordion,\n    boxedHeader: boolean,\n    boxedBody: boolean,\n    scripts: [\n        {\n            type: ScriptType,\n            gtmCode: string,\n            scriptSrc: string,\n            async: boolean,\n        }\n    ] | []\n}\n\nexport interface Accordion {\n    enable: boolean,\n    enableOnDescriptionLength: number,\n    active: boolean,\n}\n\nexport enum ScriptType {\n    GTM,\n    STANDARD\n}"],"names":["Utils","static","str","window","btoa","a","atob","isHTML","RegExp","prototype","test","bind","match","tag","this","x","y","ok","Object","keys","tx","length","every","key","deepEqual","b","s","o","entries","sort","map","i","JSON","stringify","obj1","obj2","JSONstringifyOrder","obj","value","A","parse","B","forEach","element","checked","p","constructor","mergeRecursively","e","Banner","cookiesManager","options","banner","getOptions","bannerOptions","inject","injectBanner","injectWall","setEventListeners","self","document","querySelector","addEventListener","acceptAllButton","showModal","error","console","generateBanner","getBannerText","getAcceptAllButton","getSettingsButton","show","text","settingsButton","wrapString","bannerText","insertAdjacentHTML","generateWall","wallBlur","showWall","classList","add","hideWall","remove","hideScroll","style","overflow","showScroll","wall","wallScroll","hide","display","modalOptions","injectModal","async","showModalClass","r","setTimeout","acc","getElementsByClassName","contains","Promise","toggleAccordion","getElementById","bannerContainer","getBanner","querySelectorAll","c","injectScripts","hideBanner","saveButton","cookieCategories","category","index","toggle","panel","nextElementSibling","maxHeight","scrollHeight","generateModal","generateCategoriesBlocks","categoriesBlocks","localStorage","getItem","getCookiesOptions","disabled","required","accordion","enable","boxedHeader","active","title","boxedBody","description","getCloseButton","closeButton","getSaveButton","setBanner","getModal","modal","setModal","on","listener","callback","onCookieCategoryChange","acceptAll","configChanged","Error","mergedCategories","Array","push","getDefaultCookieCategoryOptions","getDefaultOptions","constructorInitializationFunction","optionsComparison","prepareObjectsForComparison","objectEquals","removeItem","createModal","createBanner","Modal","cookieCategory","saveCookieOptions","showBanner","hideModal","injectScript","src","createElement","setAttribute","body","appendChild","injectGTM","gtmCode","w","d","l","Date","getTime","event","f","getElementsByTagName","j","parentNode","insertBefore","dataLayer","askOnce","initShow","delay","scripts","script","ScriptType","STANDARD","base64Options","encode","setItem","decode","enableOnDescriptionLength","askOnChange","initOnDomContentLoaded","acceptRequiredOnlyButton","rejectAllButton"],"mappings":"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"}