{"version":3,"file":"index.modern.mjs","sources":["../src/utils.ts","../src/Banner.ts","../src/Modal.ts","../src/CookiesManager.ts"],"sourcesContent":["export class Utils {\n    public static isHTML(str: string) {\n        var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n\n        // test isHTML regex\n        return str.match(isHTML);\n\n    }\n    public static wrapString(str: string, tag: string) {\n        return `<${tag}>${str}</${tag}>`;\n    }\n}","import { Modal } from \"./Modal\";\nimport { Utils } from \"./utils\";\nimport { CookiesManager } from './CookiesManager';\n\nexport class Banner {\n    private options: BannerOptions;\n    private banner: string;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: BannerOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        console.log(\"Setting options:\")\n        console.log(options)\n        this.injectBanner();\n        this.setEventListeners();\n    }\n\n    private setEventListeners() {\n        let self = this;\n        // Accept all button\n        document.querySelector(\".banner-container__accept-all-btn\")!.addEventListener(\"click\", function () {\n            self.cookiesManager.acceptAllButton();\n        });\n\n        // Config button\n        document.querySelector(\".banner-container__config-btn\")!.addEventListener(\"click\", function () {\n            self.options.settingsButton.modal.show();\n        });\n\n    }\n\n\n\n\n    private generateBanner() {\n        return `\n                <div class=\"c-cookies-config-banner\">\n            <div class=\"banner-container\">\n            ${this.getBannerText()}\n            <div class=\"banner-container__buttons\">\n                <button class=\"banner-container__button banner-container__accept-all-btn\">${this.getAcceptAllButtonText()}</button>\n                <button class=\"banner-container__button-link banner-container__config-btn\">Configurar</button>\n            </div>\n            </div>\n        </div> \n        `;\n    }\n    private getBannerText() {\n\n        if (this.options.bannerText != undefined) {\n            if (Utils.isHTML(this.options.bannerText)) {\n                return this.options.bannerText;\n            }\n            // Else return wrapped\n            return Utils.wrapString(this.options.bannerText, \"p\");\n        }\n        return `\n                <p>Utilizamos cookies propias y de terceros para analizar el tráfico en nuestra web mediante la obtención de los\n                        datos necesarios para estudiar tu navegación. Puedes obtener más información en la Política de Cookies. Puedes\n                        aceptar todas las cookies pulsando el botón “Aceptar\" o configurarlas o rechazar su uso pulsando en\n                        \"Configurar\".</p>\n                `;\n    }\n    private getAcceptAllButtonText() {\n        console.log(\"Get banner text\")\n\n        if (this.options.acceptAllButton.text != undefined) {\n\n            // Else return wrapped\n            return this.options.acceptAllButton.text;\n        }\n        return `Aceptar todo`;\n    }\n\n    public injectBanner() {\n        if (document.querySelector(\"body\") != null) {\n\n            document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateBanner());\n        }\n    }\n\n    public showWall() {\n        const wall = '<div class=\"c-cookies-config-wall\"></div>';\n        document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", wall);\n\n    }\n\n    public hideWall() {\n        const test = document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!;\n        test.style.display = \"none\";\n    }\n\n    public hideScroll() {\n        document.querySelector(\"body\")!.style.overflow = \"hidden\";\n    }\n\n    public showScroll() {\n        document.querySelector(\"body\")!.style.overflow = \"auto\";\n    }\n\n    public show() {\n        //document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style(\"display\", \"blockxº\");\n        if (this.options.wall) {\n            this.showWall();\n        }\n        if (!this.options.wallScroll) {\n            this.hideScroll();\n        }\n        const test = document.querySelector<HTMLElement>(\".c-cookies-config-banner .banner-container\")!;\n        test.classList.add(\"show-banner\");\n    }\n    public hide() {\n        const test = document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!;\n        test.style.display = \"none\";\n        this.hideWall();\n        this.showScroll();\n        // document.querySelector(\".c-cookies-config-banner\")!.style(\"display\", \"none\");\n        // Array.from(document.querySelector(\".c-cookies-config-banner\") as unknown as HTMLCollectionOf<HTMLElement>);\n    }\n}\n\n\n\n\nexport interface BannerOptions {\n    bannerText: string;\n    wall: boolean,\n    wallScroll: boolean,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    settingsButton: {\n        text: string,\n        show: boolean,\n        modal: Modal,\n    },\n    acceptRequiredOnlyButton: {\n        text: string,\n        show: boolean,\n    },\n    rejectAllButton: {\n        text: string,\n        show: boolean,\n    },\n}\n","import { CookiesManager } from './CookiesManager';\nexport class Modal {\n\n    private options: ModalOptions;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: ModalOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        this.injectModal();\n        this.setEventListeners();\n    }\n\n\n    show() {\n        const modalContainer = document.getElementById(\"modal-container\");\n        modalContainer!.classList.add('show-modal');\n        // Hide body scroll\n        document.querySelector(\"body\")!.style.overflow = \"hidden\";\n    }\n    hide() {\n        const modalContainer = document.getElementById('modal-container')\n        modalContainer!.classList.remove('show-modal')\n\n    }\n\n    setEventListeners() {\n\n        var self = this;\n        // Close modal\n        const closeBtn = document.querySelectorAll('.close-modal')\n        closeBtn.forEach(c => c.addEventListener('click', this.hide))\n\n        // Accept all btn\n        // Estos listeners deberían settearse en CookiesManager probablemente, porque va a haber que llamar métodos de ahí. O eso o Modal debería tener la instancia de CookiesManager.\n        const acceptAllBtn = document.querySelectorAll('.modal__button-accept-all')\n\n        acceptAllBtn.forEach(function (item) {\n            item.addEventListener('click', function () {\n                self.cookiesManager.acceptAllButton();\n            });\n        });\n\n        // Save button\n        const saveButton = document.querySelectorAll('.modal__button-save-btn')\n\n        saveButton.forEach(function (item) {\n            item.addEventListener('click', function () {\n               self.cookiesManager.injectScripts();\n                self.cookiesManager.hideBanner();\n                self.cookiesManager.saveButton();\n            });\n        });\n\n        // Switches\n        this.cookiesManager.getOptions().cookieCategories.forEach((category, index) => {\n\n            var checkbox = document.querySelector(`.cm-switch-${index}`)!;\n            checkbox.addEventListener('change', function () {\n                if (this.checked) {\n                    category.checked = true;\n                } else {\n                    category.checked = false;\n                }\n            });\n\n        });\n\n\n    }\n\n    public injectModal() {\n        if (document.querySelector(\"body\") != null) {\n            document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateModal());\n        }\n    }\n\n    private generateCategoriesBlocks() {\n        let categoriesBlocks = \"\";\n        this.cookiesManager.getOptions().cookieCategories.forEach((element, index) => {\n            const disabled = element.required ? \"disabled\" : \"\";\n            const checked = element.required ? \"checked\" : \"\";\n            const block = `\n            <div class=\"cookie-category\">\n                <div class=\"cookie-category__header header\">\n                    <h2 class=\"header__title\">\n                    ${element.title}\n                    </h2>\n                    <div class=\"header__switch\">\n                    <label class=\"switch ${disabled}\">\n                        <input ${disabled} checked class=\"cm-switch-${index}\" type=\"checkbox\">\n                        <span class=\"slider round\"></span>\n                    </label>\n                    </div>\n                </div>\n            <div class=\"cookie-category__body body\">\n                <p>${element.description}</p>\n            </div>\n            </div>\n            `\n            categoriesBlocks += block;\n        });\n        return categoriesBlocks;\n\n    }\n\n    generateModal() {\n        return `\n        <div class=\"c-cookies-config-modal\">\n        <div class=\"modal__container\" id=\"modal-container\">\n          <div class=\"modal__content\">\n            <div class=\"modal__close close-modal\" title=\"Close\">\n              <img class=\"close-modal-img\" src=\"images/content/close.svg\" alt=\"Webpack 5 Template Boilerplate\">\n            </div>\n    \n            <img src=\"assets/img/star-trophy.png\" alt=\"\" class=\"modal__img\">\n    \n            <h1 class=\"modal__title\">Configuración de cookies</h1>\n            <p class=\"modal__description\">Configura aquí tus cookies.</p>\n            <div class=\"modal__cookie-categories\">\n                ${this.generateCategoriesBlocks()}\n            </div>\n    \n            <div class=\"modal__footer\">\n              <button class=\"modal__button modal__button-width modal__button-accept-all\">\n                Aceptar todas\n              </button>\n    \n              <button class=\"modal__button-link close-modal modal__button-save-btn\">\n                Guardar\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n        `;\n    }\n\n}\n\nexport interface ModalOptions {\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    saveButton: {\n        text: string,\n        show: boolean,\n    },\n    closeButton: {\n        text: string,\n        show: boolean,\n    },\n}","\nimport { Banner, BannerOptions } from \"./Banner\";\nimport { ModalOptions, Modal } from './Modal';\nimport \"./scss/styles.scss\";\nexport class CookiesManager {\n\n    // var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n    private modalOptions: Options;\n    private banner: Banner;\n    private modal: Modal;\n    private acceptAll: boolean = false;\n\n\n    public getBanner(): Banner {\n        return this.banner;\n    }\n\n    public setBanner(banner: Banner): void {\n        this.banner = banner;\n    }\n\n    public getModal(): Modal {\n        return this.modal;\n    }\n\n    public setModal(modal: Modal): void {\n        this.modal = modal;\n    }\n\n    public getOptions(): Options {\n        return this.modalOptions;\n    }\n\n\n    constructor(options: Options) {\n        if (options == null) {\n            throw new Error(\"Options cannot be null\");\n        } else {\n            options.cookieCategories.forEach(category => {\n                category.checked = true;\n            });\n            this.modalOptions = options;\n            // Check options to create banner and modal\n\n            // Generate modal\n            if (options.modalOptions != null) {\n                this.createModal(options.modalOptions);\n            }\n\n\n            if (options.bannerOptions != null) {\n                if (options.modalOptions != null) {\n                    options.bannerOptions.settingsButton.modal = this.modal; // The modal was already created\n                }\n                this.createBanner(options.bannerOptions);\n            }\n\n        }\n\n    }\n\n\n    public createBanner(options: BannerOptions) {\n        this.banner = new Banner(this, options);\n        return this.banner;\n    }\n    public createModal(options: ModalOptions) {\n        this.modal = new Modal(this, options);\n        return this.modal;\n    }\n\n    public acceptAllButton() {\n        this.acceptAll = true;\n        this.modal.hide();\n        this.banner.hide();\n        this.injectScripts();\n        this.setCookie();\n    }\n\n    public showModal() {\n        this.modal.show();\n    }\n\n    public showBanner() {\n        this.banner.show();\n    }\n\n    public hideBanner() {\n        this.banner.hide();\n    }\n\n    public hideModal() {\n        this.modal.hide();\n    }\n\n    private injectScript(src: string, async) {\n        var s = document.createElement('script');\n        s.setAttribute('src', src);\n        s.async = async;\n        document.body.appendChild(s);\n    }\n\n    public init(banner: boolean, modal: boolean) {\n        if (this.modalOptions.askOnce) {\n            if (this.readCookie() != \"true\") {\n                if (banner) {\n                    this.showBanner();\n                }\n                if (modal) {\n                    this.showModal();\n                }\n            }\n        } else {\n\n            if (banner) {\n                this.showBanner();\n            }\n            if (modal) {\n                this.showModal();\n            }\n           \n        }\n    }\n\n    public injectScripts() {\n        this.modalOptions.cookieCategories.forEach(category => {\n\n            if (category.checked || this.acceptAll) {\n                category.scripts.forEach(script => {\n                    console.log(\"injecting script: \" + script.scriptSrc);\n                    this.injectScript(script.scriptSrc, script.async)\n\n                });\n            }\n        });\n    }\n\n    saveButton(){\n        this.setCookie();\n    }\n\n    setCookie(name = \"analyticsCookie\", value = true, days = 365) {\n        let expires;\n        if (days) {\n            const date = new Date();\n            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n            expires = `; expires=${date.toUTCString()}`;\n        } else {\n            expires = '';\n        }\n        document.cookie = `${encodeURIComponent(name)}=${encodeURIComponent(value)}${expires}; path=/`;\n    }\n\n    readCookie(name = \"analyticsCookie\") {\n        const nameEQ = `${encodeURIComponent(name)}=`;\n        const ca = document.cookie.split(';');\n        for (let i = 0; i < ca.length; i++) {\n            let c = ca[i];\n            while (c.charAt(0) === ' ') c = c.substring(1, c.length);\n            if (c.indexOf(nameEQ) === 0) return decodeURIComponent(c.substring(nameEQ.length, c.length));\n        }\n        return null;\n        // if (readCookie(\"analyticCookie\") === \"true\") {\n        //     launchAnalytics();\n        // }\n    }\n\n}\n\nexport interface Options {\n    cookieCategories: [\n        {\n            title: string,\n            description: string,\n            required: boolean,\n            checked: boolean,\n            scripts: [\n                {\n                    type: ScriptType,\n                    gtmCode: string,\n                    scriptSrc: string,\n                    async: boolean,\n                }\n            ]\n        }\n    ],\n    bannerOptions: BannerOptions,\n    modalOptions: ModalOptions,\n    askOnce: boolean,\n}\n\nexport enum ScriptType {\n    GTM,\n    STANDARD\n}"],"names":["static","str","RegExp","prototype","test","bind","match","isHTML","tag","Banner","constructor","cookiesManager","options","banner","this","console","log","injectBanner","setEventListeners","self","document","querySelector","addEventListener","acceptAllButton","settingsButton","modal","show","generateBanner","getBannerText","getAcceptAllButtonText","undefined","bannerText","Utils","wrapString","text","insertAdjacentHTML","showWall","hideWall","style","display","hideScroll","overflow","showScroll","wall","wallScroll","classList","add","hide","Modal","injectModal","getElementById","remove","querySelectorAll","forEach","c","item","injectScripts","hideBanner","saveButton","getOptions","cookieCategories","category","index","checked","generateModal","generateCategoriesBlocks","categoriesBlocks","element","disabled","required","title","description","CookiesManager","getBanner","setBanner","getModal","setModal","modalOptions","acceptAll","Error","createModal","bannerOptions","createBanner","setCookie","showModal","showBanner","hideModal","injectScript","src","async","s","createElement","setAttribute","body","appendChild","init","askOnce","readCookie","scripts","script","scriptSrc","name","value","days","expires","date","Date","setTime","getTime","toUTCString","cookie","encodeURIComponent","nameEQ","ca","split","i","length","charAt","substring","indexOf","decodeURIComponent","ScriptType"],"mappings":"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"}