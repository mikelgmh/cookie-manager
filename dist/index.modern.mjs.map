{"version":3,"file":"index.modern.mjs","sources":["../src/utils.ts","../src/Banner.ts","../src/Modal.ts","../src/CookiesManager.ts"],"sourcesContent":["\nexport class Utils {\n    public static encode(str) {\n        return window.btoa(str);\n    }\n    public static decode(a) {\n        return window.atob(a);\n    }\n    private static isHTML(str: string) {\n        var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n\n        // test isHTML regex\n        return str.match(isHTML);\n\n    }\n    public static wrapString(str: string, tag: string) {\n        if (this.isHTML(str)) {\n            return str;\n        }\n        return `<${tag}>${str}</${tag}>`;\n    }\n\n    public static deepEqual(x, y) {\n        const ok = Object.keys, tx = typeof x, ty = typeof y;\n        return x && y && tx === 'object' && tx === ty ? (\n            ok(x).length === ok(y).length &&\n            ok(x).every(key => this.deepEqual(x[key], y[key]))\n        ) : (x === y);\n    }\n\n    public static compareObjects(a, b) {\n        let s = (o) => Object.entries(o).sort().map(i => {\n            if (i[1] instanceof Object) i[1] = s(i[1]);\n            return i\n        })\n        return JSON.stringify(s(a)) === JSON.stringify(s(b))\n    }\n\n    public static objectEquals(obj1, obj2) {\n        const JSONstringifyOrder = obj => {\n            const keys = {};\n            JSON.stringify(obj, (key, value) => {\n                keys[key] = null;\n                return value;\n            });\n            return JSON.stringify(obj, Object.keys(keys).sort());\n        };\n        return JSONstringifyOrder(obj1) === JSONstringifyOrder(obj2);\n    }\n\n    // @audit this is removing te callback functions. Watch out!\n    public static prepareObjectsForComparison(obj1, obj2) {\n        var A = JSON.parse(JSON.stringify(obj1));\n        var B = JSON.parse(JSON.stringify(obj2));\n\n\n        A.forEach(element => {\n            element.checked = true;\n        });\n        B.forEach(element => {\n            element.checked = true;\n        });\n        return { A, B }\n    }\n\n    public static mergeRecursively(obj1, obj2) {\n        for (var p in obj2) {\n            try {\n                // Property in destination object set; update its value.\n                if (obj2[p].constructor == Object) {\n                    obj1[p] = this.mergeRecursively(obj1[p], obj2[p]);\n                } else {\n                    obj1[p] = obj2[p];\n                }\n            } catch (e) {\n                // Property in destination object not set; create it and set its value.\n                obj1[p] = obj2[p];\n            }\n        }\n        return obj1;\n    }\n}","import { Modal } from \"./Modal\";\nimport { Utils } from './utils';\nimport { CookiesManager } from './CookiesManager';\n\nexport class Banner {\n    private options: BannerOptions;\n    private banner: string;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: BannerOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().bannerOptions.inject) {\n            this.injectBanner();\n        }\n        if (cookiesManager.getOptions().bannerOptions.injectWall) {\n            this.injectWall();\n        }\n        this.setEventListeners();\n    }\n\n    public setEventListeners() {\n        try {\n            let self = this;\n            // Accept all button\n            const acceptAllButton = document.querySelector(\".cm-banner-accept-all-btn\")!;\n            if (acceptAllButton) {\n                acceptAllButton.addEventListener(\"click\", function () {\n                    self.cookiesManager.acceptAllButton();\n                    self.options.acceptAllButton.onClick();\n                });\n            }\n\n            // Reject all button\n            const rejectAllButton = document.querySelector(\".cm-banner-reject-all-btn\")!;\n            if (rejectAllButton) {\n                rejectAllButton.addEventListener(\"click\", function () {\n                    self.cookiesManager.acceptAllButton(false);\n                    self.options.rejectAllButton.onClick();\n                });\n            }\n\n            // Config button\n            const configButton = document.querySelector(\".cm-banner-config-btn\")!;\n            if (configButton) {\n                configButton.addEventListener(\"click\", function () {\n                    self.cookiesManager.showModal();\n                    self.options.settingsButton.onClick();\n                });\n            }\n        } catch (error) {\n            console.error(\"Can't set the event listener for the cookies banner. Can't find the HTML elements.\")\n        }\n\n    }\n\n\n\n\n    private generateBanner() {\n        return `\n                <div class=\"c-cookies-config-banner\">\n                    <div class=\"banner-container\">\n                        ${this.getBannerText()}\n                        <div class=\"banner-container__buttons\">\n                            ${this.getRejectAllButton()}\n                            ${this.getAcceptAllButton()}\n                            ${this.getSettingsButton()}\n                        </div>\n                    </div>\n                </div> \n                `;\n    }\n\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"banner-container__button banner-container__accept-all-btn cm-banner-accept-all-btn\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getRejectAllButton() {\n        return this.options.rejectAllButton.show ? `<button class=\"banner-container__button banner-container__reject-all-btn cm-banner-reject-all-btn\">${this.options.rejectAllButton.text}</button>` : \"\";\n    }\n    getSettingsButton() {\n        return this.options.settingsButton.show ? `<button class=\"banner-container__button-link banner-container__config-btn cm-banner-config-btn\">${this.options.settingsButton.text}</button>` : \"\";\n    }\n\n    private getBannerText() {\n        return Utils.wrapString(this.options.bannerText, \"p\");\n    }\n\n    private injectWall() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateWall());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the wall.\");\n        }\n    }\n\n    public injectBanner() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateBanner());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the banner.\");\n        }\n    }\n\n    private generateWall() {\n        const blur = this.options.wallBlur ? \"c-cookies-config-wall--blurred\" : \"\";\n        return `<div class=\"c-cookies-config-wall ${blur}\"></div>`;\n    }\n\n    public showWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.add(\"wall-show\");\n        } catch (error) {\n            console.error(\"Couldn't apply the background wall.\")\n        }\n    }\n\n    public hideWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.remove(\"wall-show\");\n        } catch (error) {\n            console.error(\"Unable to hide the background wall.\")\n        }\n    }\n\n    public hideScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"hidden\";\n            document.querySelector(\"html\")!.style.overflow = \"hidden\";\n        } catch (error) {\n            console.error(\"Unable to hide the scroll.\")\n        }\n    }\n\n    public showScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"auto\";\n            document.querySelector(\"html\")!.style.overflow = \"auto\";\n        } catch (error) {\n            console.error(\"Unable to show the scroll.\")\n        }\n    }\n\n    public show() {\n        if (this.options.wall) {\n            this.showWall();\n        }\n        if (!this.options.wallScroll) {\n            this.hideScroll();\n        }\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner .banner-container\")!.classList.add(\"show-banner\");\n        } catch (error) {\n            console.error(\"Unable to show the banner.\")\n        }\n    }\n    public hide() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style.display = \"none\";\n        } catch (error) {\n            console.error(\"Unable to hide the banner.\")\n        }\n        this.hideWall();\n        this.showScroll();\n    }\n\n}\n\n\n\n\nexport interface BannerOptions {\n    bannerText: string;\n    wall: boolean,\n    injectWall: boolean,\n    wallScroll: boolean,\n    wallBlur: boolean,\n    inject: boolean,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n        onClick: Function,\n    },\n    settingsButton: {\n        text: string,\n        show: boolean,\n        onClick: Function,\n    },\n    acceptRequiredOnlyButton: {\n        text: string,\n        show: boolean,\n        onClick: Function,\n    },\n    rejectAllButton: {\n        text: string,\n        show: boolean,\n        onClick: Function,\n    },\n}\n","import { CookieCategory, CookiesManager } from './CookiesManager';\nexport class Modal {\n\n    private options: ModalOptions;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: ModalOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().modalOptions.inject) {\n            this.injectModal();\n        }\n        this.setEventListeners();\n        this.updateSwitchesStatus();\n    }\n\n\n    async show() {\n        try {\n\n            const modal = document.querySelector(\".c-cookies-config-modal\");\n            modal!.classList.add(this.options.showModalClass);\n            await new Promise(r => setTimeout(r, 10)); // This is to make the show animation work\n            // Toggle accordions after showing modal\n            var acc = document.getElementsByClassName(\"cm-accordion\");\n            var i;\n            var self = this;\n            for (i = 0; i < acc.length; i++) {\n                if (acc[i].classList.contains(\"cm-active-on-load\")) {\n                    acc[i].classList.remove(\"cm-active-on-load\");\n                    await new Promise(r => setTimeout(r, 100)); // This is to make the show animation work\n                    self.toggleAccordion(acc[i]);\n                }\n            }\n\n            const modalContainer = document.getElementById(\"modal-container\");\n            modalContainer!.classList.add(this.options.showModalClass);\n            // Hide body scroll\n            this.cookiesManager.getBanner().hideScroll();\n        } catch (error) {\n            console.error(\"Could not show cookie modal.\")\n            console.error(error)\n        }\n    }\n    hide(self?: Modal) { // Destucted object, so we can access this context\n        const modalContainer = document.getElementById('modal-container');\n        modalContainer!.classList.remove(this.options.showModalClass);\n\n        // If banner is not shown, show scroll\n        const bannerContainer = document.querySelector(\".c-cookies-config-banner .banner-container\");\n        if (bannerContainer?.classList.contains(\"show-banner\") == false) {\n            this.cookiesManager.getBanner().showScroll();\n        } else {\n            // If the banner is shown, check if the scroll was active. If it was, show the scroll on modal close.\n            const wallScroll = this.cookiesManager.getOptions().bannerOptions.wallScroll;\n            if (wallScroll) {\n                this.cookiesManager.getBanner().showScroll();\n            }\n        }\n    }\n\n    setEventListeners() {\n\n        try {\n            var self = this;\n            // Modal close button\n            const closeBtn = document.querySelectorAll('.close-modal')\n            closeBtn.forEach(c => c.addEventListener('click', () => {\n                this.hide(self);\n            }))\n\n            // Accept all button\n            const acceptAllButton = document.querySelector('.cm-modal-accept-all')!;\n            if (acceptAllButton) {\n                acceptAllButton.addEventListener('click', function () {\n                    self.cookiesManager.acceptAllButton();\n                    self.cookiesManager.getOptions().modalOptions.acceptAllButton.onClick();\n                });\n            }\n\n            // Reject all button\n            const rejectAllButton = document.querySelector('.cm-modal-reject-all')!;\n            if (rejectAllButton) {\n                rejectAllButton.addEventListener('click', function () {\n                    self.cookiesManager.acceptAllButton(false);\n                    self.cookiesManager.getOptions().modalOptions.rejectAllButton.onClick();\n                });\n            }\n\n            // Save button\n            const saveButton = document.querySelector('.cm-modal-save')!;\n            if (saveButton) {\n                saveButton.addEventListener('click', function () {\n                    self.cookiesManager.injectScripts();\n                    self.cookiesManager.hideBanner();\n                    self.cookiesManager.saveButton();\n                    // self.cookiesManager.callIndividualCallbacks();\n                    self.cookiesManager.getOptions().modalOptions.saveButton.onClick();\n                });\n            }\n\n            // Switches\n            this.cookiesManager.getOptions().cookieCategories.forEach((category: CookieCategory, index) => {\n                var checkbox = document.querySelector(`.cm-switch-${index}`)!;\n                const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n                checkbox.addEventListener('change', function () {\n                    if (this.checked) {\n                        category.checked = true;\n                        self.toggleSwitch(index, true);\n                    } else {\n                        category.checked = false;\n                        self.toggleSwitch(index, false);\n                    }\n                });\n            });\n\n            // Set accordion toggle on click\n            var acc = document.getElementsByClassName(\"cm-accordion\");\n            var i;\n            var self = this;\n            for (i = 0; i < acc.length; i++) {\n                acc[i].addEventListener(\"click\", function () {\n                    self.toggleAccordion(this);\n                });\n            }\n\n\n        } catch (error) {\n            console.error(\"Could not set event listeners for cookie modal.\")\n        }\n    }\n\n    private updateSwitchDisabledStatus(toggleIndex: number, required: boolean) {\n        try {\n            const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n            const checkboxInput = cookieCategoryElements[toggleIndex].querySelector<HTMLInputElement>(`.cm-switch-${toggleIndex}`)!;\n            const checkboxSpan = cookieCategoryElements[toggleIndex].querySelector<HTMLInputElement>(`.slider`)!;\n            const checkboxLabel = cookieCategoryElements[toggleIndex].querySelector<HTMLInputElement>(`label.switch`)!;\n            if (required) {\n                checkboxInput.setAttribute(\"disabled\", \"\")\n                checkboxSpan.classList.add(\"disabled\");\n                checkboxLabel.classList.add(\"disabled\");\n            } else {\n                checkboxInput.removeAttribute(\"disabled\");\n                checkboxSpan.classList.remove(\"disabled\");\n                checkboxLabel.classList.remove(\"disabled\");\n            }\n        } catch (error) {\n            console.error(`Could not change the disabled status from switch cm-switch-${toggleIndex}. Do you have equal switches and cookieCategories? If cm-switch-${toggleIndex} does not exist in your DOM, probably not.`)\n\n        }\n    }\n\n    private toggleSwitch(toggleIndex: number, checked: boolean) {\n        try {\n            const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n            const checkboxInput = cookieCategoryElements[toggleIndex].querySelector<HTMLInputElement>(`.cm-switch-${toggleIndex}`)!;\n            if (!checked) {\n                checkboxInput.removeAttribute(\"checked\");\n            } else {\n                checkboxInput.setAttribute(\"checked\", \"\")\n            }\n            checkboxInput.checked = checked;\n        } catch (error) {\n            console.error(`Could not toggle the switch cm-switch-${toggleIndex}. Do you have equal switches and cookieCategories? If cm-switch-${toggleIndex} does not exist in your DOM, probably not.`)\n        }\n    }\n\n    private async toggleAccordion(element) {\n        element.classList.toggle(\"cm-active\");\n        var panel = element.nextElementSibling;\n        if (panel.style.maxHeight) {\n            panel.style.maxHeight = null;\n        } else {\n            panel.style.maxHeight = panel.scrollHeight + \"px\";\n        }\n    }\n\n    public injectModal() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateModal());\n            }\n        } catch (error) {\n            console.error(\"Could not inject cookie modal.\");\n        }\n    }\n\n    // If we're not injecting the HTML, we need to update the HTML manually after the page is loaded.\n    public updateSwitchesStatus() {\n        //const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n        let cookieCategories = this.cookiesManager.getOptions().cookieCategories;\n        cookieCategories.forEach((cookieCategory, index) => {\n            try {\n                this.toggleSwitch(index, cookieCategory.checked)\n                this.updateSwitchDisabledStatus(index, cookieCategory.required)\n            } catch (error) {\n                console.error(\"You have more cookieCategories defined in javascript than in your HTML. Please, use the same number of cookieCategories.\")\n            }\n        });\n    }\n\n    private generateCategoriesBlocks() {\n        let categoriesBlocks = \"\";\n        let cookieCategories = this.cookiesManager.getOptions().cookieCategories;\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            cookieCategories = this.cookiesManager.getCookiesOptions();\n        }\n        cookieCategories.forEach((element, index) => {\n            const disabled = element.required ? \"disabled\" : \"\";\n            const checked = element.checked ? \"checked\" : \"\";\n            const accordionClass = element.accordion.enable ? \"cm-accordion\" : \"\";\n            const accordionPanel = element.accordion.enable ? \"cm-panel\" : \"\";\n            const activeAccordion = element.accordion.active ? \"cm-active-on-load\" : \"\";\n            const accordionChevron = element.accordion.enable ? \"<div class='cc-header__left'></div>\" : \"\";\n            const boxedHeader = element.boxedHeader ? \"cm-boxed\" : \"\";\n            const boxedBody = element.boxedBody ? \"cookie-category__body--boxed\" : \"\";\n            // const boxedHeaderMArgin = element.accordion.active ? \"\" : \"no-chevron\";\n            const block = `\n            <div class=\"cookie-category\">\n                <div class=\"cookie-category__header cc-header ${accordionClass} ${boxedHeader} ${activeAccordion}\">\n                    ${accordionChevron}\n                    <div class=\"cc-header__right\">\n                        <div class=\"header__title\">\n                            ${element.title}\n                        </div>\n                        <div class=\"header__switch\">\n                            <label class=\"switch ${disabled}\">\n                                <input ${disabled} ${checked} class=\"cm-switch-${index}\" type=\"checkbox\">\n                                <span class=\"slider round ${disabled}\"></span>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"cookie-category__body body ${boxedBody} ${accordionPanel}\">\n                    <p>${element.description}</p>\n                </div>\n            </div>\n            `;\n            categoriesBlocks += block;\n        });\n        return categoriesBlocks;\n\n    }\n\n    getCloseButton() {\n        return this.options.closeButton.show ? `<div class=\"modal__close close-modal\" title=\"Close\"><div class=\"close-modal-img\"></div></div>` : \"\";\n    }\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"modal__button modal__button-width cm-modal-accept-all footer__button-accept-all\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getRejectAllButton() {\n        return this.options.rejectAllButton.show ? `<button class=\"modal__button modal__button-width cm-modal-reject-all footer__button-reject-all\">${this.options.rejectAllButton.text}</button>` : \"\";\n    }\n    getSaveButton() {\n        return this.options.saveButton.show ? ` <button class=\"modal__button-link close-modal cm-modal-save footer__button-save-btn\"> ${this.options.saveButton.text} </button>` : \"\";\n    }\n\n    generateModal() {\n        return `\n        <div class=\"c-cookies-config-modal\">\n        <div class=\"modal__container\" id=\"modal-container\">\n          <div class=\"modal__content\">\n            ${this.getCloseButton()}\n            <div class=\"modal__title\">${this.options.title}</div>\n            <p class=\"modal__description\">${this.options.description}</p>\n            <div class=\"modal__cookie-categories\">\n                ${this.generateCategoriesBlocks()}\n            </div>\n    \n            <div class=\"modal__footer\">\n             ${this.getRejectAllButton()}\n             ${this.getAcceptAllButton()}\n             ${this.getSaveButton()}\n            </div>\n          </div>\n        </div>\n      </div>\n        `;\n    }\n\n}\n\nexport interface ModalOptions {\n    inject: boolean,\n    title: string,\n    description: string,\n    showModalClass: string,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n        onClick: Function,\n    },\n    rejectAllButton: {\n        show: boolean,\n        text: string,\n        onClick: Function,\n    },\n    saveButton: {\n        text: string,\n        show: boolean,\n        onClick: Function,\n    },\n    closeButton: {\n        text: string,\n        show: boolean,\n        onClick: Function,\n    },\n}","\nimport { Banner, BannerOptions } from \"./Banner\";\nimport { ModalOptions, Modal } from './Modal';\nimport \"./scss/styles.scss\";\nimport { Utils } from './utils';\n\ninterface cookieCatergoryCallbackInterface {\n    (CookieCategory: CookieCategory): void;\n}\nexport class CookiesManager {\n\n    // var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n    private modalOptions: Options;\n    private banner: Banner;\n    private modal: Modal;\n    private acceptAll: boolean = false;\n    private configChanged: boolean = false;\n    private onCookieCategoryChange: cookieCatergoryCallbackInterface;\n\n\n    public getBanner(): Banner {\n        return this.banner;\n    }\n\n    public setBanner(banner: Banner): void {\n        this.banner = banner;\n    }\n\n    public getModal(): Modal {\n        return this.modal;\n    }\n\n    public setModal(modal: Modal): void {\n        this.modal = modal;\n    }\n\n    public getOptions(): Options {\n        return this.modalOptions;\n    }\n\n    public on(listener, callback: cookieCatergoryCallbackInterface) {\n        if (listener == \"onCookieCategoryChange\") {\n            this.onCookieCategoryChange = callback;\n        }\n    }\n\n    constructor(options: Options) {\n        if (options == null) {\n            throw new Error(\"Options for CookiesManager cannot be null.\");\n        } else {\n            if (options.cookieCategories == null) {\n                throw new Error(\"You should provide at least one cookie category\");\n            }\n            // Set all cookie categories as checked by default. Set default value for cookie category\n            const mergedCategories = new Array<CookieCategory>;\n            options.cookieCategories.forEach(category => {\n                //category.checked = true; // Dont set checked to true. Set checked if checked was set\n                mergedCategories.push(Utils.mergeRecursively(this.getDefaultCookieCategoryOptions(), category));\n            });\n            options.cookieCategories = mergedCategories;\n            // Merge the default options with user options\n            const clonedCategories: CookieCategory[] = options.cookieCategories;\n            options = Utils.mergeRecursively(this.getDefaultOptions(), options);\n            this.modalOptions = options;\n            this.constructorInitializationFunction(options, clonedCategories);\n        }\n    }\n\n    private constructorInitializationFunction(options, clonedCategories: CookieCategory[]) {\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) { // If there's already configuration saved\n            // Prepare the options to compare them.\n            // @audit be careful, this function is comparing two strings. The callback functions are being removed, so we need to set them below.\n            var optionsComparison = Utils.prepareObjectsForComparison(this.modalOptions.cookieCategories, this.getCookiesOptions());\n            // Check if the options in localStorage and the options from the constructor are the same\n            if (Utils.objectEquals(optionsComparison.A, optionsComparison.B)) {\n                // If the options are the same, just inject the scripts\n                this.modalOptions.cookieCategories = this.getCookiesOptions();\n                // @audit-ok We need to set the categories events again, as the callback functions were removed.\n                this.modalOptions.cookieCategories.forEach((cookieCategory, index) => {\n                    cookieCategory.events = clonedCategories[index].events;\n                });\n\n            } else {\n                localStorage.removeItem(\"cookiesManagerOptions\");\n                // If the options are different, set the configChanged to true\n                // We are in the constructor. By setting this to true, it might show the banner and modal if the user has set askOnChange to true\n                this.configChanged = true;\n            }\n        }\n\n        // Generate modal\n        if (options.modalOptions != null) {\n            this.createModal(options.modalOptions);\n        }\n\n        if (options.bannerOptions != null) {\n            this.createBanner(options.bannerOptions);\n        }\n    }\n\n    public setEventListeners() {\n        this.modal.setEventListeners();\n        this.banner.setEventListeners();\n    }\n\n    public createBanner(options: BannerOptions) {\n        this.banner = new Banner(this, options);\n        return this.banner;\n    }\n    public createModal(options: ModalOptions) {\n        this.modal = new Modal(this, options);\n        return this.modal;\n    }\n\n    public setCookies(): void {\n        this.modalOptions.cookieCategories.forEach(category => {\n            category.events.setCookiesOnChange.forEach(cookie => {\n                let cookieValue;\n                if (category.checked) {\n                    cookieValue = cookie.valueOnAccept;\n                    this.setCookie(cookie.cookieName, cookieValue, cookie.expirationDays, \"/\");\n                } else {\n                    cookieValue = cookie.valueOnReject;\n                    if (this.getOptions().askAgainIfRejectedAfterDays != -1) {\n                        this.setCookie(cookie.cookieName, cookieValue, this.getOptions().askAgainIfRejectedAfterDays, \"/\");\n                    } else {\n                        this.setCookie(cookie.cookieName, cookieValue, cookie.expirationDays, \"/\");\n                    }\n                }\n\n            })\n        });\n    }\n\n    public setCookie(cookieName: string, cookieValue: string, expDays = 400, path = '/') {\n        try {\n            document.cookie = cookieName + '=' + encodeURIComponent(cookieValue) + '; max-age=' + (3600 * (24 * expDays)) + '; path=' + path\n        } catch (error) {\n            console.error(`Error setting cookie: ${error}`)\n        }\n    }\n\n    public getCookie(cookieName) {\n        let cookie = {};\n        document.cookie.split(';').forEach(function (el) {\n            let [key, value] = el.split('=');\n            cookie[key.trim()] = value;\n        })\n        return cookie[cookieName];\n    }\n\n    public acceptAllButton(acceptedAll = true) {\n        this.getOptions().cookieCategories.forEach((cookieCategory: CookieCategory) => {\n            if (cookieCategory.required && acceptedAll == false) {\n                cookieCategory.checked = true;\n            } else {\n                cookieCategory.checked = acceptedAll;\n            }\n        })\n        this.modal.updateSwitchesStatus();\n        this.acceptAll = true;\n        this.modal.hide();\n        this.banner.hide();\n        this.injectScripts();\n        this.saveCookieOptions();\n        this.setCookies();\n        this.callIndividualCallbacks();\n    }\n\n    public showModal() {\n        this.modal.show();\n    }\n\n    public showBanner() {\n        this.banner.show();\n    }\n\n    public hideBanner() {\n        this.banner.hide();\n    }\n\n    public hideModal() {\n        this.modal.hide();\n    }\n\n    public callIndividualCallbacks() {\n        this.modalOptions.cookieCategories.forEach(category => {\n            if (category.checked || this.acceptAll) {\n                category.events.onAccept();\n            } else if (!category.checked) {\n                category.events.onReject();\n            }\n        });\n    }\n\n    private injectScript(src: string, async = false) {\n        var s = document.createElement('script');\n        s.setAttribute('src', src);\n        s.async = async;\n        document.body.appendChild(s);\n    }\n\n    private injectGTM(gtmCode: string) {\n        try {\n            (function (w, d, s, l, i) {\n                w[l] = w[l] || [];\n                w[l].push({\n                    'gtm.start': new Date().getTime(),\n                    event: 'gtm.js',\n                });\n                const f = d.getElementsByTagName(s)[0];\n                const j = d.createElement(s) as HTMLInputElement;\n                const\n                    dl = l != 'dataLayer' ? `&l=${l}` : '';\n                //j.async = true;\n                j.src = `https://www.googletagmanager.com/gtm.js?id=${i}${dl}`;\n                f.parentNode!.insertBefore(j, f);\n            }(window, document, 'script', 'dataLayer', gtmCode));\n            (window as any).dataLayer = (window as any).dataLayer || [];\n        } catch (error) {\n            console.error(\"Couldn't inject GTM.\")\n        }\n    }\n\n    public async init(banner: boolean, modal: boolean) {\n        if (this.modalOptions.askOnce) {\n            if (localStorage.getItem(\"cookiesManagerOptions\") == null || this.configChanged) {\n                await this.initShow(banner, modal)\n            } else {\n                let initDone = false;\n                const cookieOptions: CookieCategory[] = this.getCookiesOptions(); // Cookie options from localStorage\n                // Check for the cookies\n                for (let [categoryIndex, category] of this.modalOptions.cookieCategories.entries()) {\n                    if (initDone) break;\n                    for (let [cookieObjectIndex, cookieObject] of category.events.setCookiesOnChange.entries()) {\n\n                        // If the cookie exists\n                        if (this.getCookie(cookieObject.cookieName)) {\n                            // If the cookie has different values than the set ones, ask again\n                            if (![cookieObject.valueOnAccept.toString(), cookieObject.valueOnReject.toString()].includes(this.getCookie(cookieObject.cookieName))) {\n                                this.initShow(banner, modal);\n                                initDone = true;\n                                break;\n                            } else {\n                                // Los valores son correctos. Comprobar si el usuario ha cambiado la cookie desde devTools\n                                // Probablemente haya que meter esto en try catch\n                                if (category.checked) {\n                                    const savedLocalStorageCookieValue = cookieOptions[categoryIndex].events.setCookiesOnChange[cookieObjectIndex].valueOnAccept; // Valor de la cookie en localstorage\n                                    const realCookieValue = this.getCookie(cookieOptions[categoryIndex].events.setCookiesOnChange[cookieObjectIndex].cookieName)\n                                    if (savedLocalStorageCookieValue.toString() != realCookieValue) {\n                                        this.initShow(banner, modal);\n                                        break;\n                                    }\n                                }\n\n                            }\n                        } else {\n                            this.initShow(banner, modal)\n                            initDone = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        } else {\n            await this.initShow(banner, modal)\n        }\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            this.injectScripts();\n            this.callIndividualCallbacks();\n        }\n    }\n\n    public async initShow(banner: boolean, modal: boolean) {\n        if (this.modalOptions.delay > 0) {\n            await new Promise(r => setTimeout(r, this.modalOptions.delay)); // This is to make the show animation work\n        }\n        if (banner) {\n            this.showBanner();\n        }\n        if (modal) {\n            this.showModal();\n        }\n    }\n\n    public injectScripts() {\n        try {\n\n            this.modalOptions.cookieCategories.forEach(category => {\n                if (this.onCookieCategoryChange != null) {\n                    this.onCookieCategoryChange(category);\n                }\n                if (category.checked || this.acceptAll) {\n                    category.scripts.forEach(script => {\n                        if (script[\"type\"] == ScriptType.STANDARD || script[\"type\"] == null) {\n                            if (script[\"scriptSrc\"] != null) {\n                                this.injectScript(script[\"scriptSrc\"], script[\"async\"])\n                            }\n                        } else {\n                            if (script[\"gtmCode\"] != null) {\n                                this.injectGTM(script[\"gtmCode\"]);\n                            } else {\n                                throw new Error(\"You should provide a gtmCode for the script\");\n                            }\n                        }\n                    });\n                }\n            });\n        } catch (error) {\n            console.error(`Couldn't inject scripts: ${error}`)\n        }\n    }\n\n    saveButton() {\n        this.saveCookieOptions();\n        this.setCookies();\n        this.callIndividualCallbacks();\n    }\n\n    saveCookieOptions() {\n        const base64Options = Utils.encode(JSON.stringify(this.modalOptions.cookieCategories));\n        localStorage.setItem(\"cookiesManagerOptions\", base64Options);\n    }\n\n    getCookiesOptions(): any {\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            return JSON.parse(Utils.decode(localStorage.getItem(\"cookiesManagerOptions\")));\n        }\n        return {};\n    }\n\n    private getDefaultCookieCategoryOptions(): CookieCategory {\n        return {\n            title: \"Cookie Category Example\",\n            description: \"Cookie category description\",\n            required: false,\n            id: \"\",\n            checked: true,\n            events: {\n                onAccept: () => { },\n                onReject: () => { },\n                setCookiesOnChange: []\n            },\n            accordion: {\n                enable: false,\n                enableOnDescriptionLength: 45,\n                active: false,\n            },\n            boxedHeader: false,\n            boxedBody: false,\n            scripts: []\n        }\n    }\n\n    private getDefaultOptions(): Options {\n        return {\n            askOnce: true,\n            askAgainIfRejectedAfterDays: -1,\n            delay: 0,\n            askOnChange: true,\n            initOnDomContentLoaded: true,\n            modalOptions: {\n                title: \"Cookie settings\",\n                description: \"Change the settings for the cookies here.\",\n                inject: true,\n                showModalClass: \"show-modal\",\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                    onClick: () => { },\n                },\n                rejectAllButton: {\n                    text: 'Reject all',\n                    show: true,\n                    onClick: () => { },\n                },\n                saveButton: {\n                    text: 'Save',\n                    show: true,\n                    onClick: () => { },\n                },\n                closeButton: {\n                    text: 'Close',\n                    show: true,\n                    onClick: () => { },\n                },\n            },\n            bannerOptions: {\n                inject: true,\n                injectWall: true,\n                wall: true,\n                wallScroll: true,\n                wallBlur: false,\n                bannerText: 'This website uses cookies to ensure you get the best experience on our website.',\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                    onClick: () => { },\n                },\n                settingsButton: {\n                    text: 'Settings',\n                    show: true,\n                    onClick: () => { },\n                },\n                acceptRequiredOnlyButton: {\n                    text: 'Configuración',\n                    show: false,\n                    onClick: () => { },\n                },\n                rejectAllButton: {\n                    text: 'Rechazar todo',\n                    show: true,\n                    onClick: () => { },\n                }\n            },\n            cookieCategories: [],\n        }\n    }\n\n\n\n}\nexport interface Events {\n    onAccept: Function,\n    onReject: Function,\n    setCookiesOnChange: Array<CookieObject>,\n}\n\nexport interface CookieObject {\n    cookieName: string,\n    valueOnAccept: string | number,\n    valueOnReject: string | number,\n    expirationDays: number,\n}\n\nexport interface Options {\n    cookieCategories: Array<CookieCategory>,\n    initOnDomContentLoaded: boolean,\n    askAgainIfRejectedAfterDays: number,\n    bannerOptions: BannerOptions,\n    modalOptions: ModalOptions,\n    askOnce: boolean,\n    askOnChange: boolean,\n    delay: number,\n}\n\nexport interface CookieCategory {\n    title: string,\n    id: string,\n    description: string,\n    required: boolean,\n    checked: boolean,\n    events: Events,\n    accordion: Accordion,\n    boxedHeader: boolean,\n    boxedBody: boolean,\n    scripts: [\n        {\n            type: ScriptType,\n            gtmCode: string,\n            scriptSrc: string,\n            async: boolean,\n        }\n    ] | []\n}\n\nexport interface Accordion {\n    enable: boolean,\n    enableOnDescriptionLength: number,\n    active: boolean,\n}\n\nexport enum ScriptType {\n    GTM,\n    STANDARD\n}"],"names":["Utils","static","str","window","btoa","a","atob","isHTML","RegExp","prototype","test","bind","match","tag","this","x","y","ok","Object","keys","tx","length","every","key","deepEqual","b","s","o","entries","sort","map","i","JSON","stringify","obj1","obj2","JSONstringifyOrder","obj","value","A","parse","B","forEach","element","checked","p","constructor","mergeRecursively","e","Banner","cookiesManager","options","banner","getOptions","bannerOptions","inject","injectBanner","injectWall","setEventListeners","self","document","querySelector","acceptAllButton","addEventListener","onClick","rejectAllButton","configButton","showModal","settingsButton","error","console","generateBanner","getBannerText","getRejectAllButton","getAcceptAllButton","getSettingsButton","show","text","wrapString","bannerText","insertAdjacentHTML","generateWall","wallBlur","showWall","classList","add","hideWall","remove","hideScroll","style","overflow","showScroll","wall","wallScroll","hide","display","Modal","modalOptions","injectModal","updateSwitchesStatus","async","showModalClass","Promise","r","setTimeout","acc","getElementsByClassName","contains","toggleAccordion","getElementById","getBanner","bannerContainer","querySelectorAll","c","saveButton","injectScripts","hideBanner","cookieCategories","category","index","checkbox","toggleSwitch","updateSwitchDisabledStatus","toggleIndex","required","cookieCategoryElements","checkboxInput","checkboxSpan","checkboxLabel","setAttribute","removeAttribute","toggle","nextElementSibling","panel","maxHeight","scrollHeight","generateModal","cookieCategory","generateCategoriesBlocks","categoriesBlocks","localStorage","getItem","getCookiesOptions","disabled","accordion","enable","boxedHeader","active","title","boxedBody","description","block","getCloseButton","closeButton","getSaveButton","CookiesManager","setBanner","getModal","modal","setModal","on","listener","callback","onCookieCategoryChange","acceptAll","configChanged","Error","mergedCategories","Array","push","getDefaultCookieCategoryOptions","clonedCategories","getDefaultOptions","constructorInitializationFunction","optionsComparison","prepareObjectsForComparison","objectEquals","events","removeItem","createModal","createBanner","setCookies","setCookiesOnChange","cookie","cookieValue","valueOnAccept","setCookie","cookieName","expirationDays","valueOnReject","askAgainIfRejectedAfterDays","expDays","path","encodeURIComponent","getCookie","split","el","trim","acceptedAll","saveCookieOptions","callIndividualCallbacks","showBanner","hideModal","onAccept","onReject","injectScript","src","createElement","body","appendChild","injectGTM","gtmCode","w","d","l","Date","getTime","event","f","getElementsByTagName","j","parentNode","insertBefore","dataLayer","askOnce","initShow","initDone","cookieOptions","categoryIndex","cookieObjectIndex","cookieObject","toString","includes","savedLocalStorageCookieValue","realCookieValue","delay","scripts","script","ScriptType","STANDARD","base64Options","encode","setItem","decode","id","enableOnDescriptionLength","askOnChange","initOnDomContentLoaded","acceptRequiredOnlyButton"],"mappings":"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"}