{"version":3,"file":"index.modern.mjs","sources":["../src/utils.ts","../src/Banner.ts","../src/Modal.ts","../src/CookiesManager.ts"],"sourcesContent":["\nexport class Utils {\n    public static encode(str) {\n        return window.btoa(str);\n    }\n    public static decode(a) {\n        return window.atob(a);\n    }\n    private static isHTML(str: string) {\n        var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n\n        // test isHTML regex\n        return str.match(isHTML);\n\n    }\n    public static wrapString(str: string, tag: string) {\n        if (this.isHTML(str)) {\n            return str;\n        }\n        return `<${tag}>${str}</${tag}>`;\n    }\n\n    public static deepEqual(x, y) {\n        const ok = Object.keys, tx = typeof x, ty = typeof y;\n        return x && y && tx === 'object' && tx === ty ? (\n            ok(x).length === ok(y).length &&\n            ok(x).every(key => this.deepEqual(x[key], y[key]))\n        ) : (x === y);\n    }\n\n    public static compareObjects(a, b) {\n        let s = (o) => Object.entries(o).sort().map(i => {\n            if (i[1] instanceof Object) i[1] = s(i[1]);\n            return i\n        })\n        return JSON.stringify(s(a)) === JSON.stringify(s(b))\n    }\n\n    public static objectEquals(obj1, obj2) {\n        const JSONstringifyOrder = obj => {\n            const keys = {};\n            JSON.stringify(obj, (key, value) => {\n                keys[key] = null;\n                return value;\n            });\n            return JSON.stringify(obj, Object.keys(keys).sort());\n        };\n        return JSONstringifyOrder(obj1) === JSONstringifyOrder(obj2);\n    }\n\n    public static prepareObjectsForComparison(obj1, obj2) {\n        var A = JSON.parse(JSON.stringify(obj1));\n        var B = JSON.parse(JSON.stringify(obj2));\n\n\n        A.forEach(element => {\n            element.checked = true;\n        });\n        B.forEach(element => {\n            element.checked = true;\n        });\n        return { A, B }\n    }\n\n    public static mergeRecursively(obj1, obj2) {\n        for (var p in obj2) {\n            try {\n                // Property in destination object set; update its value.\n                if (obj2[p].constructor == Object) {\n                    obj1[p] = this.mergeRecursively(obj1[p], obj2[p]);\n                } else {\n                    obj1[p] = obj2[p];\n                }\n            } catch (e) {\n                // Property in destination object not set; create it and set its value.\n                obj1[p] = obj2[p];\n            }\n        }\n        return obj1;\n    }\n}","import { Modal } from \"./Modal\";\nimport { Utils } from './utils';\nimport { CookiesManager } from './CookiesManager';\n\nexport class Banner {\n    private options: BannerOptions;\n    private banner: string;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: BannerOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().bannerOptions.inject) {\n            this.injectBanner();\n        }\n        this.setEventListeners();\n    }\n\n    public setEventListeners() {\n        try {\n            let self = this;\n            // Accept all button\n            document.querySelector(\".cm-banner-accept-all-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Config button\n            document.querySelector(\".cm-banner-config-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.showModal();\n            });\n        } catch (error) {\n            console.error(\"Can't set the event listener for the cookies banner. Can't find the HTML elements.\")\n        }\n\n    }\n\n\n\n\n    private generateBanner() {\n        return `\n                <div class=\"c-cookies-config-banner\">\n                    <div class=\"banner-container\">\n                        ${this.getBannerText()}\n                        <div class=\"banner-container__buttons\">\n                            ${this.getAcceptAllButton()}\n                            ${this.getSettingsButton()}\n                        </div>\n                    </div>\n                </div> \n                `;\n    }\n\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"banner-container__button banner-container__accept-all-btn cm-banner-accept-all-btn\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSettingsButton() {\n        return this.options.settingsButton.show ? `<button class=\"banner-container__button-link banner-container__config-btn cm-banner-config-btn\">${this.options.settingsButton.text}</button>` : \"\";\n    }\n\n    private getBannerText() {\n        return Utils.wrapString(this.options.bannerText, \"p\");\n    }\n\n    public injectBanner() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateWall());\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateBanner());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the banner.\");\n        }\n    }\n\n    private generateWall() {\n        const blur = this.options.wallBlur ? \"c-cookies-config-wall--blurred\" : \"\";\n        return `<div class=\"c-cookies-config-wall ${blur}\"></div>`;\n    }\n\n    public showWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.add(\"wall-show\");\n        } catch (error) {\n            console.error(\"Couldn't apply the background wall.\")\n        }\n    }\n\n    public hideWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.remove(\"wall-show\");\n        } catch (error) {\n            console.error(\"Unable to hide the background wall.\")\n        }\n    }\n\n    public hideScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"hidden\";\n        } catch (error) {\n            console.error(\"Unable to hide the scroll.\")\n        }\n    }\n\n    public showScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"auto\";\n        } catch (error) {\n            console.error(\"Unable to show the scroll.\")\n        }\n    }\n\n    public show() {\n        if (this.options.wall) {\n            this.showWall();\n        }\n        if (!this.options.wallScroll) {\n            this.hideScroll();\n        }\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner .banner-container\")!.classList.add(\"show-banner\");\n        } catch (error) {\n            console.error(\"Unable to show the banner.\")\n        }\n    }\n    public hide() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style.display = \"none\";\n        } catch (error) {\n            console.error(\"Unable to hide the banner.\")\n        }\n        this.hideWall();\n        this.showScroll();\n    }\n\n}\n\n\n\n\nexport interface BannerOptions {\n    bannerText: string;\n    wall: boolean,\n    wallScroll: boolean,\n    wallBlur: boolean,\n    inject: boolean,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    settingsButton: {\n        text: string,\n        show: boolean,\n    },\n    acceptRequiredOnlyButton: {\n        text: string,\n        show: boolean,\n    },\n    rejectAllButton: {\n        text: string,\n        show: boolean,\n    },\n}\n","import { CookiesManager } from './CookiesManager';\nexport class Modal {\n\n    private options: ModalOptions;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: ModalOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().modalOptions.inject) {\n            this.injectModal();\n        }\n        this.setEventListeners();\n    }\n\n\n    async show() {\n        try {\n            const modal = document.querySelector(\".c-cookies-config-modal\");\n            modal!.classList.add(this.options.showModalClass);\n            await new Promise(r => setTimeout(r, 10)); // This is to make the show animation work\n            const modalContainer = document.getElementById(\"modal-container\");\n            modalContainer!.classList.add(this.options.showModalClass);\n            // Hide body scroll\n            document.querySelector(\"body\")!.style.overflow = \"hidden\";\n        } catch (error) {\n            console.error(\"Could not show cookie modal.\")\n            console.error(error)\n        }\n    }\n    hide(self?: Modal) { // Destucted object, so we can access this context\n        const modalContainer = document.getElementById('modal-container')\n        modalContainer!.classList.remove(this.options.showModalClass)\n\n    }\n\n    setEventListeners() {\n\n        try {\n            var self = this;\n            // Modal close button\n            const closeBtn = document.querySelectorAll('.close-modal')\n            closeBtn.forEach(c => c.addEventListener('click', ()=>{\n                this.hide(self);\n            }))\n\n            // Accept all button\n            const acceptAllBtn = document.querySelector('.cm-modal-accept-all')!;\n            acceptAllBtn.addEventListener('click', function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Save button\n            const saveButton = document.querySelector('.cm-modal-save')!;\n            saveButton.addEventListener('click', function () {\n                self.cookiesManager.injectScripts();\n                self.cookiesManager.hideBanner();\n                self.cookiesManager.saveButton();\n            });\n\n            // Switches\n            this.cookiesManager.getOptions().cookieCategories.forEach((category, index) => {\n                var checkbox = document.querySelector(`.cm-switch-${index}`)!;\n                checkbox.addEventListener('change', function () {\n                    if (this.checked) {\n                        category.checked = true;\n                    } else {\n                        category.checked = false;\n                    }\n                });\n            });\n        } catch (error) {\n            console.error(\"Could not set event listeners for cookie modal.\")\n        }\n    }\n\n    public injectModal() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateModal());\n            }\n        } catch (error) {\n            console.error(\"Could not inject cookie modal.\")\n        }\n    }\n\n    private generateCategoriesBlocks() {\n        let categoriesBlocks = \"\";\n        this.cookiesManager.getOptions().cookieCategories.forEach((element, index) => {\n            const disabled = element.required ? \"disabled\" : \"\";\n            const checked = element.required ? \"checked\" : \"\";\n            const block = `\n            <div class=\"cookie-category\">\n                <div class=\"cookie-category__header header\">\n                    <h2 class=\"header__title\">\n                        ${element.title}\n                    </h2>\n                    <div class=\"header__switch\">\n                    <label class=\"switch ${disabled}\">\n                        <input ${disabled} checked class=\"cm-switch-${index}\" type=\"checkbox\">\n                        <span class=\"slider round ${disabled}\"></span>\n                    </label>\n                    </div>\n                </div>\n            <div class=\"cookie-category__body body\">\n                <p>${element.description}</p>\n            </div>\n            </div>\n            `;\n            categoriesBlocks += block;\n        });\n        return categoriesBlocks;\n\n    }\n\n    getCloseButton() {\n        return this.options.closeButton.show ? `<div class=\"modal__close close-modal\" title=\"Close\"><div class=\"close-modal-img\"></div></div>` : \"\";\n    }\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"modal__button modal__button-width cm-modal-accept-all modal__button-accept-all\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSaveButton() {\n        return this.options.saveButton.show ? ` <button class=\"modal__button-link close-modal cm-modal-save modal__button-save-btn\"> ${this.options.saveButton.text} </button>` : \"\";\n    }\n\n    generateModal() {\n        return `\n        <div class=\"c-cookies-config-modal\">\n        <div class=\"modal__container\" id=\"modal-container\">\n          <div class=\"modal__content\">\n            ${this.getCloseButton()}\n            <h1 class=\"modal__title\">${this.options.title}</h1>\n            <p class=\"modal__description\">${this.options.description}</p>\n            <div class=\"modal__cookie-categories\">\n                ${this.generateCategoriesBlocks()}\n            </div>\n    \n            <div class=\"modal__footer\">\n             ${this.getAcceptAllButton()}\n             ${this.getSaveButton()}\n            </div>\n          </div>\n        </div>\n      </div>\n        `;\n    }\n\n}\n\nexport interface ModalOptions {\n    inject: boolean,\n    title: string,\n    description: string,\n    showModalClass: string,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    saveButton: {\n        text: string,\n        show: boolean,\n    },\n    closeButton: {\n        text: string,\n        show: boolean,\n    },\n}","\nimport { Banner, BannerOptions } from \"./Banner\";\nimport { ModalOptions, Modal } from './Modal';\nimport \"./scss/styles.scss\";\nimport { Utils } from './utils';\nexport class CookiesManager {\n\n    // var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n    private modalOptions: Options;\n    private banner: Banner;\n    private modal: Modal;\n    private acceptAll: boolean = false;\n    private configChanged: boolean = false;\n\n\n    public getBanner(): Banner {\n        return this.banner;\n    }\n\n    public setBanner(banner: Banner): void {\n        this.banner = banner;\n    }\n\n    public getModal(): Modal {\n        return this.modal;\n    }\n\n    public setModal(modal: Modal): void {\n        this.modal = modal;\n    }\n\n    public getOptions(): Options {\n        return this.modalOptions;\n    }\n\n    constructor(options: Options) {\n        if (options == null) {\n            throw new Error(\"Options for CookiesManager cannot be null.\");\n        } else {\n            if (options.cookieCategories == null) {\n                throw new Error(\"You should provide at least one cookie category\");\n            }\n            // Set all cookie categories as checked by default\n            options.cookieCategories.forEach(category => {\n                category.checked = true;\n            });\n\n            // Merge the default options with user options\n            options = Utils.mergeRecursively(this.getDefaultOptions(), options);\n            this.modalOptions = options;\n            if (options.initOnDomContentLoaded) {\n                window.addEventListener(\"DOMContentLoaded\", () => {\n                    this.constructorInitializationFunction(options);\n                });\n            } else {\n                this.constructorInitializationFunction(options);\n            }\n        }\n    }\n\n    private constructorInitializationFunction(options) {\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) { // If there's already configuration saved\n            // Prepare the options to compare them.\n            var optionsComparison = Utils.prepareObjectsForComparison(this.modalOptions.cookieCategories, this.getCookiesOptions());\n\n            // Check if the options in localStorage and the options from the constructor are the same\n            if (Utils.objectEquals(optionsComparison.A, optionsComparison.B)) {\n                // If the options are the same, just inject the scripts\n                this.modalOptions.cookieCategories = this.getCookiesOptions();\n                this.injectScripts();\n            } else {\n                // If the options are different, set the configChanged to true\n                // We are in the constructor. By setting this to true, it might show the banner and modal if the user has set askOnChange to true\n                this.configChanged = true;\n            }\n        }\n\n        // Generate modal\n        if (options.modalOptions != null) {\n\n            this.createModal(options.modalOptions);\n\n        }\n\n        if (options.bannerOptions != null) {\n            this.createBanner(options.bannerOptions);\n\n        }\n    }\n\n    public setEventListeners() {\n        this.modal.setEventListeners();\n        this.banner.setEventListeners();\n\n    }\n\n    public createBanner(options: BannerOptions) {\n        this.banner = new Banner(this, options);\n        return this.banner;\n    }\n    public createModal(options: ModalOptions) {\n        this.modal = new Modal(this, options);\n        return this.modal;\n    }\n\n    public acceptAllButton() {\n        this.acceptAll = true;\n        this.modal.hide();\n        this.banner.hide();\n        this.injectScripts();\n        this.saveCookieOptions();\n    }\n\n    public showModal() {\n        this.modal.show();\n    }\n\n    public showBanner() {\n        this.banner.show();\n    }\n\n    public hideBanner() {\n        this.banner.hide();\n    }\n\n    public hideModal() {\n        this.modal.hide();\n    }\n\n    private injectScript(src: string, async = false) {\n        var s = document.createElement('script');\n        s.setAttribute('src', src);\n        s.async = async;\n        document.body.appendChild(s);\n    }\n\n    private injectGTM(gtmCode: string) {\n        try {\n            (function (w, d, s, l, i) {\n                w[l] = w[l] || [];\n                w[l].push({\n                    'gtm.start': new Date().getTime(),\n                    event: 'gtm.js',\n                });\n                const f = d.getElementsByTagName(s)[0];\n                const j = d.createElement(s) as HTMLInputElement;\n                const\n                    dl = l != 'dataLayer' ? `&l=${l}` : '';\n                //j.async = true;\n                j.src = `https://www.googletagmanager.com/gtm.js?id=${i}${dl}`;\n                f.parentNode!.insertBefore(j, f);\n            }(window, document, 'script', 'dataLayer', gtmCode));\n            (window as any).dataLayer = (window as any).dataLayer || [];\n        } catch (error) {\n            console.error(\"Couldn't inject GTM.\")\n        }\n    }\n\n    public init(banner: boolean, modal: boolean) {\n        if (this.modalOptions.askOnce) {\n            if (localStorage.getItem(\"cookiesManagerOptions\") == null || this.configChanged) {\n                this.initShow(banner, modal)\n            } // There's no else, as if cookiesManagerOptions was not null, the constructor would do the job.\n        } else {\n            this.initShow(banner, modal)\n        }\n    }\n\n    public async initShow(banner: boolean, modal: boolean) {\n        if (this.modalOptions.delay > 0) {\n            await new Promise(r => setTimeout(r, this.modalOptions.delay)); // This is to make the show animation work\n        }\n        if (banner) {\n            this.showBanner();\n        }\n        if (modal) {\n            this.showModal();\n        }\n    }\n\n    public injectScripts() {\n        try {\n            this.modalOptions.cookieCategories.forEach(category => {\n                if (category.checked || this.acceptAll) {\n                    category.scripts.forEach(script => {\n                        if (script.type == ScriptType.STANDARD || script.type == null) {\n                            if (script.scriptSrc != null) {\n                                this.injectScript(script.scriptSrc, script.async)\n                            }\n                        } else {\n                            if (script.gtmCode != null) {\n                                this.injectGTM(script.gtmCode);\n                            } else {\n                                throw new Error(\"You should provide a gtmCode for the script\");\n                            }\n                        }\n                    });\n                }\n            });\n        } catch (error) {\n            console.error(`Couldn't inject scripts: ${error}`)\n        }\n    }\n\n    saveButton() {\n        this.saveCookieOptions();\n    }\n\n    saveCookieOptions() {\n        const base64Options = Utils.encode(JSON.stringify(this.modalOptions.cookieCategories));\n        localStorage.setItem(\"cookiesManagerOptions\", base64Options);\n    }\n\n    getCookiesOptions(): any {\n        return JSON.parse(Utils.decode(localStorage.getItem(\"cookiesManagerOptions\")));\n    }\n\n    private getDefaultOptions(): Options {\n        return {\n            askOnce: true,\n            delay: 0,\n            askOnChange: true,\n            initOnDomContentLoaded: true,\n            modalOptions: {\n                title: \"Cookie settings\",\n                description: \"Change the settings for the cookies here.\",\n                inject: true,\n                showModalClass: \"show-modal\",\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                saveButton: {\n                    text: 'Save',\n                    show: true,\n                },\n                closeButton: {\n                    text: 'Close',\n                    show: true,\n                },\n            },\n            bannerOptions: {\n                inject: true,\n                wall: true,\n                wallScroll: false,\n                wallBlur: true,\n                bannerText: 'This website uses cookies to ensure you get the best experience on our website.',\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                settingsButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n                acceptRequiredOnlyButton: {\n                    text: 'Configuración',\n                    show: false,\n                },\n                rejectAllButton: {\n                    text: 'Configuración',\n                    show: false,\n                }\n            },\n            cookieCategories: [],\n        }\n    }\n\n\n\n}\n\nexport interface Options {\n    cookieCategories: Array<CookieCategory>,\n    initOnDomContentLoaded: boolean,\n    bannerOptions: BannerOptions,\n    modalOptions: ModalOptions,\n    askOnce: boolean,\n    askOnChange: boolean,\n    delay: number,\n}\n\nexport interface CookieCategory {\n    title: string,\n    description: string,\n    required: boolean,\n    checked: boolean,\n    scripts: [\n        {\n            type: ScriptType,\n            gtmCode: string,\n            scriptSrc: string,\n            async: boolean,\n        }\n    ]\n}\n\nexport enum ScriptType {\n    GTM,\n    STANDARD\n}"],"names":["Utils","static","str","window","btoa","a","atob","isHTML","RegExp","prototype","test","bind","match","tag","this","x","y","ok","Object","keys","tx","length","every","key","deepEqual","b","s","o","entries","sort","map","i","JSON","stringify","obj1","obj2","JSONstringifyOrder","obj","value","A","parse","B","forEach","element","checked","p","constructor","mergeRecursively","e","Banner","cookiesManager","options","banner","getOptions","bannerOptions","inject","injectBanner","setEventListeners","self","document","querySelector","addEventListener","acceptAllButton","showModal","error","console","generateBanner","getBannerText","getAcceptAllButton","getSettingsButton","show","text","settingsButton","wrapString","bannerText","insertAdjacentHTML","generateWall","wallBlur","showWall","classList","add","hideWall","remove","hideScroll","style","overflow","showScroll","wall","wallScroll","hide","display","Modal","modalOptions","injectModal","async","showModalClass","Promise","r","setTimeout","getElementById","querySelectorAll","c","injectScripts","hideBanner","saveButton","cookieCategories","category","index","generateModal","generateCategoriesBlocks","categoriesBlocks","disabled","required","title","description","getCloseButton","closeButton","getSaveButton","CookiesManager","getBanner","setBanner","getModal","modal","setModal","acceptAll","configChanged","Error","getDefaultOptions","initOnDomContentLoaded","constructorInitializationFunction","localStorage","getItem","optionsComparison","prepareObjectsForComparison","getCookiesOptions","objectEquals","createModal","createBanner","saveCookieOptions","showBanner","hideModal","injectScript","src","createElement","setAttribute","body","appendChild","injectGTM","gtmCode","w","d","l","push","Date","getTime","event","f","getElementsByTagName","j","parentNode","insertBefore","dataLayer","init","askOnce","initShow","delay","scripts","script","type","ScriptType","STANDARD","scriptSrc","encode","setItem","base64Options","decode","askOnChange","acceptRequiredOnlyButton","rejectAllButton"],"mappings":"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"}