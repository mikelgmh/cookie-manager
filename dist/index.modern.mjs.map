{"version":3,"file":"index.modern.mjs","sources":["../src/utils.ts","../src/Banner.ts","../src/Modal.ts","../src/CookiesManager.ts"],"sourcesContent":["\nexport class Utils {\n    public static encode(str) {\n        return window.btoa(str);\n    }\n    public static decode(a) {\n        return window.atob(a);\n    }\n    private static isHTML(str: string) {\n        var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n\n        // test isHTML regex\n        return str.match(isHTML);\n\n    }\n    public static wrapString(str: string, tag: string) {\n        if (this.isHTML(str)) {\n            return str;\n        }\n        return `<${tag}>${str}</${tag}>`;\n    }\n\n    public static deepEqual(x, y) {\n        const ok = Object.keys, tx = typeof x, ty = typeof y;\n        return x && y && tx === 'object' && tx === ty ? (\n            ok(x).length === ok(y).length &&\n            ok(x).every(key => this.deepEqual(x[key], y[key]))\n        ) : (x === y);\n    }\n\n    public static compareObjects(a, b) {\n        let s = (o) => Object.entries(o).sort().map(i => {\n            if (i[1] instanceof Object) i[1] = s(i[1]);\n            return i\n        })\n        return JSON.stringify(s(a)) === JSON.stringify(s(b))\n    }\n\n    public static objectEquals(obj1, obj2) {\n        const JSONstringifyOrder = obj => {\n            const keys = {};\n            JSON.stringify(obj, (key, value) => {\n                keys[key] = null;\n                return value;\n            });\n            return JSON.stringify(obj, Object.keys(keys).sort());\n        };\n        return JSONstringifyOrder(obj1) === JSONstringifyOrder(obj2);\n    }\n\n    public static prepareObjectsForComparison(obj1, obj2) {\n        var A = JSON.parse(JSON.stringify(obj1));\n        var B = JSON.parse(JSON.stringify(obj2));\n\n\n        A.forEach(element => {\n            element.checked = true;\n        });\n        B.forEach(element => {\n            element.checked = true;\n        });\n        return { A, B }\n    }\n\n    public static mergeRecursively(obj1, obj2) {\n        for (var p in obj2) {\n            try {\n                // Property in destination object set; update its value.\n                if (obj2[p].constructor == Object) {\n                    obj1[p] = this.mergeRecursively(obj1[p], obj2[p]);\n                } else {\n                    obj1[p] = obj2[p];\n                }\n            } catch (e) {\n                // Property in destination object not set; create it and set its value.\n                obj1[p] = obj2[p];\n            }\n        }\n        return obj1;\n    }\n}","import { Modal } from \"./Modal\";\nimport { Utils } from './utils';\nimport { CookiesManager } from './CookiesManager';\n\nexport class Banner {\n    private options: BannerOptions;\n    private banner: string;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: BannerOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().bannerOptions.inject) {\n            this.injectBanner();\n        }\n        this.setEventListeners();\n    }\n\n    public setEventListeners() {\n        let self = this;\n        // Accept all button\n        document.querySelector(\".cm-banner-accept-all-btn\")!.addEventListener(\"click\", function () {\n            self.cookiesManager.acceptAllButton();\n        });\n\n        // Config button\n        document.querySelector(\".cm-banner-config-btn\")!.addEventListener(\"click\", function () {\n            self.cookiesManager.showModal();\n        });\n\n    }\n\n\n\n\n    private generateBanner() {\n        return `\n                <div class=\"c-cookies-config-banner\">\n                    <div class=\"banner-container\">\n                        ${this.getBannerText()}\n                        <div class=\"banner-container__buttons\">\n                            ${this.getAcceptAllButton()}\n                            ${this.getSettingsButton()}\n                        </div>\n                    </div>\n                </div> \n                `;\n    }\n\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"banner-container__button banner-container__accept-all-btn cm-banner-accept-all-btn\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSettingsButton() {\n        return this.options.settingsButton.show ? `<button class=\"banner-container__button-link banner-container__config-btn cm-banner-config-btn\">${this.options.settingsButton.text}</button>` : \"\";\n    }\n\n    private getBannerText() {\n        return Utils.wrapString(this.options.bannerText, \"p\");\n    }\n\n    public injectBanner() {\n        if (document.querySelector(\"body\") != null) {\n            document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateBanner());\n        }\n    }\n\n    public showWall() {\n        const blur = this.options.wallBlur ? \"c-cookies-config-wall--blurred\" : \"\";\n        const wall = `<div class=\"c-cookies-config-wall ${blur}\"></div>`;\n        document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", wall);\n    }\n\n    public hideWall() {\n        const test = document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!;\n        test.style.display = \"none\";\n    }\n\n    public hideScroll() {\n        document.querySelector(\"body\")!.style.overflow = \"hidden\";\n    }\n\n    public showScroll() {\n        document.querySelector(\"body\")!.style.overflow = \"auto\";\n    }\n\n    public show() {\n        //document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style(\"display\", \"blockxÂº\");\n        if (this.options.wall) {\n            this.showWall();\n        }\n        if (!this.options.wallScroll) {\n            this.hideScroll();\n        }\n        document.querySelector<HTMLElement>(\".c-cookies-config-banner .banner-container\")!.classList.add(\"show-banner\");\n    }\n    public hide() {\n        document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style.display = \"none\";\n        this.hideWall();\n        this.showScroll();\n        // document.querySelector(\".c-cookies-config-banner\")!.style(\"display\", \"none\");\n        // Array.from(document.querySelector(\".c-cookies-config-banner\") as unknown as HTMLCollectionOf<HTMLElement>);\n    }\n\n}\n\n\n\n\nexport interface BannerOptions {\n    bannerText: string;\n    wall: boolean,\n    wallScroll: boolean,\n    wallBlur: boolean,\n    inject: boolean,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    settingsButton: {\n        text: string,\n        show: boolean,\n    },\n    acceptRequiredOnlyButton: {\n        text: string,\n        show: boolean,\n    },\n    rejectAllButton: {\n        text: string,\n        show: boolean,\n    },\n}\n","import { CookiesManager } from './CookiesManager';\nexport class Modal {\n\n    private options: ModalOptions;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: ModalOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().modalOptions.inject) {\n            this.injectModal();\n        }\n        this.setEventListeners();\n    }\n\n\n    show() {\n        const modalContainer = document.getElementById(\"modal-container\");\n        modalContainer!.classList.add('show-modal');\n        // Hide body scroll\n        document.querySelector(\"body\")!.style.overflow = \"hidden\";\n    }\n    hide() {\n        const modalContainer = document.getElementById('modal-container')\n        modalContainer!.classList.remove('show-modal')\n\n    }\n\n    setEventListeners() {\n\n        var self = this;\n        // Modal close button\n        const closeBtn = document.querySelectorAll('.close-modal')\n        closeBtn.forEach(c => c.addEventListener('click', this.hide))\n\n        // Accept all button\n        const acceptAllBtn = document.querySelector('.cm-modal-accept-all')!;\n        acceptAllBtn.addEventListener('click', function () {\n            self.cookiesManager.acceptAllButton();\n        });\n\n        // Save button\n        const saveButton = document.querySelector('.cm-modal-save')!;\n        saveButton.addEventListener('click', function () {\n            self.cookiesManager.injectScripts();\n            self.cookiesManager.hideBanner();\n            self.cookiesManager.saveButton();\n        });\n\n        // Switches\n        this.cookiesManager.getOptions().cookieCategories.forEach((category, index) => {\n            var checkbox = document.querySelector(`.cm-switch-${index}`)!;\n            checkbox.addEventListener('change', function () {\n                if (this.checked) {\n                    category.checked = true;\n                } else {\n                    category.checked = false;\n                }\n            });\n        });\n    }\n\n    public injectModal() {\n        if (document.querySelector(\"body\") != null) {\n            document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateModal());\n        }\n    }\n\n    private generateCategoriesBlocks() {\n        let categoriesBlocks = \"\";\n        this.cookiesManager.getOptions().cookieCategories.forEach((element, index) => {\n            const disabled = element.required ? \"disabled\" : \"\";\n            const checked = element.required ? \"checked\" : \"\";\n            const block = `\n            <div class=\"cookie-category\">\n                <div class=\"cookie-category__header header\">\n                    <h2 class=\"header__title\">\n                    ${element.title}\n                    </h2>\n                    <div class=\"header__switch\">\n                    <label class=\"switch ${disabled}\">\n                        <input ${disabled} checked class=\"cm-switch-${index}\" type=\"checkbox\">\n                        <span class=\"slider round\"></span>\n                    </label>\n                    </div>\n                </div>\n            <div class=\"cookie-category__body body\">\n                <p>${element.description}</p>\n            </div>\n            </div>\n            `;\n            categoriesBlocks += block;\n        });\n        return categoriesBlocks;\n\n    }\n\n    generateModal() {\n        return `\n        <div class=\"c-cookies-config-modal\">\n        <div class=\"modal__container\" id=\"modal-container\">\n          <div class=\"modal__content\">\n            <div class=\"modal__close close-modal\" title=\"Close\">\n                <div class=\"close-modal-img\"></div>\n            </div>\n        \n            <h1 class=\"modal__title\">ConfiguraciÃ³n de cookies</h1>\n            <p class=\"modal__description\">Configura aquÃ­ tus cookies.</p>\n            <div class=\"modal__cookie-categories\">\n                ${this.generateCategoriesBlocks()}\n            </div>\n    \n            <div class=\"modal__footer\">\n              <button class=\"modal__button modal__button-width cm-modal-accept-all modal__button-accept-all\">\n                Aceptar todas\n              </button>\n    \n              <button class=\"modal__button-link close-modal cm-modal-save modal__button-save-btn\">\n                Guardar\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n        `;\n    }\n\n}\n\nexport interface ModalOptions {\n    inject: boolean,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    saveButton: {\n        text: string,\n        show: boolean,\n    },\n    closeButton: {\n        text: string,\n        show: boolean,\n    },\n}","\nimport { Banner, BannerOptions } from \"./Banner\";\nimport { ModalOptions, Modal } from './Modal';\nimport \"./scss/styles.scss\";\nimport { Utils } from './utils';\nexport class CookiesManager {\n\n    // var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n    private modalOptions: Options;\n    private banner: Banner;\n    private modal: Modal;\n    private acceptAll: boolean = false;\n    private configChanged: boolean = false;\n\n\n    public getBanner(): Banner {\n        return this.banner;\n    }\n\n    public setBanner(banner: Banner): void {\n        this.banner = banner;\n    }\n\n    public getModal(): Modal {\n        return this.modal;\n    }\n\n    public setModal(modal: Modal): void {\n        this.modal = modal;\n    }\n\n    public getOptions(): Options {\n        return this.modalOptions;\n    }\n\n    constructor(options: Options) {\n        if (options == null) {\n            throw new Error(\"Options cannot be null\");\n        } else {\n            if (options.cookieCategories == null) {\n                throw new Error(\"You should provide at least one cookie category\");\n            }\n            // Set all cookie categories as checked by default\n            options.cookieCategories.forEach(category => {\n                category.checked = true;\n            });\n\n            // Merge the default options with user options\n            options = Utils.mergeRecursively(this.getDefaultOptions(), options);\n            this.modalOptions = options;\n\n            if (localStorage.getItem(\"cookiesManagerOptions\") != null) { // If there's already configuration saved\n                // Prepare the options to compare them.\n                var optionsComparison = Utils.prepareObjectsForComparison(this.modalOptions.cookieCategories, this.getCookiesOptions());\n\n                // Check if the options in localStorage and the options from the constructor are the same\n                if (Utils.objectEquals(optionsComparison.A, optionsComparison.B)) {\n                    // If the options are the same, just inject the scripts\n                    this.modalOptions.cookieCategories = this.getCookiesOptions();\n                    this.injectScripts();\n                } else {\n                    // If the options are different, set the configChanged to true\n                    // We are in the constructor. By setting this to true, it might show the banner and modal if the user has set askOnChange to true\n                    this.configChanged = true;\n                }\n            }\n\n            // Generate modal\n            if (options.modalOptions != null) {\n\n                this.createModal(options.modalOptions);\n\n            }\n\n            if (options.bannerOptions != null) {\n                this.createBanner(options.bannerOptions);\n\n            }\n        }\n\n    }\n\n    public setEventListeners() {\n        this.modal.setEventListeners();\n        this.banner.setEventListeners();\n\n    }\n\n    public createBanner(options: BannerOptions) {\n        this.banner = new Banner(this, options);\n        return this.banner;\n    }\n    public createModal(options: ModalOptions) {\n        this.modal = new Modal(this, options);\n        return this.modal;\n    }\n\n    public acceptAllButton() {\n        this.acceptAll = true;\n        this.modal.hide();\n        this.banner.hide();\n        this.injectScripts();\n        //this.setCookie();\n        this.saveCookieOptions();\n    }\n\n    public showModal() {\n        this.modal.show();\n    }\n\n    public showBanner() {\n        this.banner.show();\n    }\n\n    public hideBanner() {\n        this.banner.hide();\n    }\n\n    public hideModal() {\n        this.modal.hide();\n    }\n\n    private injectScript(src: string, async = false) {\n        var s = document.createElement('script');\n        s.setAttribute('src', src);\n        s.async = async;\n        document.body.appendChild(s);\n    }\n\n    private injectGTM(gtmCode: string) {\n        try {\n            (function (w, d, s, l, i) {\n                w[l] = w[l] || [];\n                w[l].push({\n                    'gtm.start': new Date().getTime(),\n                    event: 'gtm.js',\n                });\n                const f = d.getElementsByTagName(s)[0];\n                const j = d.createElement(s) as HTMLInputElement;\n                const\n                    dl = l != 'dataLayer' ? `&l=${l}` : '';\n                //j.async = true;\n                j.src = `https://www.googletagmanager.com/gtm.js?id=${i}${dl}`;\n                f.parentNode!.insertBefore(j, f);\n            }(window, document, 'script', 'dataLayer', gtmCode));\n            (window as any).dataLayer = (window as any).dataLayer || [];\n        } catch (error) {\n            console.log(\"There was an error loading GTM.\")\n        }\n    }\n\n    public init(banner: boolean, modal: boolean) {\n        if (this.modalOptions.askOnce) {\n            if (localStorage.getItem(\"cookiesManagerOptions\") == null || this.configChanged) {\n                if (banner) {\n                    this.showBanner();\n                }\n                if (modal) {\n                    this.showModal();\n                }\n            } // There's no else, as if cookiesManagerOptions was not null, the constructor would do the job.\n        } else {\n            if (banner) {\n                this.showBanner();\n            }\n            if (modal) {\n                this.showModal();\n            }\n        }\n    }\n\n    public injectScripts() {\n        this.modalOptions.cookieCategories.forEach(category => {\n            if (category.checked || this.acceptAll) {\n                category.scripts.forEach(script => {\n                    if (script.type == ScriptType.STANDARD || script.type == null) {\n                        if (script.scriptSrc != null) {\n                            this.injectScript(script.scriptSrc, script.async)\n                        } else {\n                            throw new Error(\"You should provide a scriptSrc for the script\");\n                        }\n                    } else {\n                        if (script.gtmCode != null) {\n                            this.injectGTM(script.gtmCode);\n                        } else {\n                            throw new Error(\"You should provide a gtmCode for the script\");\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    saveButton() {\n        this.saveCookieOptions();\n    }\n\n    saveCookieOptions() {\n        const base64Options = Utils.encode(JSON.stringify(this.modalOptions.cookieCategories));\n        localStorage.setItem(\"cookiesManagerOptions\", base64Options);\n    }\n\n    getCookiesOptions(): any {\n        return JSON.parse(Utils.decode(localStorage.getItem(\"cookiesManagerOptions\")));\n    }\n\n    private getDefaultOptions(): Options {\n        return {\n            askOnce: true,\n            askOnChange: true,\n            modalOptions: {\n                inject: true,\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                saveButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n                closeButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n            },\n            bannerOptions: {\n                inject: true,\n                wall: true,\n                wallScroll: false,\n                wallBlur: true,\n                bannerText: 'This website uses cookies to ensure you get the best experience on our website.',\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                settingsButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n                acceptRequiredOnlyButton: {\n                    text: 'ConfiguraciÃ³n',\n                    show: false,\n                },\n                rejectAllButton: {\n                    text: 'ConfiguraciÃ³n',\n                    show: false,\n                }\n            },\n            cookieCategories: [],\n        }\n    }\n\n\n\n}\n\nexport interface Options {\n    cookieCategories: Array<CookieCategory>,\n    bannerOptions: BannerOptions,\n    modalOptions: ModalOptions,\n    askOnce: boolean,\n    askOnChange: boolean,\n}\n\nexport interface CookieCategory {\n    title: string,\n    description: string,\n    required: boolean,\n    checked: boolean,\n    scripts: [\n        {\n            type: ScriptType,\n            gtmCode: string,\n            scriptSrc: string,\n            async: boolean,\n        }\n    ]\n}\n\nexport enum ScriptType {\n    GTM,\n    STANDARD\n}"],"names":["Utils","static","str","window","btoa","a","atob","isHTML","RegExp","prototype","test","bind","match","tag","this","x","y","ok","Object","keys","tx","length","every","key","deepEqual","b","s","o","entries","sort","map","i","JSON","stringify","obj1","obj2","JSONstringifyOrder","obj","value","A","parse","B","forEach","element","checked","p","constructor","mergeRecursively","e","Banner","cookiesManager","options","banner","getOptions","bannerOptions","inject","injectBanner","setEventListeners","self","document","querySelector","addEventListener","acceptAllButton","showModal","generateBanner","getBannerText","getAcceptAllButton","getSettingsButton","show","text","settingsButton","wrapString","bannerText","insertAdjacentHTML","showWall","wall","wallBlur","hideWall","style","display","hideScroll","overflow","showScroll","wallScroll","classList","add","hide","Modal","modalOptions","injectModal","getElementById","remove","querySelectorAll","c","injectScripts","hideBanner","saveButton","cookieCategories","category","index","generateModal","generateCategoriesBlocks","categoriesBlocks","disabled","required","title","description","CookiesManager","getBanner","setBanner","getModal","modal","setModal","acceptAll","configChanged","Error","getDefaultOptions","localStorage","getItem","optionsComparison","prepareObjectsForComparison","getCookiesOptions","objectEquals","createModal","createBanner","saveCookieOptions","showBanner","hideModal","injectScript","src","async","createElement","setAttribute","body","appendChild","injectGTM","gtmCode","w","d","l","push","Date","getTime","event","f","getElementsByTagName","j","parentNode","insertBefore","dataLayer","error","console","log","init","askOnce","scripts","script","type","ScriptType","STANDARD","scriptSrc","base64Options","encode","setItem","decode","askOnChange","closeButton","acceptRequiredOnlyButton","rejectAllButton"],"mappings":"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"}