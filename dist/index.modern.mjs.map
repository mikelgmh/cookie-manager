{"version":3,"file":"index.modern.mjs","sources":["../src/utils.ts","../src/Banner.ts","../src/Modal.ts","../src/CookiesManager.ts"],"sourcesContent":["\nexport class Utils {\n    public static encode(str) {\n        return window.btoa(str);\n    }\n    public static decode(a) {\n        return window.atob(a);\n    }\n    private static isHTML(str: string) {\n        var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n\n        // test isHTML regex\n        return str.match(isHTML);\n\n    }\n    public static wrapString(str: string, tag: string) {\n        if (this.isHTML(str)) {\n            return str;\n        }\n        return `<${tag}>${str}</${tag}>`;\n    }\n\n    public static deepEqual(x, y) {\n        const ok = Object.keys, tx = typeof x, ty = typeof y;\n        return x && y && tx === 'object' && tx === ty ? (\n            ok(x).length === ok(y).length &&\n            ok(x).every(key => this.deepEqual(x[key], y[key]))\n        ) : (x === y);\n    }\n\n    public static compareObjects(a, b) {\n        let s = (o) => Object.entries(o).sort().map(i => {\n            if (i[1] instanceof Object) i[1] = s(i[1]);\n            return i\n        })\n        return JSON.stringify(s(a)) === JSON.stringify(s(b))\n    }\n\n    public static objectEquals(obj1, obj2) {\n        const JSONstringifyOrder = obj => {\n            const keys = {};\n            JSON.stringify(obj, (key, value) => {\n                keys[key] = null;\n                return value;\n            });\n            return JSON.stringify(obj, Object.keys(keys).sort());\n        };\n        return JSONstringifyOrder(obj1) === JSONstringifyOrder(obj2);\n    }\n\n    public static prepareObjectsForComparison(obj1, obj2) {\n        var A = JSON.parse(JSON.stringify(obj1));\n        var B = JSON.parse(JSON.stringify(obj2));\n\n\n        A.forEach(element => {\n            element.checked = true;\n        });\n        B.forEach(element => {\n            element.checked = true;\n        });\n        return { A, B }\n    }\n\n    public static mergeRecursively(obj1, obj2) {\n        for (var p in obj2) {\n            try {\n                // Property in destination object set; update its value.\n                if (obj2[p].constructor == Object) {\n                    obj1[p] = this.mergeRecursively(obj1[p], obj2[p]);\n                } else {\n                    obj1[p] = obj2[p];\n                }\n            } catch (e) {\n                // Property in destination object not set; create it and set its value.\n                obj1[p] = obj2[p];\n            }\n        }\n        return obj1;\n    }\n}","import { Modal } from \"./Modal\";\nimport { Utils } from './utils';\nimport { CookiesManager } from './CookiesManager';\n\nexport class Banner {\n    private options: BannerOptions;\n    private banner: string;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: BannerOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().bannerOptions.inject) {\n            this.injectBanner();\n        }\n        if (cookiesManager.getOptions().bannerOptions.injectWall) {\n            this.injectWall();\n        }\n        this.setEventListeners();\n    }\n\n    public setEventListeners() {\n        try {\n            let self = this;\n            // Accept all button\n            document.querySelector(\".cm-banner-accept-all-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Config button\n            document.querySelector(\".cm-banner-config-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.showModal();\n            });\n        } catch (error) {\n            console.error(\"Can't set the event listener for the cookies banner. Can't find the HTML elements.\")\n        }\n\n    }\n\n\n\n\n    private generateBanner() {\n        return `\n                <div class=\"c-cookies-config-banner\">\n                    <div class=\"banner-container\">\n                        ${this.getBannerText()}\n                        <div class=\"banner-container__buttons\">\n                            ${this.getAcceptAllButton()}\n                            ${this.getSettingsButton()}\n                        </div>\n                    </div>\n                </div> \n                `;\n    }\n\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"banner-container__button banner-container__accept-all-btn cm-banner-accept-all-btn\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSettingsButton() {\n        return this.options.settingsButton.show ? `<button class=\"banner-container__button-link banner-container__config-btn cm-banner-config-btn\">${this.options.settingsButton.text}</button>` : \"\";\n    }\n\n    private getBannerText() {\n        return Utils.wrapString(this.options.bannerText, \"p\");\n    }\n\n    private injectWall() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateWall());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the wall.\");\n        }\n    }\n\n    public injectBanner() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateBanner());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the banner.\");\n        }\n    }\n\n    private generateWall() {\n        const blur = this.options.wallBlur ? \"c-cookies-config-wall--blurred\" : \"\";\n        return `<div class=\"c-cookies-config-wall ${blur}\"></div>`;\n    }\n\n    public showWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.add(\"wall-show\");\n        } catch (error) {\n            console.error(\"Couldn't apply the background wall.\")\n        }\n    }\n\n    public hideWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.remove(\"wall-show\");\n        } catch (error) {\n            console.error(\"Unable to hide the background wall.\")\n        }\n    }\n\n    public hideScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"hidden\";\n            document.querySelector(\"html\")!.style.overflow = \"hidden\";\n        } catch (error) {\n            console.error(\"Unable to hide the scroll.\")\n        }\n    }\n\n    public showScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"auto\";\n            document.querySelector(\"html\")!.style.overflow = \"auto\";\n        } catch (error) {\n            console.error(\"Unable to show the scroll.\")\n        }\n    }\n\n    public show() {\n        if (this.options.wall) {\n            this.showWall();\n        }\n        if (!this.options.wallScroll) {\n            this.hideScroll();\n        }\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner .banner-container\")!.classList.add(\"show-banner\");\n        } catch (error) {\n            console.error(\"Unable to show the banner.\")\n        }\n    }\n    public hide() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style.display = \"none\";\n        } catch (error) {\n            console.error(\"Unable to hide the banner.\")\n        }\n        this.hideWall();\n        this.showScroll();\n    }\n\n}\n\n\n\n\nexport interface BannerOptions {\n    bannerText: string;\n    wall: boolean,\n    injectWall: boolean,\n    wallScroll: boolean,\n    wallBlur: boolean,\n    inject: boolean,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    settingsButton: {\n        text: string,\n        show: boolean,\n    },\n    acceptRequiredOnlyButton: {\n        text: string,\n        show: boolean,\n    },\n    rejectAllButton: {\n        text: string,\n        show: boolean,\n    },\n}\n","import { CookieCategory, CookiesManager } from './CookiesManager';\nexport class Modal {\n\n    private options: ModalOptions;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: ModalOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().modalOptions.inject) {\n            this.injectModal();\n        }\n        this.setEventListeners();\n        this.updateSwitchesStatus();\n    }\n\n\n    async show() {\n        try {\n            // Check if there's already any option saved\n            // if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            //     //const options: CookieCategory = this.cookiesManager.getCookiesOptions();\n            //     alert(\"W\")\n            // }\n            const modal = document.querySelector(\".c-cookies-config-modal\");\n            modal!.classList.add(this.options.showModalClass);\n            await new Promise(r => setTimeout(r, 10)); // This is to make the show animation work\n            // Toggle accordions after showing modal\n            var acc = document.getElementsByClassName(\"cm-accordion\");\n            var i;\n            var self = this;\n            for (i = 0; i < acc.length; i++) {\n                if (acc[i].classList.contains(\"cm-active-on-load\")) {\n                    acc[i].classList.remove(\"cm-active-on-load\");\n                    await new Promise(r => setTimeout(r, 100)); // This is to make the show animation work\n                    self.toggleAccordion(acc[i]);\n                }\n\n            }\n\n            const modalContainer = document.getElementById(\"modal-container\");\n            modalContainer!.classList.add(this.options.showModalClass);\n            // Hide body scroll\n            this.cookiesManager.getBanner().hideScroll();\n        } catch (error) {\n            console.error(\"Could not show cookie modal.\")\n            console.error(error)\n        }\n    }\n    hide(self?: Modal) { // Destucted object, so we can access this context\n        const modalContainer = document.getElementById('modal-container');\n        modalContainer!.classList.remove(this.options.showModalClass);\n\n        // If banner is not shown, show scroll\n        const bannerContainer = document.querySelector(\".c-cookies-config-banner .banner-container\");\n        if (bannerContainer?.classList.contains(\"show-banner\") == false) {\n            this.cookiesManager.getBanner().showScroll();\n        } else {\n            // If the banner is shown, check if the scroll was active. If it was, show the scroll on modal close.\n            const wallScroll = this.cookiesManager.getOptions().bannerOptions.wallScroll;\n            if (wallScroll) {\n                this.cookiesManager.getBanner().showScroll();\n            }\n        }\n\n    }\n\n    setEventListeners() {\n\n        try {\n            var self = this;\n            // Modal close button\n            const closeBtn = document.querySelectorAll('.close-modal')\n            closeBtn.forEach(c => c.addEventListener('click', () => {\n                this.hide(self);\n            }))\n\n            // Accept all button\n            const acceptAllBtn = document.querySelector('.cm-modal-accept-all')!;\n            acceptAllBtn.addEventListener('click', function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Save button\n            const saveButton = document.querySelector('.cm-modal-save')!;\n            saveButton.addEventListener('click', function () {\n                self.cookiesManager.injectScripts();\n                self.cookiesManager.hideBanner();\n                self.cookiesManager.saveButton();\n            });\n\n            // Switches\n            this.cookiesManager.getOptions().cookieCategories.forEach((category: CookieCategory, index) => {\n                var checkbox = document.querySelector(`.cm-switch-${index}`)!;\n                const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n                checkbox.addEventListener('change', function () {\n                    if (this.checked) {\n                        category.checked = true;\n                        self.toggleSwitch(index, true);\n                    } else {\n                        category.checked = false;\n                        self.toggleSwitch(index, false);\n                    }\n                });\n            });\n\n            // Set accordion toggle on click\n            var acc = document.getElementsByClassName(\"cm-accordion\");\n            var i;\n            var self = this;\n            for (i = 0; i < acc.length; i++) {\n                acc[i].addEventListener(\"click\", function () {\n                    self.toggleAccordion(this);\n                });\n            }\n\n\n        } catch (error) {\n            console.error(\"Could not set event listeners for cookie modal.\")\n        }\n    }\n\n    private updateSwitchDisabledStatus(toggleIndex: number, required: boolean) {\n        console.log(\"Changing disabled status\")\n        try {\n            const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n            const checkboxInput = cookieCategoryElements[toggleIndex].querySelector<HTMLInputElement>(`.cm-switch-${toggleIndex}`)!;\n            const checkboxSpan = cookieCategoryElements[toggleIndex].querySelector<HTMLInputElement>(`.slider`)!;\n            const checkboxLabel = cookieCategoryElements[toggleIndex].querySelector<HTMLInputElement>(`label.switch`)!;\n            if (required) {\n                checkboxInput.setAttribute(\"disabled\", \"\")\n                checkboxSpan.classList.add(\"disabled\");\n                checkboxLabel.classList.add(\"disabled\");\n            } else {\n                checkboxInput.removeAttribute(\"disabled\");\n                checkboxSpan.classList.remove(\"disabled\");\n                checkboxLabel.classList.remove(\"disabled\");\n            }\n        } catch (error) {\n            console.error(`Could not change the disabled status from switch cm-switch-${toggleIndex}. Do you have equal switches and cookieCategories? If cm-switch-${toggleIndex} does not exist in your DOM, probably not.`)\n\n        }\n    }\n\n    private toggleSwitch(toggleIndex: number, checked: boolean) {\n        try {\n            const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n            const checkboxInput = cookieCategoryElements[toggleIndex].querySelector<HTMLInputElement>(`.cm-switch-${toggleIndex}`)!;\n            if (!checked) {\n                checkboxInput.removeAttribute(\"checked\");\n            } else {\n                checkboxInput.setAttribute(\"checked\", \"\")\n            }\n            checkboxInput.checked = checked;\n        } catch (error) {\n            console.error(`Could not toggle the switch cm-switch-${toggleIndex}. Do you have equal switches and cookieCategories? If cm-switch-${toggleIndex} does not exist in your DOM, probably not.`)\n        }\n    }\n\n    private async toggleAccordion(element) {\n        element.classList.toggle(\"cm-active\");\n        var panel = element.nextElementSibling;\n        if (panel.style.maxHeight) {\n            panel.style.maxHeight = null;\n        } else {\n            panel.style.maxHeight = panel.scrollHeight + \"px\";\n        }\n    }\n\n    public injectModal() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateModal());\n            }\n        } catch (error) {\n            console.error(\"Could not inject cookie modal.\")\n        }\n    }\n\n    // If we're not injecting the HTML, we need to update the HTML manually after the page is loaded.\n    public updateSwitchesStatus() {\n        //const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n        let cookieCategories = this.cookiesManager.getOptions().cookieCategories;\n        cookieCategories.forEach((cookieCategory, index) => {\n            try {\n                this.toggleSwitch(index, cookieCategory.checked)\n                this.updateSwitchDisabledStatus(index, cookieCategory.required)\n            } catch (error) {\n                console.error(\"You have more cookieCategories defined in javascript than in your HTML. Please, use the same number of cookieCategories.\")\n            }\n        });\n    }\n\n    private generateCategoriesBlocks() {\n        let categoriesBlocks = \"\";\n        let cookieCategories = this.cookiesManager.getOptions().cookieCategories;\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            cookieCategories = this.cookiesManager.getCookiesOptions();\n        }\n        cookieCategories.forEach((element, index) => {\n            const disabled = element.required ? \"disabled\" : \"\";\n            const checked = element.checked ? \"checked\" : \"\";\n            const accordionClass = element.accordion.enable ? \"cm-accordion\" : \"\";\n            const accordionPanel = element.accordion.enable ? \"cm-panel\" : \"\";\n            const activeAccordion = element.accordion.active ? \"cm-active-on-load\" : \"\";\n            const accordionChevron = element.accordion.enable ? \"<div class='cc-header__left'></div>\" : \"\";\n            const boxedHeader = element.boxedHeader ? \"cm-boxed\" : \"\";\n            const boxedBody = element.boxedBody ? \"cookie-category__body--boxed\" : \"\";\n            // const boxedHeaderMArgin = element.accordion.active ? \"\" : \"no-chevron\";\n            const block = `\n            <div class=\"cookie-category\">\n                <div class=\"cookie-category__header cc-header ${accordionClass} ${boxedHeader} ${activeAccordion}\">\n                    ${accordionChevron}\n                    <div class=\"cc-header__right\">\n                        <div class=\"header__title\">\n                            ${element.title}\n                        </div>\n                        <div class=\"header__switch\">\n                            <label class=\"switch ${disabled}\">\n                                <input ${disabled} ${checked} class=\"cm-switch-${index}\" type=\"checkbox\">\n                                <span class=\"slider round ${disabled}\"></span>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"cookie-category__body body ${boxedBody} ${accordionPanel}\">\n                    <p>${element.description}</p>\n                </div>\n            </div>\n            `;\n            categoriesBlocks += block;\n        });\n        return categoriesBlocks;\n\n    }\n\n    getCloseButton() {\n        return this.options.closeButton.show ? `<div class=\"modal__close close-modal\" title=\"Close\"><div class=\"close-modal-img\"></div></div>` : \"\";\n    }\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"modal__button modal__button-width cm-modal-accept-all modal__button-accept-all\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSaveButton() {\n        return this.options.saveButton.show ? ` <button class=\"modal__button-link close-modal cm-modal-save modal__button-save-btn\"> ${this.options.saveButton.text} </button>` : \"\";\n    }\n\n    generateModal() {\n        return `\n        <div class=\"c-cookies-config-modal\">\n        <div class=\"modal__container\" id=\"modal-container\">\n          <div class=\"modal__content\">\n            ${this.getCloseButton()}\n            <div class=\"modal__title\">${this.options.title}</div>\n            <p class=\"modal__description\">${this.options.description}</p>\n            <div class=\"modal__cookie-categories\">\n                ${this.generateCategoriesBlocks()}\n            </div>\n    \n            <div class=\"modal__footer\">\n             ${this.getAcceptAllButton()}\n             ${this.getSaveButton()}\n            </div>\n          </div>\n        </div>\n      </div>\n        `;\n    }\n\n}\n\nexport interface ModalOptions {\n    inject: boolean,\n    title: string,\n    description: string,\n    showModalClass: string,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    saveButton: {\n        text: string,\n        show: boolean,\n    },\n    closeButton: {\n        text: string,\n        show: boolean,\n    },\n}","\nimport { Banner, BannerOptions } from \"./Banner\";\nimport { ModalOptions, Modal } from './Modal';\nimport \"./scss/styles.scss\";\nimport { Utils } from './utils';\n\ninterface cookieCatergoryCallbackInterface {\n    (CookieCategory: CookieCategory): void;\n}\nexport class CookiesManager {\n\n    // var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n    private modalOptions: Options;\n    private banner: Banner;\n    private modal: Modal;\n    private acceptAll: boolean = false;\n    private configChanged: boolean = false;\n    private onCookieCategoryChange: cookieCatergoryCallbackInterface;\n\n\n    public getBanner(): Banner {\n        return this.banner;\n    }\n\n    public setBanner(banner: Banner): void {\n        this.banner = banner;\n    }\n\n    public getModal(): Modal {\n        return this.modal;\n    }\n\n    public setModal(modal: Modal): void {\n        this.modal = modal;\n    }\n\n    public getOptions(): Options {\n        return this.modalOptions;\n    }\n\n    public on(listener, callback: cookieCatergoryCallbackInterface) {\n        if (listener == \"onCookieCategoryChange\") {\n            this.onCookieCategoryChange = callback;\n        }\n    }\n\n    constructor(options: Options) {\n        if (options == null) {\n            throw new Error(\"Options for CookiesManager cannot be null.\");\n        } else {\n            if (options.cookieCategories == null) {\n                throw new Error(\"You should provide at least one cookie category\");\n            }\n            // Set all cookie categories as checked by default. Set default value for cookie category\n            const mergedCategories = new Array<CookieCategory>;\n            options.cookieCategories.forEach(category => {\n                //category.checked = true; // Dont set checked to true. Set checked if checked was set\n                mergedCategories.push(Utils.mergeRecursively(this.getDefaultCookieCategoryOptions(), category));\n            });\n            options.cookieCategories = mergedCategories;\n            // Merge the default options with user options\n            options = Utils.mergeRecursively(this.getDefaultOptions(), options);\n            this.modalOptions = options;\n            this.constructorInitializationFunction(options);\n        }\n    }\n\n    private constructorInitializationFunction(options) {\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) { // If there's already configuration saved\n            // Prepare the options to compare them.\n            var optionsComparison = Utils.prepareObjectsForComparison(this.modalOptions.cookieCategories, this.getCookiesOptions());\n\n            // Check if the options in localStorage and the options from the constructor are the same\n            if (Utils.objectEquals(optionsComparison.A, optionsComparison.B)) {\n                // If the options are the same, just inject the scripts\n                this.modalOptions.cookieCategories = this.getCookiesOptions();\n\n            } else {\n                localStorage.removeItem(\"cookiesManagerOptions\");\n                // If the options are different, set the configChanged to true\n                // We are in the constructor. By setting this to true, it might show the banner and modal if the user has set askOnChange to true\n                this.configChanged = true;\n            }\n        }\n\n        // Generate modal\n        if (options.modalOptions != null) {\n\n            this.createModal(options.modalOptions);\n\n        }\n\n        if (options.bannerOptions != null) {\n            this.createBanner(options.bannerOptions);\n        }\n    }\n\n    public setEventListeners() {\n        this.modal.setEventListeners();\n        this.banner.setEventListeners();\n\n    }\n\n    public createBanner(options: BannerOptions) {\n        this.banner = new Banner(this, options);\n        return this.banner;\n    }\n    public createModal(options: ModalOptions) {\n        this.modal = new Modal(this, options);\n        return this.modal;\n    }\n\n    public acceptAllButton() {\n        this.getOptions().cookieCategories.forEach((cookieCategory: CookieCategory) => {\n            cookieCategory.checked = true;\n        })\n        this.modal.updateSwitchesStatus();\n        this.acceptAll = true;\n        this.modal.hide();\n        this.banner.hide();\n        this.injectScripts();\n        this.saveCookieOptions();\n    }\n\n    public showModal() {\n        this.modal.show();\n    }\n\n    public showBanner() {\n        this.banner.show();\n    }\n\n    public hideBanner() {\n        this.banner.hide();\n    }\n\n    public hideModal() {\n        this.modal.hide();\n    }\n\n    private injectScript(src: string, async = false) {\n        var s = document.createElement('script');\n        s.setAttribute('src', src);\n        s.async = async;\n        document.body.appendChild(s);\n    }\n\n    private injectGTM(gtmCode: string) {\n        try {\n            (function (w, d, s, l, i) {\n                w[l] = w[l] || [];\n                w[l].push({\n                    'gtm.start': new Date().getTime(),\n                    event: 'gtm.js',\n                });\n                const f = d.getElementsByTagName(s)[0];\n                const j = d.createElement(s) as HTMLInputElement;\n                const\n                    dl = l != 'dataLayer' ? `&l=${l}` : '';\n                //j.async = true;\n                j.src = `https://www.googletagmanager.com/gtm.js?id=${i}${dl}`;\n                f.parentNode!.insertBefore(j, f);\n            }(window, document, 'script', 'dataLayer', gtmCode));\n            (window as any).dataLayer = (window as any).dataLayer || [];\n        } catch (error) {\n            console.error(\"Couldn't inject GTM.\")\n        }\n    }\n\n    public async init(banner: boolean, modal: boolean) {\n        if (this.modalOptions.askOnce) {\n            if (localStorage.getItem(\"cookiesManagerOptions\") == null || this.configChanged) {\n                await this.initShow(banner, modal)\n            } // There's no else, as if cookiesManagerOptions was not null, the constructor would do the job.\n        } else {\n            await this.initShow(banner, modal)\n        }\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            this.injectScripts();\n        }\n    }\n\n    public async initShow(banner: boolean, modal: boolean) {\n        if (this.modalOptions.delay > 0) {\n            await new Promise(r => setTimeout(r, this.modalOptions.delay)); // This is to make the show animation work\n        }\n        if (banner) {\n            this.showBanner();\n        }\n        if (modal) {\n            this.showModal();\n        }\n    }\n\n    public injectScripts() {\n        try {\n\n            this.modalOptions.cookieCategories.forEach(category => {\n                if (this.onCookieCategoryChange != null) {\n                    this.onCookieCategoryChange(category);\n                }\n                if (category.checked || this.acceptAll) {\n                    category.scripts.forEach(script => {\n                        if (script[\"type\"] == ScriptType.STANDARD || script[\"type\"] == null) {\n                            if (script[\"scriptSrc\"] != null) {\n                                this.injectScript(script[\"scriptSrc\"], script[\"async\"])\n                            }\n                        } else {\n                            if (script[\"gtmCode\"] != null) {\n                                this.injectGTM(script[\"gtmCode\"]);\n                            } else {\n                                throw new Error(\"You should provide a gtmCode for the script\");\n                            }\n                        }\n                    });\n                }\n            });\n        } catch (error) {\n            console.error(`Couldn't inject scripts: ${error}`)\n        }\n    }\n\n    saveButton() {\n        this.saveCookieOptions();\n    }\n\n    saveCookieOptions() {\n        const base64Options = Utils.encode(JSON.stringify(this.modalOptions.cookieCategories));\n        localStorage.setItem(\"cookiesManagerOptions\", base64Options);\n    }\n\n    getCookiesOptions(): any {\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            return JSON.parse(Utils.decode(localStorage.getItem(\"cookiesManagerOptions\")));\n        }\n        return {};\n    }\n\n    private getDefaultCookieCategoryOptions(): CookieCategory {\n        return {\n            title: \"Cookie Category Example\",\n            description: \"Cookie category description\",\n            required: false,\n            id: \"\",\n            checked: true,\n            accordion: {\n                enable: false,\n                enableOnDescriptionLength: 45,\n                active: false,\n            },\n            boxedHeader: false,\n            boxedBody: false,\n            scripts: []\n        }\n    }\n    private getDefaultOptions(): Options {\n        return {\n            askOnce: true,\n            delay: 0,\n            askOnChange: true,\n            initOnDomContentLoaded: true,\n            modalOptions: {\n                title: \"Cookie settings\",\n                description: \"Change the settings for the cookies here.\",\n                inject: true,\n                showModalClass: \"show-modal\",\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                saveButton: {\n                    text: 'Save',\n                    show: true,\n                },\n                closeButton: {\n                    text: 'Close',\n                    show: true,\n                },\n            },\n            bannerOptions: {\n                inject: true,\n                injectWall: true,\n                wall: true,\n                wallScroll: true,\n                wallBlur: false,\n                bannerText: 'This website uses cookies to ensure you get the best experience on our website.',\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                settingsButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n                acceptRequiredOnlyButton: {\n                    text: 'Configuración',\n                    show: false,\n                },\n                rejectAllButton: {\n                    text: 'Configuración',\n                    show: false,\n                }\n            },\n            cookieCategories: [],\n        }\n    }\n\n\n\n}\n\nexport interface Options {\n    cookieCategories: Array<CookieCategory>,\n    initOnDomContentLoaded: boolean,\n    bannerOptions: BannerOptions,\n    modalOptions: ModalOptions,\n    askOnce: boolean,\n    askOnChange: boolean,\n    delay: number,\n}\n\nexport interface CookieCategory {\n    title: string,\n    id: string,\n    description: string,\n    required: boolean,\n    checked: boolean,\n    accordion: Accordion,\n    boxedHeader: boolean,\n    boxedBody: boolean,\n    scripts: [\n        {\n            type: ScriptType,\n            gtmCode: string,\n            scriptSrc: string,\n            async: boolean,\n        }\n    ] | []\n}\n\nexport interface Accordion {\n    enable: boolean,\n    enableOnDescriptionLength: number,\n    active: boolean,\n}\n\nexport enum ScriptType {\n    GTM,\n    STANDARD\n}"],"names":["Utils","static","str","window","btoa","a","atob","isHTML","RegExp","prototype","test","bind","match","tag","this","x","y","ok","Object","keys","tx","length","every","key","deepEqual","b","s","o","entries","sort","map","i","JSON","stringify","obj1","obj2","JSONstringifyOrder","obj","value","A","parse","B","forEach","element","checked","p","constructor","mergeRecursively","e","Banner","cookiesManager","options","banner","getOptions","bannerOptions","inject","injectBanner","injectWall","setEventListeners","self","document","querySelector","addEventListener","acceptAllButton","showModal","error","console","generateBanner","getBannerText","getAcceptAllButton","getSettingsButton","show","text","settingsButton","wrapString","bannerText","insertAdjacentHTML","generateWall","wallBlur","showWall","classList","add","hideWall","remove","hideScroll","style","overflow","showScroll","wall","wallScroll","hide","display","Modal","modalOptions","injectModal","updateSwitchesStatus","async","showModalClass","Promise","r","setTimeout","acc","getElementsByClassName","contains","toggleAccordion","getElementById","getBanner","bannerContainer","querySelectorAll","c","injectScripts","hideBanner","saveButton","cookieCategories","category","index","checkbox","toggleSwitch","updateSwitchDisabledStatus","toggleIndex","required","log","checkboxInput","cookieCategoryElements","checkboxSpan","checkboxLabel","setAttribute","removeAttribute","toggle","panel","nextElementSibling","maxHeight","scrollHeight","generateModal","cookieCategory","generateCategoriesBlocks","categoriesBlocks","localStorage","getItem","getCookiesOptions","disabled","accordion","enable","boxedHeader","active","title","boxedBody","description","getCloseButton","closeButton","getSaveButton","setBanner","getModal","modal","setModal","on","listener","callback","onCookieCategoryChange","acceptAll","configChanged","Error","mergedCategories","Array","push","getDefaultCookieCategoryOptions","getDefaultOptions","constructorInitializationFunction","optionsComparison","prepareObjectsForComparison","objectEquals","removeItem","createModal","createBanner","saveCookieOptions","showBanner","hideModal","injectScript","src","createElement","body","appendChild","injectGTM","gtmCode","w","d","l","Date","getTime","event","f","getElementsByTagName","j","parentNode","insertBefore","dataLayer","askOnce","initShow","delay","scripts","script","ScriptType","STANDARD","base64Options","encode","setItem","decode","id","enableOnDescriptionLength","askOnChange","initOnDomContentLoaded","acceptRequiredOnlyButton","rejectAllButton"],"mappings":"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"}