{"version":3,"file":"index.modern.mjs","sources":["../src/utils.ts","../src/Banner.ts","../src/Modal.ts","../src/CookiesManager.ts"],"sourcesContent":["\nexport class Utils {\n    public static encode(str) {\n        return window.btoa(str);\n    }\n    public static decode(a) {\n        return window.atob(a);\n    }\n    private static isHTML(str: string) {\n        var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n\n        // test isHTML regex\n        return str.match(isHTML);\n\n    }\n    public static wrapString(str: string, tag: string) {\n        if (this.isHTML(str)) {\n            return str;\n        }\n        return `<${tag}>${str}</${tag}>`;\n    }\n\n    public static deepEqual(x, y) {\n        const ok = Object.keys, tx = typeof x, ty = typeof y;\n        return x && y && tx === 'object' && tx === ty ? (\n            ok(x).length === ok(y).length &&\n            ok(x).every(key => this.deepEqual(x[key], y[key]))\n        ) : (x === y);\n    }\n\n    public static compareObjects(a, b) {\n        let s = (o) => Object.entries(o).sort().map(i => {\n            if (i[1] instanceof Object) i[1] = s(i[1]);\n            return i\n        })\n        return JSON.stringify(s(a)) === JSON.stringify(s(b))\n    }\n\n    public static objectEquals(obj1, obj2) {\n        const JSONstringifyOrder = obj => {\n            const keys = {};\n            JSON.stringify(obj, (key, value) => {\n                keys[key] = null;\n                return value;\n            });\n            return JSON.stringify(obj, Object.keys(keys).sort());\n        };\n        return JSONstringifyOrder(obj1) === JSONstringifyOrder(obj2);\n    }\n\n    public static prepareObjectsForComparison(obj1, obj2) {\n        var A = JSON.parse(JSON.stringify(obj1));\n        var B = JSON.parse(JSON.stringify(obj2));\n\n\n        A.forEach(element => {\n            element.checked = true;\n        });\n        B.forEach(element => {\n            element.checked = true;\n        });\n        return { A, B }\n    }\n\n    public static mergeRecursively(obj1, obj2) {\n        for (var p in obj2) {\n            try {\n                // Property in destination object set; update its value.\n                if (obj2[p].constructor == Object) {\n                    obj1[p] = this.mergeRecursively(obj1[p], obj2[p]);\n                } else {\n                    obj1[p] = obj2[p];\n                }\n            } catch (e) {\n                // Property in destination object not set; create it and set its value.\n                obj1[p] = obj2[p];\n            }\n        }\n        return obj1;\n    }\n}","import { Modal } from \"./Modal\";\nimport { Utils } from './utils';\nimport { CookiesManager } from './CookiesManager';\n\nexport class Banner {\n    private options: BannerOptions;\n    private banner: string;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: BannerOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        this.injectBanner();\n        this.setEventListeners();\n    }\n\n    private setEventListeners() {\n        let self = this;\n        // Accept all button\n        document.querySelector(\".cm-banner-accept-all-btn\")!.addEventListener(\"click\", function () {\n            self.cookiesManager.acceptAllButton();\n        });\n\n        // Config button\n        document.querySelector(\".cm-banner-config-btn\")!.addEventListener(\"click\", function () {\n            self.cookiesManager.showModal();\n        });\n\n    }\n\n\n\n\n    private generateBanner() {\n        return `\n                <div class=\"c-cookies-config-banner\">\n                    <div class=\"banner-container\">\n                        ${this.getBannerText()}\n                        <div class=\"banner-container__buttons\">\n                            ${this.getAcceptAllButton()}\n                            ${this.getSettingsButton()}\n                        </div>\n                    </div>\n                </div> \n                `;\n    }\n\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"banner-container__button banner-container__accept-all-btn cm-banner-accept-all-btn\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSettingsButton() {\n        return this.options.settingsButton.show ? `<button class=\"banner-container__button-link banner-container__config-btn cm-banner-config-btn\">${this.options.settingsButton.text}</button>` : \"\";\n    }\n\n    private getBannerText() {\n        return Utils.wrapString(this.options.bannerText, \"p\");\n    }\n\n    public injectBanner() {\n        if (document.querySelector(\"body\") != null) {\n            document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateBanner());\n        }\n    }\n\n    public showWall() {\n        const blur = this.options.wallBlur ? \"c-cookies-config-wall--blurred\" : \"\";\n        const wall = `<div class=\"c-cookies-config-wall ${blur}\"></div>`;\n        document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", wall);\n    }\n\n    public hideWall() {\n        const test = document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!;\n        test.style.display = \"none\";\n    }\n\n    public hideScroll() {\n        document.querySelector(\"body\")!.style.overflow = \"hidden\";\n    }\n\n    public showScroll() {\n        document.querySelector(\"body\")!.style.overflow = \"auto\";\n    }\n\n    public show() {\n        //document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style(\"display\", \"blockxÂº\");\n        if (this.options.wall) {\n            this.showWall();\n        }\n        if (!this.options.wallScroll) {\n            this.hideScroll();\n        }\n        document.querySelector<HTMLElement>(\".c-cookies-config-banner .banner-container\")!.classList.add(\"show-banner\");\n    }\n    public hide() {\n        document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style.display = \"none\";\n        this.hideWall();\n        this.showScroll();\n        // document.querySelector(\".c-cookies-config-banner\")!.style(\"display\", \"none\");\n        // Array.from(document.querySelector(\".c-cookies-config-banner\") as unknown as HTMLCollectionOf<HTMLElement>);\n    }\n\n}\n\n\n\n\nexport interface BannerOptions {\n    bannerText: string;\n    wall: boolean,\n    wallScroll: boolean,\n    wallBlur: boolean,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    settingsButton: {\n        text: string,\n        show: boolean,\n    },\n    acceptRequiredOnlyButton: {\n        text: string,\n        show: boolean,\n    },\n    rejectAllButton: {\n        text: string,\n        show: boolean,\n    },\n}\n","import { CookiesManager } from './CookiesManager';\nexport class Modal {\n\n    private options: ModalOptions;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: ModalOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        this.injectModal();\n        this.setEventListeners();\n    }\n\n\n    show() {\n        const modalContainer = document.getElementById(\"modal-container\");\n        modalContainer!.classList.add('show-modal');\n        // Hide body scroll\n        document.querySelector(\"body\")!.style.overflow = \"hidden\";\n    }\n    hide() {\n        const modalContainer = document.getElementById('modal-container')\n        modalContainer!.classList.remove('show-modal')\n\n    }\n\n    setEventListeners() {\n\n        var self = this;\n        // Modal close button\n        const closeBtn = document.querySelectorAll('.close-modal')\n        closeBtn.forEach(c => c.addEventListener('click', this.hide))\n\n        // Accept all button\n        const acceptAllBtn = document.querySelector('.cm-modal-accept-all')!;\n        acceptAllBtn.addEventListener('click', function () {\n            self.cookiesManager.acceptAllButton();\n        });\n\n        // Save button\n        const saveButton = document.querySelector('.cm-modal-save')!;\n        saveButton.addEventListener('click', function () {\n            self.cookiesManager.injectScripts();\n            self.cookiesManager.hideBanner();\n            self.cookiesManager.saveButton();\n        });\n\n        // Switches\n        this.cookiesManager.getOptions().cookieCategories.forEach((category, index) => {\n            var checkbox = document.querySelector(`.cm-switch-${index}`)!;\n            checkbox.addEventListener('change', function () {\n                if (this.checked) {\n                    category.checked = true;\n                } else {\n                    category.checked = false;\n                }\n            });\n        });\n    }\n\n    public injectModal() {\n        if (document.querySelector(\"body\") != null) {\n            document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateModal());\n        }\n    }\n\n    private generateCategoriesBlocks() {\n        let categoriesBlocks = \"\";\n        this.cookiesManager.getOptions().cookieCategories.forEach((element, index) => {\n            const disabled = element.required ? \"disabled\" : \"\";\n            const checked = element.required ? \"checked\" : \"\";\n            const block = `\n            <div class=\"cookie-category\">\n                <div class=\"cookie-category__header header\">\n                    <h2 class=\"header__title\">\n                    ${element.title}\n                    </h2>\n                    <div class=\"header__switch\">\n                    <label class=\"switch ${disabled}\">\n                        <input ${disabled} checked class=\"cm-switch-${index}\" type=\"checkbox\">\n                        <span class=\"slider round\"></span>\n                    </label>\n                    </div>\n                </div>\n            <div class=\"cookie-category__body body\">\n                <p>${element.description}</p>\n            </div>\n            </div>\n            `;\n            categoriesBlocks += block;\n        });\n        return categoriesBlocks;\n\n    }\n\n    generateModal() {\n        return `\n        <div class=\"c-cookies-config-modal\">\n        <div class=\"modal__container\" id=\"modal-container\">\n          <div class=\"modal__content\">\n            <div class=\"modal__close close-modal\" title=\"Close\">\n                <div class=\"close-modal-img\"></div>\n            </div>\n        \n            <h1 class=\"modal__title\">ConfiguraciÃ³n de cookies</h1>\n            <p class=\"modal__description\">Configura aquÃ­ tus cookies.</p>\n            <div class=\"modal__cookie-categories\">\n                ${this.generateCategoriesBlocks()}\n            </div>\n    \n            <div class=\"modal__footer\">\n              <button class=\"modal__button modal__button-width cm-modal-accept-all modal__button-accept-all\">\n                Aceptar todas\n              </button>\n    \n              <button class=\"modal__button-link close-modal cm-modal-save modal__button-save-btn\">\n                Guardar\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n        `;\n    }\n\n}\n\nexport interface ModalOptions {\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    saveButton: {\n        text: string,\n        show: boolean,\n    },\n    closeButton: {\n        text: string,\n        show: boolean,\n    },\n}","\nimport { Banner, BannerOptions } from \"./Banner\";\nimport { ModalOptions, Modal } from './Modal';\nimport \"./scss/styles.scss\";\nimport { Utils } from './utils';\nexport class CookiesManager {\n\n    // var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n    private modalOptions: Options;\n    private banner: Banner;\n    private modal: Modal;\n    private acceptAll: boolean = false;\n    private configChanged: boolean = false;\n\n\n    public getBanner(): Banner {\n        return this.banner;\n    }\n\n    public setBanner(banner: Banner): void {\n        this.banner = banner;\n    }\n\n    public getModal(): Modal {\n        return this.modal;\n    }\n\n    public setModal(modal: Modal): void {\n        this.modal = modal;\n    }\n\n    public getOptions(): Options {\n        return this.modalOptions;\n    }\n\n    constructor(options: Options) {\n        if (options == null) {\n            throw new Error(\"Options cannot be null\");\n        } else {\n            if (options.cookieCategories == null) {\n                throw new Error(\"You should provide at least one cookie category\");\n            }\n            // Set all cookie categories as checked by default\n            options.cookieCategories.forEach(category => {\n                category.checked = true;\n            });\n\n            // Merge the default options with user options\n            options = Utils.mergeRecursively(this.getDefaultOptions(), options);\n            this.modalOptions = options;\n\n            if (localStorage.getItem(\"cookiesManagerOptions\") != null) { // If there's already configuration saved\n                // Prepare the options to compare them.\n                var optionsComparison = Utils.prepareObjectsForComparison(this.modalOptions.cookieCategories, this.getCookiesOptions());\n\n                // Check if the options in localStorage and the options from the constructor are the same\n                if (Utils.objectEquals(optionsComparison.A, optionsComparison.B)) {\n                    // If the options are the same, just inject the scripts\n                    this.modalOptions.cookieCategories = this.getCookiesOptions();\n                    this.injectScripts();\n                } else {\n                    // If the options are different, set the configChanged to true\n                    // We are in the constructor. By setting this to true, it might show the banner and modal if the user has set askOnChange to true\n                    this.configChanged = true;\n                }\n            }\n\n            // Generate modal\n            if (options.modalOptions != null) {\n                this.createModal(options.modalOptions);\n            }\n\n\n            if (options.bannerOptions != null) {\n                this.createBanner(options.bannerOptions);\n            }\n\n        }\n\n    }\n\n\n    public createBanner(options: BannerOptions) {\n        this.banner = new Banner(this, options);\n        return this.banner;\n    }\n    public createModal(options: ModalOptions) {\n        this.modal = new Modal(this, options);\n        return this.modal;\n    }\n\n    public acceptAllButton() {\n        this.acceptAll = true;\n        this.modal.hide();\n        this.banner.hide();\n        this.injectScripts();\n        //this.setCookie();\n        this.saveCookieOptions();\n    }\n\n    public showModal() {\n        this.modal.show();\n    }\n\n    public showBanner() {\n        this.banner.show();\n    }\n\n    public hideBanner() {\n        this.banner.hide();\n    }\n\n    public hideModal() {\n        this.modal.hide();\n    }\n\n    private injectScript(src: string, async = false) {\n        var s = document.createElement('script');\n        s.setAttribute('src', src);\n        s.async = async;\n        document.body.appendChild(s);\n    }\n\n    private injectGTM(gtmCode: string) {\n        try {\n            (function (w, d, s, l, i) {\n                w[l] = w[l] || [];\n                w[l].push({\n                    'gtm.start': new Date().getTime(),\n                    event: 'gtm.js',\n                });\n                const f = d.getElementsByTagName(s)[0];\n                const j = d.createElement(s) as HTMLInputElement;\n                const\n                    dl = l != 'dataLayer' ? `&l=${l}` : '';\n                //j.async = true;\n                j.src = `https://www.googletagmanager.com/gtm.js?id=${i}${dl}`;\n                f.parentNode!.insertBefore(j, f);\n            }(window, document, 'script', 'dataLayer', gtmCode));\n            (window as any).dataLayer = (window as any).dataLayer || [];\n        } catch (error) {\n            console.log(\"There was an error loading GTM.\")\n        }\n    }\n\n    public init(banner: boolean, modal: boolean) {\n        if (this.modalOptions.askOnce) {\n            if (localStorage.getItem(\"cookiesManagerOptions\") == null || this.configChanged) {\n                if (banner) {\n                    this.showBanner();\n                }\n                if (modal) {\n                    this.showModal();\n                }\n            } // There's no else, as if cookiesManagerOptions was not null, the constructor would do the job.\n        } else {\n            if (banner) {\n                this.showBanner();\n            }\n            if (modal) {\n                this.showModal();\n            }\n        }\n    }\n\n    public injectScripts() {\n        this.modalOptions.cookieCategories.forEach(category => {\n            if (category.checked || this.acceptAll) {\n                category.scripts.forEach(script => {\n                    if (script.type == ScriptType.STANDARD || script.type == null) {\n                        if (script.scriptSrc != null) {\n                            this.injectScript(script.scriptSrc, script.async)\n                        } else {\n                            throw new Error(\"You should provide a scriptSrc for the script\");\n                        }\n                    } else {\n                        if (script.gtmCode != null) {\n                            this.injectGTM(script.gtmCode);\n                        } else {\n                            throw new Error(\"You should provide a gtmCode for the script\");\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    saveButton() {\n        this.saveCookieOptions();\n    }\n\n    saveCookieOptions() {\n        const base64Options = Utils.encode(JSON.stringify(this.modalOptions.cookieCategories));\n        localStorage.setItem(\"cookiesManagerOptions\", base64Options);\n    }\n\n    getCookiesOptions(): any {\n        return JSON.parse(Utils.decode(localStorage.getItem(\"cookiesManagerOptions\")));\n    }\n\n    private getDefaultOptions(): Options {\n        return {\n            askOnce: true,\n            askOnChange: true,\n            modalOptions: {\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                saveButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n                closeButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n            },\n            bannerOptions: {\n                wall: true,\n                wallScroll: false,\n                wallBlur: true,\n                bannerText: 'This website uses cookies to ensure you get the best experience on our website.',\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                settingsButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n                acceptRequiredOnlyButton: {\n                    text: 'ConfiguraciÃ³n',\n                    show: false,\n                },\n                rejectAllButton: {\n                    text: 'ConfiguraciÃ³n',\n                    show: false,\n                }\n            },\n            cookieCategories: [],\n        }\n    }\n\n\n\n}\n\nexport interface Options {\n    cookieCategories: Array<CookieCategory>,\n    bannerOptions: BannerOptions,\n    modalOptions: ModalOptions,\n    askOnce: boolean,\n    askOnChange: boolean,\n}\n\nexport interface CookieCategory {\n    title: string,\n    description: string,\n    required: boolean,\n    checked: boolean,\n    scripts: [\n        {\n            type: ScriptType,\n            gtmCode: string,\n            scriptSrc: string,\n            async: boolean,\n        }\n    ]\n}\n\nexport enum ScriptType {\n    GTM,\n    STANDARD\n}"],"names":["Utils","static","str","window","btoa","a","atob","isHTML","RegExp","prototype","test","bind","match","tag","this","x","y","ok","Object","keys","tx","length","every","key","deepEqual","b","s","o","entries","sort","map","i","JSON","stringify","obj1","obj2","JSONstringifyOrder","obj","value","A","parse","B","forEach","element","checked","p","constructor","mergeRecursively","e","Banner","cookiesManager","options","banner","injectBanner","setEventListeners","self","document","querySelector","addEventListener","acceptAllButton","showModal","generateBanner","getBannerText","getAcceptAllButton","getSettingsButton","show","text","settingsButton","wrapString","bannerText","insertAdjacentHTML","showWall","wall","wallBlur","hideWall","style","display","hideScroll","overflow","showScroll","wallScroll","classList","add","hide","Modal","injectModal","getElementById","remove","querySelectorAll","c","injectScripts","hideBanner","saveButton","getOptions","cookieCategories","category","index","generateModal","generateCategoriesBlocks","categoriesBlocks","required","title","disabled","description","CookiesManager","getBanner","setBanner","getModal","modal","setModal","modalOptions","acceptAll","configChanged","Error","getDefaultOptions","localStorage","getItem","optionsComparison","prepareObjectsForComparison","getCookiesOptions","objectEquals","createModal","bannerOptions","createBanner","saveCookieOptions","showBanner","hideModal","injectScript","src","async","createElement","setAttribute","body","appendChild","injectGTM","gtmCode","w","d","l","push","Date","getTime","event","f","getElementsByTagName","j","parentNode","insertBefore","dataLayer","error","console","log","init","askOnce","scripts","script","type","ScriptType","STANDARD","scriptSrc","base64Options","encode","setItem","decode","askOnChange","closeButton","acceptRequiredOnlyButton","rejectAllButton"],"mappings":"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"}