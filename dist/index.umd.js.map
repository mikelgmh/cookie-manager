{"version":3,"file":"index.umd.js","sources":["../src/utils.ts","../src/Banner.ts","../src/Modal.ts","../src/CookiesManager.ts"],"sourcesContent":["\nexport class Utils {\n    public static encode(str) {\n        return window.btoa(str);\n    }\n    public static decode(a) {\n        return window.atob(a);\n    }\n    private static isHTML(str: string) {\n        var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n\n        // test isHTML regex\n        return str.match(isHTML);\n\n    }\n    public static wrapString(str: string, tag: string) {\n        if (this.isHTML(str)) {\n            return str;\n        }\n        return `<${tag}>${str}</${tag}>`;\n    }\n\n    public static deepEqual(x, y) {\n        const ok = Object.keys, tx = typeof x, ty = typeof y;\n        return x && y && tx === 'object' && tx === ty ? (\n            ok(x).length === ok(y).length &&\n            ok(x).every(key => this.deepEqual(x[key], y[key]))\n        ) : (x === y);\n    }\n\n    public static compareObjects(a, b) {\n        let s = (o) => Object.entries(o).sort().map(i => {\n            if (i[1] instanceof Object) i[1] = s(i[1]);\n            return i\n        })\n        return JSON.stringify(s(a)) === JSON.stringify(s(b))\n    }\n\n    public static objectEquals(obj1, obj2) {\n        const JSONstringifyOrder = obj => {\n            const keys = {};\n            JSON.stringify(obj, (key, value) => {\n                keys[key] = null;\n                return value;\n            });\n            return JSON.stringify(obj, Object.keys(keys).sort());\n        };\n        return JSONstringifyOrder(obj1) === JSONstringifyOrder(obj2);\n    }\n\n    // @audit this is removing te callback functions. Watch out!\n    public static prepareObjectsForComparison(obj1, obj2) {\n        var A = JSON.parse(JSON.stringify(obj1));\n        var B = JSON.parse(JSON.stringify(obj2));\n\n\n        A.forEach(element => {\n            element.checked = true;\n        });\n        B.forEach(element => {\n            element.checked = true;\n        });\n        return { A, B }\n    }\n\n    public static mergeRecursively(obj1, obj2) {\n        for (var p in obj2) {\n            try {\n                // Property in destination object set; update its value.\n                if (obj2[p].constructor == Object) {\n                    obj1[p] = this.mergeRecursively(obj1[p], obj2[p]);\n                } else {\n                    obj1[p] = obj2[p];\n                }\n            } catch (e) {\n                // Property in destination object not set; create it and set its value.\n                obj1[p] = obj2[p];\n            }\n        }\n        return obj1;\n    }\n}","import { Modal } from \"./Modal\";\nimport { Utils } from './utils';\nimport { CookiesManager } from './CookiesManager';\n\nexport class Banner {\n    private options: BannerOptions;\n    private banner: string;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: BannerOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().bannerOptions.inject) {\n            this.injectBanner();\n        }\n        if (cookiesManager.getOptions().bannerOptions.injectWall) {\n            this.injectWall();\n        }\n        this.setEventListeners();\n    }\n\n    public setEventListeners() {\n        try {\n            let self = this;\n            // Accept all button\n            document.querySelector(\".cm-banner-accept-all-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Config button\n            document.querySelector(\".cm-banner-config-btn\")!.addEventListener(\"click\", function () {\n                self.cookiesManager.showModal();\n            });\n        } catch (error) {\n            console.error(\"Can't set the event listener for the cookies banner. Can't find the HTML elements.\")\n        }\n\n    }\n\n\n\n\n    private generateBanner() {\n        return `\n                <div class=\"c-cookies-config-banner\">\n                    <div class=\"banner-container\">\n                        ${this.getBannerText()}\n                        <div class=\"banner-container__buttons\">\n                            ${this.getAcceptAllButton()}\n                            ${this.getSettingsButton()}\n                        </div>\n                    </div>\n                </div> \n                `;\n    }\n\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"banner-container__button banner-container__accept-all-btn cm-banner-accept-all-btn\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSettingsButton() {\n        return this.options.settingsButton.show ? `<button class=\"banner-container__button-link banner-container__config-btn cm-banner-config-btn\">${this.options.settingsButton.text}</button>` : \"\";\n    }\n\n    private getBannerText() {\n        return Utils.wrapString(this.options.bannerText, \"p\");\n    }\n\n    private injectWall() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateWall());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the wall.\");\n        }\n    }\n\n    public injectBanner() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateBanner());\n            }\n        } catch (error) {\n            console.error(\"Couldn't inject the banner.\");\n        }\n    }\n\n    private generateWall() {\n        const blur = this.options.wallBlur ? \"c-cookies-config-wall--blurred\" : \"\";\n        return `<div class=\"c-cookies-config-wall ${blur}\"></div>`;\n    }\n\n    public showWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.add(\"wall-show\");\n        } catch (error) {\n            console.error(\"Couldn't apply the background wall.\")\n        }\n    }\n\n    public hideWall() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-wall\")!.classList.remove(\"wall-show\");\n        } catch (error) {\n            console.error(\"Unable to hide the background wall.\")\n        }\n    }\n\n    public hideScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"hidden\";\n            document.querySelector(\"html\")!.style.overflow = \"hidden\";\n        } catch (error) {\n            console.error(\"Unable to hide the scroll.\")\n        }\n    }\n\n    public showScroll() {\n        try {\n            document.querySelector(\"body\")!.style.overflow = \"auto\";\n            document.querySelector(\"html\")!.style.overflow = \"auto\";\n        } catch (error) {\n            console.error(\"Unable to show the scroll.\")\n        }\n    }\n\n    public show() {\n        if (this.options.wall) {\n            this.showWall();\n        }\n        if (!this.options.wallScroll) {\n            this.hideScroll();\n        }\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner .banner-container\")!.classList.add(\"show-banner\");\n        } catch (error) {\n            console.error(\"Unable to show the banner.\")\n        }\n    }\n    public hide() {\n        try {\n            document.querySelector<HTMLElement>(\".c-cookies-config-banner\")!.style.display = \"none\";\n        } catch (error) {\n            console.error(\"Unable to hide the banner.\")\n        }\n        this.hideWall();\n        this.showScroll();\n    }\n\n}\n\n\n\n\nexport interface BannerOptions {\n    bannerText: string;\n    wall: boolean,\n    injectWall: boolean,\n    wallScroll: boolean,\n    wallBlur: boolean,\n    inject: boolean,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    settingsButton: {\n        text: string,\n        show: boolean,\n    },\n    acceptRequiredOnlyButton: {\n        text: string,\n        show: boolean,\n    },\n    rejectAllButton: {\n        text: string,\n        show: boolean,\n    },\n}\n","import { CookieCategory, CookiesManager } from './CookiesManager';\nexport class Modal {\n\n    private options: ModalOptions;\n    private cookiesManager: CookiesManager;\n\n    constructor(cookiesManager: CookiesManager, options: ModalOptions) {\n        this.cookiesManager = cookiesManager;\n        this.options = options;\n        if (cookiesManager.getOptions().modalOptions.inject) {\n            this.injectModal();\n        }\n        this.setEventListeners();\n        this.updateSwitchesStatus();\n    }\n\n\n    async show() {\n        try {\n\n            const modal = document.querySelector(\".c-cookies-config-modal\");\n            modal!.classList.add(this.options.showModalClass);\n            await new Promise(r => setTimeout(r, 10)); // This is to make the show animation work\n            // Toggle accordions after showing modal\n            var acc = document.getElementsByClassName(\"cm-accordion\");\n            var i;\n            var self = this;\n            for (i = 0; i < acc.length; i++) {\n                if (acc[i].classList.contains(\"cm-active-on-load\")) {\n                    acc[i].classList.remove(\"cm-active-on-load\");\n                    await new Promise(r => setTimeout(r, 100)); // This is to make the show animation work\n                    self.toggleAccordion(acc[i]);\n                }\n\n            }\n\n            const modalContainer = document.getElementById(\"modal-container\");\n            modalContainer!.classList.add(this.options.showModalClass);\n            // Hide body scroll\n            this.cookiesManager.getBanner().hideScroll();\n        } catch (error) {\n            console.error(\"Could not show cookie modal.\")\n            console.error(error)\n        }\n    }\n    hide(self?: Modal) { // Destucted object, so we can access this context\n        const modalContainer = document.getElementById('modal-container');\n        modalContainer!.classList.remove(this.options.showModalClass);\n\n        // If banner is not shown, show scroll\n        const bannerContainer = document.querySelector(\".c-cookies-config-banner .banner-container\");\n        if (bannerContainer?.classList.contains(\"show-banner\") == false) {\n            this.cookiesManager.getBanner().showScroll();\n        } else {\n            // If the banner is shown, check if the scroll was active. If it was, show the scroll on modal close.\n            const wallScroll = this.cookiesManager.getOptions().bannerOptions.wallScroll;\n            if (wallScroll) {\n                this.cookiesManager.getBanner().showScroll();\n            }\n        }\n\n    }\n\n    setEventListeners() {\n\n        try {\n            var self = this;\n            // Modal close button\n            const closeBtn = document.querySelectorAll('.close-modal')\n            closeBtn.forEach(c => c.addEventListener('click', () => {\n                this.hide(self);\n            }))\n\n            // Accept all button\n            const acceptAllBtn = document.querySelector('.cm-modal-accept-all')!;\n            acceptAllBtn.addEventListener('click', function () {\n                self.cookiesManager.acceptAllButton();\n            });\n\n            // Save button\n            const saveButton = document.querySelector('.cm-modal-save')!;\n            saveButton.addEventListener('click', function () {\n                self.cookiesManager.injectScripts();\n                self.cookiesManager.hideBanner();\n                self.cookiesManager.saveButton();\n                self.cookiesManager.callIndividualCallbacks();\n            });\n\n            // Switches\n            this.cookiesManager.getOptions().cookieCategories.forEach((category: CookieCategory, index) => {\n                var checkbox = document.querySelector(`.cm-switch-${index}`)!;\n                const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n                checkbox.addEventListener('change', function () {\n                    if (this.checked) {\n                        category.checked = true;\n                        self.toggleSwitch(index, true);\n                    } else {\n                        category.checked = false;\n                        self.toggleSwitch(index, false);\n                    }\n                });\n            });\n\n            // Set accordion toggle on click\n            var acc = document.getElementsByClassName(\"cm-accordion\");\n            var i;\n            var self = this;\n            for (i = 0; i < acc.length; i++) {\n                acc[i].addEventListener(\"click\", function () {\n                    self.toggleAccordion(this);\n                });\n            }\n\n\n        } catch (error) {\n            console.error(\"Could not set event listeners for cookie modal.\")\n        }\n    }\n\n    private updateSwitchDisabledStatus(toggleIndex: number, required: boolean) {\n        try {\n            const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n            const checkboxInput = cookieCategoryElements[toggleIndex].querySelector<HTMLInputElement>(`.cm-switch-${toggleIndex}`)!;\n            const checkboxSpan = cookieCategoryElements[toggleIndex].querySelector<HTMLInputElement>(`.slider`)!;\n            const checkboxLabel = cookieCategoryElements[toggleIndex].querySelector<HTMLInputElement>(`label.switch`)!;\n            if (required) {\n                checkboxInput.setAttribute(\"disabled\", \"\")\n                checkboxSpan.classList.add(\"disabled\");\n                checkboxLabel.classList.add(\"disabled\");\n            } else {\n                checkboxInput.removeAttribute(\"disabled\");\n                checkboxSpan.classList.remove(\"disabled\");\n                checkboxLabel.classList.remove(\"disabled\");\n            }\n        } catch (error) {\n            console.error(`Could not change the disabled status from switch cm-switch-${toggleIndex}. Do you have equal switches and cookieCategories? If cm-switch-${toggleIndex} does not exist in your DOM, probably not.`)\n\n        }\n    }\n\n    private toggleSwitch(toggleIndex: number, checked: boolean) {\n        try {\n            const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n            const checkboxInput = cookieCategoryElements[toggleIndex].querySelector<HTMLInputElement>(`.cm-switch-${toggleIndex}`)!;\n            if (!checked) {\n                checkboxInput.removeAttribute(\"checked\");\n            } else {\n                checkboxInput.setAttribute(\"checked\", \"\")\n            }\n            checkboxInput.checked = checked;\n        } catch (error) {\n            console.error(`Could not toggle the switch cm-switch-${toggleIndex}. Do you have equal switches and cookieCategories? If cm-switch-${toggleIndex} does not exist in your DOM, probably not.`)\n        }\n    }\n\n    private async toggleAccordion(element) {\n        element.classList.toggle(\"cm-active\");\n        var panel = element.nextElementSibling;\n        if (panel.style.maxHeight) {\n            panel.style.maxHeight = null;\n        } else {\n            panel.style.maxHeight = panel.scrollHeight + \"px\";\n        }\n    }\n\n    public injectModal() {\n        try {\n            if (document.querySelector(\"body\") != null) {\n                document.querySelector(\"body\")!.insertAdjacentHTML(\"afterend\", this.generateModal());\n            }\n        } catch (error) {\n            console.error(\"Could not inject cookie modal.\")\n        }\n    }\n\n    // If we're not injecting the HTML, we need to update the HTML manually after the page is loaded.\n    public updateSwitchesStatus() {\n        //const cookieCategoryElements = document.querySelectorAll(\".c-cookies-config-modal .cookie-category\");\n        let cookieCategories = this.cookiesManager.getOptions().cookieCategories;\n        cookieCategories.forEach((cookieCategory, index) => {\n            try {\n                this.toggleSwitch(index, cookieCategory.checked)\n                this.updateSwitchDisabledStatus(index, cookieCategory.required)\n            } catch (error) {\n                console.error(\"You have more cookieCategories defined in javascript than in your HTML. Please, use the same number of cookieCategories.\")\n            }\n        });\n    }\n\n    private generateCategoriesBlocks() {\n        let categoriesBlocks = \"\";\n        let cookieCategories = this.cookiesManager.getOptions().cookieCategories;\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            cookieCategories = this.cookiesManager.getCookiesOptions();\n        }\n        cookieCategories.forEach((element, index) => {\n            const disabled = element.required ? \"disabled\" : \"\";\n            const checked = element.checked ? \"checked\" : \"\";\n            const accordionClass = element.accordion.enable ? \"cm-accordion\" : \"\";\n            const accordionPanel = element.accordion.enable ? \"cm-panel\" : \"\";\n            const activeAccordion = element.accordion.active ? \"cm-active-on-load\" : \"\";\n            const accordionChevron = element.accordion.enable ? \"<div class='cc-header__left'></div>\" : \"\";\n            const boxedHeader = element.boxedHeader ? \"cm-boxed\" : \"\";\n            const boxedBody = element.boxedBody ? \"cookie-category__body--boxed\" : \"\";\n            // const boxedHeaderMArgin = element.accordion.active ? \"\" : \"no-chevron\";\n            const block = `\n            <div class=\"cookie-category\">\n                <div class=\"cookie-category__header cc-header ${accordionClass} ${boxedHeader} ${activeAccordion}\">\n                    ${accordionChevron}\n                    <div class=\"cc-header__right\">\n                        <div class=\"header__title\">\n                            ${element.title}\n                        </div>\n                        <div class=\"header__switch\">\n                            <label class=\"switch ${disabled}\">\n                                <input ${disabled} ${checked} class=\"cm-switch-${index}\" type=\"checkbox\">\n                                <span class=\"slider round ${disabled}\"></span>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"cookie-category__body body ${boxedBody} ${accordionPanel}\">\n                    <p>${element.description}</p>\n                </div>\n            </div>\n            `;\n            categoriesBlocks += block;\n        });\n        return categoriesBlocks;\n\n    }\n\n    getCloseButton() {\n        return this.options.closeButton.show ? `<div class=\"modal__close close-modal\" title=\"Close\"><div class=\"close-modal-img\"></div></div>` : \"\";\n    }\n    getAcceptAllButton() {\n        return this.options.acceptAllButton.show ? `<button class=\"modal__button modal__button-width cm-modal-accept-all modal__button-accept-all\">${this.options.acceptAllButton.text}</button>` : \"\";\n    }\n    getSaveButton() {\n        return this.options.saveButton.show ? ` <button class=\"modal__button-link close-modal cm-modal-save modal__button-save-btn\"> ${this.options.saveButton.text} </button>` : \"\";\n    }\n\n    generateModal() {\n        return `\n        <div class=\"c-cookies-config-modal\">\n        <div class=\"modal__container\" id=\"modal-container\">\n          <div class=\"modal__content\">\n            ${this.getCloseButton()}\n            <div class=\"modal__title\">${this.options.title}</div>\n            <p class=\"modal__description\">${this.options.description}</p>\n            <div class=\"modal__cookie-categories\">\n                ${this.generateCategoriesBlocks()}\n            </div>\n    \n            <div class=\"modal__footer\">\n             ${this.getAcceptAllButton()}\n             ${this.getSaveButton()}\n            </div>\n          </div>\n        </div>\n      </div>\n        `;\n    }\n\n}\n\nexport interface ModalOptions {\n    inject: boolean,\n    title: string,\n    description: string,\n    showModalClass: string,\n    acceptAllButton: {\n        text: string,\n        show: boolean,\n    },\n    saveButton: {\n        text: string,\n        show: boolean,\n    },\n    closeButton: {\n        text: string,\n        show: boolean,\n    },\n}","\nimport { Banner, BannerOptions } from \"./Banner\";\nimport { ModalOptions, Modal } from './Modal';\nimport \"./scss/styles.scss\";\nimport { Utils } from './utils';\n\ninterface cookieCatergoryCallbackInterface {\n    (CookieCategory: CookieCategory): void;\n}\nexport class CookiesManager {\n\n    // var isHTML = RegExp.prototype.test.bind(/(<([^>]+)>)/i);\n    private modalOptions: Options;\n    private banner: Banner;\n    private modal: Modal;\n    private acceptAll: boolean = false;\n    private configChanged: boolean = false;\n    private onCookieCategoryChange: cookieCatergoryCallbackInterface;\n\n\n    public getBanner(): Banner {\n        return this.banner;\n    }\n\n    public setBanner(banner: Banner): void {\n        this.banner = banner;\n    }\n\n    public getModal(): Modal {\n        return this.modal;\n    }\n\n    public setModal(modal: Modal): void {\n        this.modal = modal;\n    }\n\n    public getOptions(): Options {\n        return this.modalOptions;\n    }\n\n    public on(listener, callback: cookieCatergoryCallbackInterface) {\n        if (listener == \"onCookieCategoryChange\") {\n            this.onCookieCategoryChange = callback;\n        }\n    }\n\n    constructor(options: Options) {\n        if (options == null) {\n            throw new Error(\"Options for CookiesManager cannot be null.\");\n        } else {\n            if (options.cookieCategories == null) {\n                throw new Error(\"You should provide at least one cookie category\");\n            }\n            // Set all cookie categories as checked by default. Set default value for cookie category\n            const mergedCategories = new Array<CookieCategory>;\n            options.cookieCategories.forEach(category => {\n                //category.checked = true; // Dont set checked to true. Set checked if checked was set\n                mergedCategories.push(Utils.mergeRecursively(this.getDefaultCookieCategoryOptions(), category));\n            });\n            options.cookieCategories = mergedCategories;\n            // Merge the default options with user options\n            const clonedCategories: CookieCategory[] = options.cookieCategories;\n            options = Utils.mergeRecursively(this.getDefaultOptions(), options);\n            this.modalOptions = options;\n            this.constructorInitializationFunction(options, clonedCategories);\n        }\n    }\n\n    private constructorInitializationFunction(options, clonedCategories: CookieCategory[]) {\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) { // If there's already configuration saved\n            // Prepare the options to compare them.\n            // @audit be careful, this function is comparing two strings. The callback functions are being removed, so we need to set them below.\n            var optionsComparison = Utils.prepareObjectsForComparison(this.modalOptions.cookieCategories, this.getCookiesOptions());\n            // Check if the options in localStorage and the options from the constructor are the same\n            if (Utils.objectEquals(optionsComparison.A, optionsComparison.B)) {\n                // If the options are the same, just inject the scripts\n                this.modalOptions.cookieCategories = this.getCookiesOptions();\n                // @audit-ok We need to set the categories events again, as the callback functions were removed.\n                this.modalOptions.cookieCategories.forEach((cookieCategory, index) => {\n                    cookieCategory.events = clonedCategories[index].events;\n                });\n                //this.modalOptions.cookieCategories = clonedCategories;\n\n            } else {\n                localStorage.removeItem(\"cookiesManagerOptions\");\n                // If the options are different, set the configChanged to true\n                // We are in the constructor. By setting this to true, it might show the banner and modal if the user has set askOnChange to true\n                this.configChanged = true;\n            }\n        }\n\n        // Generate modal\n        if (options.modalOptions != null) {\n            this.createModal(options.modalOptions);\n        }\n\n        if (options.bannerOptions != null) {\n            this.createBanner(options.bannerOptions);\n        }\n    }\n\n    public setEventListeners() {\n        this.modal.setEventListeners();\n        this.banner.setEventListeners();\n    }\n\n    public createBanner(options: BannerOptions) {\n        this.banner = new Banner(this, options);\n        return this.banner;\n    }\n    public createModal(options: ModalOptions) {\n        this.modal = new Modal(this, options);\n        return this.modal;\n    }\n\n    public setCookies(): void {\n        this.modalOptions.cookieCategories.forEach(category => {\n            category.events.setCookiesOnChange.forEach(cookie => {\n                let cookieValue;\n                if (category.checked) {\n                    cookieValue = cookie.valueOnAccept;\n                } else {\n                    cookieValue = cookie.valueOnReject;\n                }\n                this.setCookie(cookie.cookieName, cookieValue, cookie.expirationDays, \"/\");\n            })\n        });\n    }\n\n    public setCookie(cookieName: string, cookieValue: string, expDays = 400, path = '/') {\n        try {\n            document.cookie = cookieName + '=' + encodeURIComponent(cookieValue) + '; max-age=' + (3600 * (24 * expDays)) + '; path=' + path\n        } catch (error) {\n            console.log(`Error setting cookie: ${error}`)\n        }\n    }\n\n\n\n    public acceptAllButton() {\n        this.getOptions().cookieCategories.forEach((cookieCategory: CookieCategory) => {\n            cookieCategory.checked = true;\n        })\n        this.modal.updateSwitchesStatus();\n        this.acceptAll = true;\n        this.modal.hide();\n        this.banner.hide();\n        this.injectScripts();\n        this.saveCookieOptions();\n        this.setCookies();\n        this.callIndividualCallbacks();\n    }\n\n    public showModal() {\n        this.modal.show();\n    }\n\n    public showBanner() {\n        this.banner.show();\n    }\n\n    public hideBanner() {\n        this.banner.hide();\n    }\n\n    public hideModal() {\n        this.modal.hide();\n    }\n\n    public callIndividualCallbacks() {\n        this.modalOptions.cookieCategories.forEach(category => {\n            if (category.checked || this.acceptAll) {\n                category.events.onAccept();\n            } else if (!category.checked) {\n                category.events.onReject();\n            }\n        });\n    }\n\n    private injectScript(src: string, async = false) {\n        var s = document.createElement('script');\n        s.setAttribute('src', src);\n        s.async = async;\n        document.body.appendChild(s);\n    }\n\n    private injectGTM(gtmCode: string) {\n        try {\n            (function (w, d, s, l, i) {\n                w[l] = w[l] || [];\n                w[l].push({\n                    'gtm.start': new Date().getTime(),\n                    event: 'gtm.js',\n                });\n                const f = d.getElementsByTagName(s)[0];\n                const j = d.createElement(s) as HTMLInputElement;\n                const\n                    dl = l != 'dataLayer' ? `&l=${l}` : '';\n                //j.async = true;\n                j.src = `https://www.googletagmanager.com/gtm.js?id=${i}${dl}`;\n                f.parentNode!.insertBefore(j, f);\n            }(window, document, 'script', 'dataLayer', gtmCode));\n            (window as any).dataLayer = (window as any).dataLayer || [];\n        } catch (error) {\n            console.error(\"Couldn't inject GTM.\")\n        }\n    }\n\n    public async init(banner: boolean, modal: boolean) {\n        if (this.modalOptions.askOnce) {\n            if (localStorage.getItem(\"cookiesManagerOptions\") == null || this.configChanged) {\n                await this.initShow(banner, modal)\n            } // There's no else, as if cookiesManagerOptions was not null, the constructor would do the job.\n        } else {\n            await this.initShow(banner, modal)\n        }\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            this.injectScripts();\n            this.callIndividualCallbacks();\n        }\n    }\n\n    public async initShow(banner: boolean, modal: boolean) {\n        if (this.modalOptions.delay > 0) {\n            await new Promise(r => setTimeout(r, this.modalOptions.delay)); // This is to make the show animation work\n        }\n        if (banner) {\n            this.showBanner();\n        }\n        if (modal) {\n            this.showModal();\n        }\n    }\n\n    public injectScripts() {\n        try {\n\n            this.modalOptions.cookieCategories.forEach(category => {\n                if (this.onCookieCategoryChange != null) {\n                    this.onCookieCategoryChange(category);\n                }\n                if (category.checked || this.acceptAll) {\n                    category.scripts.forEach(script => {\n                        if (script[\"type\"] == ScriptType.STANDARD || script[\"type\"] == null) {\n                            if (script[\"scriptSrc\"] != null) {\n                                this.injectScript(script[\"scriptSrc\"], script[\"async\"])\n                            }\n                        } else {\n                            if (script[\"gtmCode\"] != null) {\n                                this.injectGTM(script[\"gtmCode\"]);\n                            } else {\n                                throw new Error(\"You should provide a gtmCode for the script\");\n                            }\n                        }\n                    });\n                }\n            });\n        } catch (error) {\n            console.error(`Couldn't inject scripts: ${error}`)\n        }\n    }\n\n    saveButton() {\n        this.saveCookieOptions();\n        this.setCookies();\n        this.callIndividualCallbacks();\n    }\n\n    saveCookieOptions() {\n        const base64Options = Utils.encode(JSON.stringify(this.modalOptions.cookieCategories));\n        localStorage.setItem(\"cookiesManagerOptions\", base64Options);\n    }\n\n    getCookiesOptions(): any {\n        if (localStorage.getItem(\"cookiesManagerOptions\") != null) {\n            return JSON.parse(Utils.decode(localStorage.getItem(\"cookiesManagerOptions\")));\n        }\n        return {};\n    }\n\n    private getDefaultCookieCategoryOptions(): CookieCategory {\n        return {\n            title: \"Cookie Category Example\",\n            description: \"Cookie category description\",\n            required: false,\n            id: \"\",\n            checked: true,\n            events: {\n                onAccept: () => { },\n                onReject: () => { },\n                setCookiesOnChange: []\n            },\n            accordion: {\n                enable: false,\n                enableOnDescriptionLength: 45,\n                active: false,\n            },\n            boxedHeader: false,\n            boxedBody: false,\n            scripts: []\n        }\n    }\n\n    private getDefaultOptions(): Options {\n        return {\n            askOnce: true,\n            delay: 0,\n            askOnChange: true,\n            initOnDomContentLoaded: true,\n            modalOptions: {\n                title: \"Cookie settings\",\n                description: \"Change the settings for the cookies here.\",\n                inject: true,\n                showModalClass: \"show-modal\",\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                saveButton: {\n                    text: 'Save',\n                    show: true,\n                },\n                closeButton: {\n                    text: 'Close',\n                    show: true,\n                },\n            },\n            bannerOptions: {\n                inject: true,\n                injectWall: true,\n                wall: true,\n                wallScroll: true,\n                wallBlur: false,\n                bannerText: 'This website uses cookies to ensure you get the best experience on our website.',\n                acceptAllButton: {\n                    text: 'Accept all',\n                    show: true,\n                },\n                settingsButton: {\n                    text: 'Settings',\n                    show: true,\n                },\n                acceptRequiredOnlyButton: {\n                    text: 'Configuración',\n                    show: false,\n                },\n                rejectAllButton: {\n                    text: 'Configuración',\n                    show: false,\n                }\n            },\n            cookieCategories: [],\n        }\n    }\n\n\n\n}\nexport interface Events {\n    onAccept: Function,\n    onReject: Function,\n    setCookiesOnChange: Array<CookieObject>,\n}\n\nexport interface CookieObject {\n    cookieName: string,\n    valueOnAccept: string | number,\n    valueOnReject: string | number,\n    expirationDays: number,\n}\n\nexport interface Options {\n    cookieCategories: Array<CookieCategory>,\n    initOnDomContentLoaded: boolean,\n    bannerOptions: BannerOptions,\n    modalOptions: ModalOptions,\n    askOnce: boolean,\n    askOnChange: boolean,\n    delay: number,\n}\n\nexport interface CookieCategory {\n    title: string,\n    id: string,\n    description: string,\n    required: boolean,\n    checked: boolean,\n    events: Events,\n    accordion: Accordion,\n    boxedHeader: boolean,\n    boxedBody: boolean,\n    scripts: [\n        {\n            type: ScriptType,\n            gtmCode: string,\n            scriptSrc: string,\n            async: boolean,\n        }\n    ] | []\n}\n\nexport interface Accordion {\n    enable: boolean,\n    enableOnDescriptionLength: number,\n    active: boolean,\n}\n\nexport enum ScriptType {\n    GTM,\n    STANDARD\n}"],"names":["Utils","encode","str","window","btoa","decode","a","atob","isHTML","RegExp","prototype","test","bind","match","wrapString","tag","this","deepEqual","x","y","_this","ok","Object","keys","tx","length","every","key","compareObjects","b","s","o","entries","sort","map","i","JSON","stringify","objectEquals","obj1","obj2","JSONstringifyOrder","obj","value","prepareObjectsForComparison","A","parse","B","forEach","element","checked","mergeRecursively","p","constructor","e","Banner","cookiesManager","options","banner","getOptions","bannerOptions","inject","injectBanner","injectWall","setEventListeners","self","document","querySelector","addEventListener","acceptAllButton","showModal","error","console","generateBanner","getBannerText","getAcceptAllButton","getSettingsButton","_proto","show","text","settingsButton","bannerText","insertAdjacentHTML","generateWall","wallBlur","showWall","classList","add","hideWall","remove","hideScroll","style","overflow","showScroll","wall","wallScroll","hide","display","pact","_Pact","_settle","state","v","then","observer","onFulfilled","onRejected","result","callback","thenable","ScriptType","Modal","modalOptions","injectModal","updateSwitchesStatus","_this2","Promise","resolve","showModalClass","r","setTimeout","_temp3","getElementById","getBanner","acc","getElementsByClassName","contains","toggleAccordion","_temp","_temp2","_catch","bannerContainer","_this3","querySelectorAll","c","injectScripts","hideBanner","saveButton","callIndividualCallbacks","cookieCategories","category","index","checkbox","toggleSwitch","updateSwitchDisabledStatus","toggleIndex","required","cookieCategoryElements","checkboxInput","checkboxSpan","checkboxLabel","setAttribute","removeAttribute","toggle","panel","nextElementSibling","maxHeight","scrollHeight","reject","generateModal","_this4","cookieCategory","generateCategoriesBlocks","categoriesBlocks","localStorage","getItem","getCookiesOptions","disabled","accordionClass","accordion","enable","boxedHeader","activeAccordion","active","accordionChevron","title","boxedBody","description","getCloseButton","closeButton","getSaveButton","CookiesManager","modal","acceptAll","configChanged","onCookieCategoryChange","Error","mergedCategories","Array","push","getDefaultCookieCategoryOptions","clonedCategories","getDefaultOptions","constructorInitializationFunction","setBanner","getModal","setModal","on","listener","optionsComparison","events","removeItem","createModal","createBanner","setCookies","setCookiesOnChange","cookie","setCookie","cookieName","valueOnAccept","valueOnReject","expirationDays","cookieValue","expDays","path","encodeURIComponent","log","saveCookieOptions","showBanner","hideModal","onAccept","onReject","injectScript","src","async","createElement","body","appendChild","injectGTM","gtmCode","w","d","l","getTime","event","f","getElementsByTagName","j","parentNode","insertBefore","dataLayer","init","_temp4","_this5","askOnce","initShow","_temp6","_temp5","_temp9","_this7","_temp10","delay","_this8","scripts","script","STANDARD","base64Options","setItem","id","enableOnDescriptionLength","askOnChange","initOnDomContentLoaded","acceptRequiredOnlyButton","rejectAllButton"],"mappings":"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"}